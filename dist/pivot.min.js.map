{"version":3,"sources":["pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","addSeparators","aggregatorTemplates","aggregators","dayNamesEn","derivers","getSort","locales","mthNamesEn","naturalSort","numberFormat","pivotTableRenderer","rd","renderers","rx","rz","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","uniques","arg","attr","uniq","record","ref","call","numInputs","sum","parseFloat","extremes","mode","val","sorter","sorters","ref1","ref2","Math","quantile","q","vals","sort","a","b","floor","ceil","runningStat","ddof","n","m","s","m_new","sqrt","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","fractionOf","wrapped","type","selector","total","row","col","inner","getAggregator","countUnique","f","listUnique","join","max","min","first","last","median","average","stdev","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Median","Sample Variance","Sample Standard Deviation","Minimum","Maximum","First","Last","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Table Barchart","barchart","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","cancel","totals","vs","by","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","p","_this","as","bs","a1","b1","nas","nbs","String","match","shift","order","l_mapping","mapping","toLowerCase","isFunction","input","ref10","ref3","ref4","ref5","ref6","ref7","ref8","ref9","getRowKeys","getColKeys","sortKeys","arrSort","MULTI_AGG_ATTR","MULTI_AGG_ATTR_DISPLAY","aggregator","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","isArray","rowOrder","colOrder","derivedAttributes","filter","emptyValue","rowKeys","colKeys","tree","rowTotals","colTotals","allTotal","map","agg","sorted","forEachRecord","processRecord","addRecord","compactRecord","j","k","len1","results","results1","tblCols","isEmptyObject","v","treatDataArrayAsRecords","each","text","Error","prototype","forEachMatchingRecord","criteria","callback","attrs","sortersArr","keyA","keyB","attrIdx","comparison","idx","key","keys","sortOrder","foo","c","r","startsWith","fromCharCode","aggIdx","colTotalAgg","flatColKey","flatRowKey","isMultiColTotals","isMultiRowTotals","len2","len3","o","rowTotalAgg","pivotUtilities","pivotData","colAttr","colAttrIdx","colKeyIdx","createHeader","createTotalsCell","createTotalsRow","getClickHandler","getHeaderClickHandler","len4","len5","len6","len7","len8","rowAttr","rowAttrIdx","rowKeyIdx","spanSize","t","tbody","td","th","thead","totalAggregator","tr","txt","u","w","y","z","table","clickCallback","filters","e","headerClickCallback","rowOrCol","document","createElement","className","keyIdx","maxAttrIdx","len","noDraw","stop","parseInt","setAttribute","appendChild","textContent","onclick","formatHeader","innerHTML","createGrandTotalCell","i1","len9","pivot","inputOpts","locale","localeDefaults","dataClass","renderer","rendererOptions","error","console","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","overwrite","attrLength","attrValues","colOrderArrow","existingOpts","fn1","initialRender","materializedInput","ordering","pivotTable","recordsProcessed","refresh","refreshDelayed","rendererControl","rowOrderArrow","shownAttributes","shownInAggregators","shownInDragDrop","tr1","tr2","uiTable","unused","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","hiddenFromAggregators","hiddenFromDragDrop","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","base","class","addClass","appendTo","attrElem","checkContainer","closeFilterBox","controls","filterItem","filterItemExcluded","finalButtons","hasExcludedItem","placeholder","triangleLink","valueCount","valueList","values","hide","accept","accept_gen","trim","accepted","real_filter","substring","find","parent","show","prop","toggleClass","removeClass","left","top","currentTarget","position","css","key_a_to_z","rowSymbol","colSymbol","next","value_a_to_z","value_z_to_a","role","prepend","inArray","rendererName","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","subopts","unusedAttrsContainer","remove","not","excludedItems","inclusionsInfo","children","setTimeout","sortable","update","ui","sender","connectWith","items","scope","colorScaleGenerator","heatmapper","numCols","numRows","nonRed","round","colorScale","forEachCell","elem","barcharter","range","bBase","bgColor","wrapper","height","bottom","right","background-color","padding-left","padding-right","padding","padding-top","text-align"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults =\n            digitsAfterDecimal: 2, scaler: 1,\n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n        opts = $.extend({}, defaults, opts)\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        uniques: (fn, formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> fn(@uniq)\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        extremes: (mode, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            sorter: getSort(data?.sorters, attr)\n            push: (record) ->\n                x = record[attr]\n                if mode in [\"min\", \"max\"]\n                    x = parseFloat(x)\n                    if not isNaN x then @val = Math[mode](x, @val ? x)\n                if mode == \"first\" then @val = x if @sorter(x, @val ? x) <= 0\n                if mode == \"last\"  then @val = x if @sorter(x, @val ? x) >= 0\n            value: -> @val\n            format: (x) -> if isNaN(x) then x else formatter(x)\n            numInputs: if attr? then 0 else 1\n\n        quantile: (q, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            vals: []\n            push: (record) ->\n                x = parseFloat(record[attr])\n                @vals.push(x) if not isNaN(x)\n            value: ->\n                return null if @vals.length == 0\n                @vals.sort((a,b) -> a-b)\n                i = (@vals.length-1)*q\n                return (@vals[Math.floor(i)] + @vals[Math.ceil(i)])/2.0\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        runningStat: (mode=\"mean\", ddof=1, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            n: 0.0, m: 0.0, s: 0.0\n            push: (record) ->\n                x = parseFloat(record[attr])\n                return if isNaN(x)\n                @n += 1.0\n                if @n == 1.0\n                    @m = x\n                else\n                    m_new = @m + (x - @m)/@n\n                    @s = @s + (x - @m)*(x - m_new)\n                    @m = m_new\n            value: ->\n                if mode == \"mean\"\n                    return if @n == 0 then 0/0 else @m\n                return 0 if @n <= ddof\n                switch mode\n                    when \"var\"   then @s/(@n-ddof)\n                    when \"stdev\" then Math.sqrt(@s/(@n-ddof))\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: ->\n                sign = if upper then 1 else -1\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\n                    (1 + 1.642374415149816/@sumDenom)\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    aggregatorTemplates.countUnique = (f) -> aggregatorTemplates.uniques(((x) -> x.length), f)\n    aggregatorTemplates.listUnique =  (s) -> aggregatorTemplates.uniques(((x) -> x.join(s)), ((x)->x))\n    aggregatorTemplates.max =         (f) -> aggregatorTemplates.extremes('max', f)\n    aggregatorTemplates.min =         (f) -> aggregatorTemplates.extremes('min', f)\n    aggregatorTemplates.first =       (f) -> aggregatorTemplates.extremes('first', f)\n    aggregatorTemplates.last =        (f) -> aggregatorTemplates.extremes('last', f)\n    aggregatorTemplates.median =      (f) -> aggregatorTemplates.quantile(0.5, f)\n    aggregatorTemplates.average =     (f) -> aggregatorTemplates.runningStat(\"mean\", 1, f)\n    aggregatorTemplates.var =         (ddof, f) -> aggregatorTemplates.runningStat(\"var\", ddof, f)\n    aggregatorTemplates.stdev =       (ddof, f) -> aggregatorTemplates.runningStat(\"stdev\", ddof, f)\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) ->\n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Integer Sum\":          tpl.sum(usFmtInt)\n        \"Average\":              tpl.average(usFmt)\n        \"Median\":               tpl.median(usFmt)\n        \"Sample Variance\":      tpl.var(1, usFmt)\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"First\":                tpl.first(usFmt)\n        \"Last\":                 tpl.last(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":          (data, opts) ->   pivotTableRenderer(data, opts)\n        \"Table Barchart\": (data, opts) -> $(pivotTableRenderer(data, opts)).barchart()\n        \"Heatmap\":        (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\n        \"Row Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\n        \"Col Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\n\n    locales =\n        en:\n            aggregators: aggregators\n            renderers: renderers\n            localeStrings:\n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter values\"\n                apply: \"Apply\"\n                cancel: \"Cancel\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    rx = /(\\d+)|(\\D+)/g\n    rd = /\\d/\n    rz = /^0/\n    naturalSort = (as, bs) =>\n        #nulls first\n        return -1 if bs? and not as?\n        return  1 if as? and not bs?\n\n        #then raw NaNs\n        return -1 if typeof as == \"number\" and isNaN(as)\n        return  1 if typeof bs == \"number\" and isNaN(bs)\n\n        #numbers and numbery strings group together\n        nas = +as\n        nbs = +bs\n        return -1 if nas < nbs\n        return  1 if nas > nbs\n\n        #within that, true numbers before numbery strings\n        return -1 if typeof as == \"number\" and typeof bs != \"number\"\n        return  1 if typeof bs == \"number\" and typeof as != \"number\"\n        return  0 if typeof as == \"number\" and typeof bs == \"number\"\n\n        # 'Infinity' is a textual number, so less than 'A'\n        return -1 if isNaN(nbs) and not isNaN(nas)\n        return  1 if isNaN(nas) and not isNaN(nbs)\n\n        #finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n        a = String(as)\n        b = String(bs)\n        return 0 if a == b\n        return (if a > b then 1 else -1) unless rd.test(a) and rd.test(b)\n\n        #special treatment for strings containing digits\n        a = a.match(rx) #create digits vs non-digit chunks and iterate through\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 != b1\n                if rd.test(a1) and rd.test(b1) #both are digit chunks\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        return a.length - b.length\n\n    sortAs = (order) ->\n        mapping = {}\n        l_mapping = {} # sort lowercased keys similarly\n        for i, x of order\n            mapping[x] = i\n            l_mapping[x.toLowerCase()] = i if typeof x == \"string\"\n        (a, b) ->\n            if mapping[a]? and mapping[b]? then mapping[a] - mapping[b]\n            else if mapping[a]? then -1\n            else if mapping[b]? then 1\n            else if l_mapping[a]? and l_mapping[b]? then l_mapping[a] - l_mapping[b]\n            else if l_mapping[a]? then -1\n            else if l_mapping[b]? then 1\n            else naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        if sorters?\n            if $.isFunction(sorters)\n                sort = sorters(attr)\n                return sort if $.isFunction(sort)\n            else if sorters[attr]?\n                return sorters[attr]\n        return naturalSort\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        #If there are multiple aggregators, a fake attribute is used to generate the extra cols/rows.\n        #TODO: if these are class constants, the renderer cant read it =/\n        MULTI_AGG_ATTR = \"_metrics\"\n        MULTI_AGG_ATTR_DISPLAY = \"Metrics\"\n\n        constructor: (input, opts = {}) ->\n            #TODO: not sure why i need these here so that the renderers can use them...\n            @MULTI_AGG_ATTR = MULTI_AGG_ATTR\n            @MULTI_AGG_ATTR_DISPLAY = MULTI_AGG_ATTR_DISPLAY\n\n            @input = input\n\n            #May be an array of aggregators.\n            @aggregator = opts.aggregator ? aggregatorTemplates.count()()\n\n            #Only used by pivotUI(). No multi-aggregator support.\n            @aggregatorName = opts.aggregatorName ? \"Count\"\n\n            #Attributes are the record fields selected by the user. Value attributes are for aggregators.\n            @colAttrs = opts.cols ? []\n            @rowAttrs = opts.rows ? []\n            @valAttrs = opts.vals ? []  #Only used by plotly, gchart, and c3 renderers.\n\n            #Insert the multi-agg attribute as the last column if not provided already.\n            if $.isArray(@aggregator) and MULTI_AGG_ATTR not in @colAttrs and MULTI_AGG_ATTR not in @rowAttrs\n                @colAttrs.push MULTI_AGG_ATTR\n\n            #Only used when sorting keys by attribute value. E.g.: sorters[attr]=sortFn\n            @sorters = opts.sorters ? {}\n\n            #How keys are sorted. See @sortKeys() for possible values.\n            @rowOrder = opts.rowOrder ? \"key_a_to_z\"\n            @colOrder = opts.colOrder ? \"key_a_to_z\"\n\n            #HIQ client derives its own attributes, and does not use this property.\n            @derivedAttributes = opts.derivedAttributes ? {}\n\n            @filter = opts.filter ? (-> true)\n            @emptyValue = opts.emptyValue ? 'null'\n\n            #Keys are generated tuples of attribute values.\n            @rowKeys = []\n            @colKeys = []\n\n            #Aggregator instances, one per value cell in the table. Created in @processData().\n            #Normal (non-total) aggregators, at tree[rowKey][colKey].\n            @tree = {}\n            #Row/col total aggregators, at rowTotals[rowKey] and colTotals[colKey].\n            #In multi-metric mode, the values are arrays.\n            @rowTotals = {}\n            @colTotals = {}\n            #Grand total aggregator. In multi-metric mode, this is an array.\n            @allTotal = if not $.isArray(@aggregator) then @aggregator(this, [], []) else @aggregator.map((agg) => agg(this, [], []))\n\n            #Keys are not sorted on init, but when first accessed (e.g. in getRowKeys()).\n            @sorted = false\n\n            @opts = opts\n\n            #Generate table cells and aggregators from records that pass the filter.\n            PivotData.forEachRecord input, opts, (record) =>\n                @processRecord(record) if opts.filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, opts, f) ->\n            if $.isEmptyObject opts.derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) -> \n                    record[k] = v(record) ? record[k] for k, v of opts.derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if !opts.treatDataArrayAsRecords #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof $\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        #Only used by examples/mps_prepop.html. Covered in tests/pivot_spec.coffee.\n        forEachMatchingRecord: (criteria, callback) ->\n            PivotData.forEachRecord @input, @opts, (record) =>\n                return if not @opts.filter(record)\n                for own k, v of criteria\n                    return if v != (record[k] ? @emptyValue)\n                callback(record)\n\n        #Create sort fn that sorts row/col keys by attribute value.\n        #Input is array of attributes on which to sort.\n        #Sorts coarser attributes first, e.g.: [\"A\", 10] < [\"B\", 1] < [\"B\", 5]\n        arrSort: (attrs) =>\n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (keyA,keyB) ->\n                for own attrIdx, sorter of sortersArr\n                    comparison = sorter(keyA[attrIdx], keyB[attrIdx])\n                    return comparison if comparison != 0\n                return 0\n\n        #TODO: describe possible row/colOrder values\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n\n                for [sortOrder, keys, attrs], idx in [\n                  [@rowOrder, @rowKeys, @rowAttrs],\n                  [@colOrder, @colKeys, @colAttrs]\n                ]\n                    v = (k, foo) =>\n                        r = if idx == 0 then k else foo\n                        c = if idx == 1 then k else foo\n                        @getAggregator(r,c).value()\n\n                    if sortOrder.startsWith(\"key\") and sortOrder != \"key_a_to_z\"\n                        key = sortOrder.split('_')[1]\n                        if key.startsWith(\"-\")\n                            key = key.slice(1).split(String.fromCharCode(0))\n                            keys.sort (a,b) => naturalSort v(a, key), v(b, key)\n                        else\n                            key = key.split(String.fromCharCode(0))\n                            keys.sort (a,b) => -naturalSort v(a, key), v(b, key)\n\n                    # TODO: totals (handle agg idx); attr (re-use arrSort())\n                    else\n                        switch sortOrder\n                            when \"value_a_to_z\" then keys.sort (a,b) => naturalSort v(a, []), v(b, [])\n                            when \"value_z_to_a\" then keys.sort (a,b) => -naturalSort v(a, []), v(b, [])\n                            else keys.sort @arrSort(attrs)\n\n\n        getColKeys: () =>\n            @sortKeys()\n            return @colKeys\n\n        getRowKeys: () =>\n            @sortKeys()\n            return @rowKeys\n\n        #TODO: document + cleanup\n        processRecord: (record, aggIdx) -> #this code is called in a tight loop\n\n            #In multi-metric mode, process record once per aggregator.\n            if $.isArray(@aggregator) and not aggIdx?\n                for agg, aggIdx in @aggregator\n                    record[MULTI_AGG_ATTR] = aggIdx\n                    @processRecord(record, aggIdx)\n                delete record[MULTI_AGG_ATTR]  #TODO: dont modify record, but manually insert into keys?\n                return\n\n            aggregator = if aggIdx? then @aggregator[aggIdx] else @aggregator\n\n            colKey = []\n            rowKey = []\n            colKey.push record[x] ? @emptyValue for x in @colAttrs\n            rowKey.push record[x] ? @emptyValue for x in @rowAttrs\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n\n            #Grand total cell.\n            allTotal = if aggIdx? then @allTotal[aggIdx] else @allTotal\n            allTotal.push record\n\n            #TODO: consolidate, please....\n            isMultiRowTotals = aggIdx? and MULTI_AGG_ATTR in @colAttrs\n            if rowKey.length != 0\n                #First time we've seen key: add it to keys array, and instantiate totals aggregator.\n                if not @rowTotals[flatRowKey]\n                    @rowKeys.push rowKey\n                    if isMultiRowTotals\n                        @rowTotals[flatRowKey] = []\n                    else\n                        @rowTotals[flatRowKey] = aggregator(this, rowKey, [])\n                if isMultiRowTotals and not @rowTotals[flatRowKey][aggIdx]\n                  @rowTotals[flatRowKey][aggIdx] = aggregator(this, rowKey, [])\n                #Push the record to the aggregator.\n                rowTotalAgg = @rowTotals[flatRowKey]\n                if isMultiRowTotals\n                    rowTotalAgg = rowTotalAgg[aggIdx]\n                rowTotalAgg.push record\n\n            isMultiColTotals = aggIdx? and MULTI_AGG_ATTR in @rowAttrs\n            if colKey.length != 0\n                #First time we've seen key: add it to keys array, and instantiate totals aggregator.\n                if not @colTotals[flatColKey]\n                    @colKeys.push colKey\n                    if isMultiColTotals\n                        @colTotals[flatColKey] = []\n                    else\n                        @colTotals[flatColKey] = aggregator(this, [], colKey)\n                if isMultiColTotals and not @colTotals[flatColKey][aggIdx]\n                    @colTotals[flatColKey][aggIdx] = aggregator(this, [], colKey)\n                #Push record to the aggregator.\n                colTotalAgg = @colTotals[flatColKey]\n                if isMultiColTotals\n                    colTotalAgg = colTotalAgg[aggIdx]\n                colTotalAgg.push record\n\n            if colKey.length != 0 and rowKey.length != 0\n                if not @tree[flatRowKey]\n                    @tree[flatRowKey] = {}\n                if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey] = aggregator(this, rowKey, colKey)\n                @tree[flatRowKey][flatColKey].push record\n\n        #In multi-metric mode, totals aggregators are arrays.\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            #In multi-metric mode, don't bother creating default aggregators.\n            return if $.isArray(agg) then agg else (agg ? {value: (-> null), format: -> \"\"})\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData}\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n        defaults =\n            table: clickCallback: null\n            localeStrings: totals: \"Totals\"\n            treatDataArrayAsRecords: false\n\n        opts = $.extend(true, {}, defaults, opts)\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        if opts.table.clickCallback\n            getClickHandler = (value, rowKey, colKey) ->\n                filters = {}\n                filters[attr] = colKey[i] for attr, i in colAttrs when colKey[i]?\n                filters[attr] = rowKey[i] for attr, i in rowAttrs when rowKey[i]?\n                return (e) -> opts.table.clickCallback(e, value, filters, pivotData)\n\n        if opts.table.headerClickCallback\n            getHeaderClickHandler = (rowOrCol, type, val) ->\n                return (e) -> opts.table.headerClickCallback(e, rowOrCol, type, val)\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col span size for all cells\n        spanSize = (keys, keyIdx, maxAttrIdx) ->\n            #check if cell should be drawn (e.g., if an attr is coarser than the next one, we only draw that attr cell once)\n            if keyIdx != 0\n                noDraw = true\n                for attrIdx in [0..maxAttrIdx]\n                    if keys[keyIdx-1][attrIdx] != keys[keyIdx][attrIdx]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            #calculate span\n            len = 0\n            while keyIdx+len < keys.length\n                stop = false\n                for attrIdx in [0..maxAttrIdx]\n                    stop = true if keys[keyIdx][attrIdx] != keys[keyIdx+len][attrIdx]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        for colAttr, colAttrIdx in colAttrs\n            tr = document.createElement(\"tr\")\n\n            #create empty upper-left cell spanning both row and col attrs\n            if parseInt(colAttrIdx) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n\n            #create cell for this col attr\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = colAttr\n            if $.isArray(pivotData.aggregator) and colAttr == pivotData.MULTI_AGG_ATTR\n                th.textContent = pivotData.MULTI_AGG_ATTR_DISPLAY  #TODO: hmm, so, we prolly don't need to post-process this in our code\n            if getHeaderClickHandler?\n                th.onclick = getHeaderClickHandler(\"col\", \"attr\", colAttr)\n            tr.appendChild th\n\n            # create cell for each col key (of this attribute)\n            for colKey, colKeyIdx in colKeys\n                x = spanSize(colKeys, parseInt(colKeyIdx), parseInt(colAttrIdx))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    if opts.formatHeader\n                        th.textContent = opts.formatHeader(colKey[colAttrIdx], colAttrs[colAttrIdx]);\n                    else\n                        th.textContent = colKey[colAttrIdx]\n                    th.setAttribute(\"colspan\", x)\n                    if getHeaderClickHandler? and colAttrIdx == (colAttrs.length - 1)\n                        th.onclick = getHeaderClickHandler(\"col\", \"key\", colKey.join(String.fromCharCode(0)))\n\n                    #if this is the last col attr, each col key spans 2 rows (the 2nd being the row attr row)\n                    if parseInt(colAttrIdx) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n\n                    tr.appendChild th\n\n            # create row totals column header\n            if parseInt(colAttrIdx) == 0\n                createHeader = (aggIdx) ->\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                    th.innerHTML = opts.localeStrings.totals\n                    if aggIdx?\n                        th.innerHTML += \" (#{aggIdx})\"\n                    th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                    if getHeaderClickHandler?\n                        th.onclick = getHeaderClickHandler(\"col\", \"totals\", aggIdx or 0)\n                    tr.appendChild th\n\n                #In multi-metric mode, if \"Metrics\" attr is a col, there is one row totals col per aggregator.\n                if $.isArray(pivotData.aggregator) and pivotData.MULTI_AGG_ATTR in colAttrs\n                    for agg, aggIdx in pivotData.aggregator\n                        createHeader(aggIdx)\n                else\n                    createHeader()\n\n            thead.appendChild tr\n\n        #then a single row for all row attrs\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for rowAttr, i in rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.textContent = rowAttr\n                if getHeaderClickHandler?\n                    th.onclick = getHeaderClickHandler(\"row\", \"attr\", rowAttr)\n                tr.appendChild th\n            th = document.createElement(\"th\")  #empty cell below col attr cells\n            if colAttrs.length ==0\n                #use empty cell for the row totals if there are no col attrs\n                #TODO: multi-metric support? prolly none, since \"Metrics\" is a row. also: sort!\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n            tr.appendChild th\n            thead.appendChild tr\n\n        result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for rowKey, rowKeyIdx in rowKeys\n            tr = document.createElement(\"tr\")\n\n            #create a header cell for each row attr\n            for own rowAttrIdx, txt of rowKey\n                x = spanSize(rowKeys, parseInt(rowKeyIdx), parseInt(rowAttrIdx))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    if opts.formatHeader\n                        th.textContent = opts.formatHeader(txt, rowAttrs[rowAttrIdx]);\n                    else\n                        th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n\n                    #if this is the last row attr, the header cell spans 2 cols (the 2nd being the col attr col)\n                    if parseInt(rowAttrIdx) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",2)\n\n                    #TODO: just realized we should rename this to a sort handler, cuz that's why we only do it for the finest-grained attr\n                    if getHeaderClickHandler? and parseInt(rowAttrIdx) == rowAttrs.length-1\n                        th.onclick = getHeaderClickHandler(\"row\", \"key\", rowKey.join(String.fromCharCode(0)))\n\n                    tr.appendChild th\n\n            #create a value cell for each col key\n            for colKey, colKeyIdx in colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row#{rowKeyIdx} col#{colKeyIdx}\"\n                td.textContent = aggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, colKey)\n                tr.appendChild td\n\n            #create rightmost row totals cell/s\n            createTotalsCell = (totalAggregator) ->\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal rowTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, [])\n                td.setAttribute(\"data-for\", \"row\"+rowKeyIdx)\n                tr.appendChild td\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            #Multi-metric mode: one totals cell per aggregator.\n            if $.isArray(totalAggregator)\n                for agg in totalAggregator\n                    createTotalsCell(agg)\n            else\n                createTotalsCell(totalAggregator)\n\n            tbody.appendChild tr\n\n        #finally, the row for col totals (which includes a grand total cell in the bottom-right)\n        createTotalsRow = (aggIdx) ->\n            tr = document.createElement(\"tr\")\n\n            #left-most header cell\n            th = document.createElement(\"th\")\n            th.className = \"pvtTotalLabel pvtColTotalLabel\"\n            th.innerHTML = opts.localeStrings.totals\n            if aggIdx?\n                th.innerHTML += \" (#{aggIdx})\"\n            th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n            if getHeaderClickHandler?\n                th.onclick = getHeaderClickHandler(\"row\", \"totals\", aggIdx or 0)\n            tr.appendChild th\n\n            #value cells, one per col key\n            for colKey, colKeyIdx in colKeys\n                totalAggregator = pivotData.getAggregator([], colKey)\n                if aggIdx?\n                    totalAggregator = totalAggregator[aggIdx]\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal colTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, [], colKey)  #TODO: hmm, so, here, there's way to know which agg was clicked; prolly OK for drill-downs.\n                td.setAttribute(\"data-for\", \"col\"+colKeyIdx)\n                tr.appendChild td\n\n            #right-most grand total cell\n            createGrandTotalCell = (totalAggregator) ->\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtGrandTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, [], [])\n                tr.appendChild td\n\n            #This is an array in multi-metrics mode.\n            totalAggregator = pivotData.getAggregator([], [])\n            if not $.isArray(totalAggregator)\n                createGrandTotalCell(totalAggregator)\n            #Multi-metrics mode, \"metrics\" attr in rows: each grand total cell is created per createTotalsRow() call.\n            else if aggIdx?\n                createGrandTotalCell(totalAggregator[aggIdx])\n            #Multi-metrics mode, \"metrics\" attr in cols, only one totals row: one grand total cell per aggregator.\n            else\n                for agg in totalAggregator\n                    createGrandTotalCell(agg)\n\n            tbody.appendChild tr\n\n        #In multi-metric mode, if the \"Metrics\" attr is a row, there is one\n        #col totals row per aggregator.\n        if $.isArray(pivotData.aggregator) and pivotData.MULTI_AGG_ATTR in rowAttrs\n            for agg, aggIdx in pivotData.aggregator\n                createTotalsRow(aggIdx)\n        else\n            createTotalsRow()\n\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, inputOpts, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            cols : [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: {}\n            derivedAttributes: {}\n            renderer: pivotTableRenderer\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n\n        result = null\n        try\n            pivotData = new opts.dataClass(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n\n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            hiddenFromAggregators: []\n            hiddenFromDragDrop: []\n            menuLimit: 500\n            cols: [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            onRefresh: null\n            filter: -> true\n            sorters: {}\n            treatDataArrayAsRecords: false\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n        else\n            opts = existingOpts\n\n        try\n            # do a first pass on the data to cache a materialized copy of any\n            # function-valued inputs and to compute dimension cardinalities\n            attrValues = {}\n            materializedInput = []\n            recordsProcessed = 0\n            PivotData.forEachRecord input, opts, (record) ->\n                return unless opts.filter(record)\n                materializedInput.push(record)\n                for own attr of record\n                    if not attrValues[attr]?\n                        attrValues[attr] = {}\n                        if recordsProcessed > 0\n                            attrValues[attr][@emptyValue] = recordsProcessed\n                for attr of attrValues\n                    value = record[attr] ? @emptyValue\n                    attrValues[attr][value] ?= 0\n                    attrValues[attr][value]++\n                recordsProcessed++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            rendererControl = $(\"<td>\")\n\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\n            shownAttributes = (a for a of attrValues when a not in opts.hiddenAttributes)\n            shownInAggregators = (c for c in shownAttributes when c not in opts.hiddenFromAggregators)\n            shownInDragDrop = (c for c in shownAttributes when c not in opts.hiddenFromDragDrop)\n\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownInDragDrop\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                unused.addClass('pvtVertList')\n            else\n                unused.addClass('pvtHorizList')\n\n            for own i, attr of shownInDragDrop\n                do (attr) ->\n                    values = (v for v of attrValues[attr])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").append(\n                        $(\"<span>\").text(attr),\n                        $(\"<span>\").addClass(\"count\").text(\"(#{values.length})\"),\n                        )\n                    if values.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        if values.length > 5\n                            controls = $(\"<p>\").appendTo(valueList)\n                            sorter = getSort(opts.sorters, attr)\n                            placeholder = opts.localeStrings.filterResults\n                            $(\"<input>\", {type: \"text\"}).appendTo(controls)\n                                .attr({placeholder: placeholder, class: \"pvtSearch\"})\n                                .bind \"keyup\", ->\n                                    filter = $(this).val().toLowerCase().trim()\n                                    accept_gen = (prefix, accepted) -> (v) ->\n                                        real_filter = filter.substring(prefix.length).trim()\n                                        return true if real_filter.length == 0\n                                        return Math.sign(sorter(v.toLowerCase(), real_filter)) in accepted\n                                    accept =\n                                        if      filter.startsWith(\">=\") then accept_gen(\">=\", [1,0])\n                                        else if filter.startsWith(\"<=\") then accept_gen(\"<=\", [-1,0])\n                                        else if filter.startsWith(\">\")  then accept_gen(\">\",  [1])\n                                        else if filter.startsWith(\"<\")  then accept_gen(\"<\",  [-1])\n                                        else if filter.startsWith(\"~\")  then (v) ->\n                                                return true if filter.substring(1).trim().length == 0\n                                                v.toLowerCase().match(filter.substring(1))\n                                        else (v) -> v.toLowerCase().indexOf(filter) != -1\n\n                                    valueList.find('.pvtCheckContainer p label span.value').each ->\n                                        if accept($(this).text())\n                                            $(this).parent().parent().show()\n                                        else\n                                            $(this).parent().parent().hide()\n                            controls.append $(\"<br>\")\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectAll)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:not(:checked)\")\n                                        .prop(\"checked\", true).toggleClass(\"changed\")\n                                    return false\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectNone)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:checked\")\n                                        .prop(\"checked\", false).toggleClass(\"changed\")\n                                    return false\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for value in values.sort(getSort(opts.sorters, attr))\n                             valueCount = attrValues[attr][value]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[attr]\n                                filterItemExcluded = (value not in opts.inclusions[attr])\n                             else if opts.exclusions[attr]\n                                filterItemExcluded = (value in opts.exclusions[attr])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\n                                .appendTo(filterItem)\n                                .bind \"change\", -> $(this).toggleClass(\"changed\")\n                             filterItem.append $(\"<span>\").addClass(\"value\").text(value)\n                             filterItem.append $(\"<span>\").addClass(\"count\").text(\"(\"+valueCount+\")\")\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    closeFilterBox = ->\n                        if valueList.find(\"[type='checkbox']\").length >\n                               valueList.find(\"[type='checkbox']:checked\").length\n                                attrElem.addClass \"pvtFilteredAttribute\"\n                            else\n                                attrElem.removeClass \"pvtFilteredAttribute\"\n\n                            valueList.find('.pvtSearch').val('')\n                            valueList.find('.pvtCheckContainer p').show()\n                            valueList.hide()\n\n                    finalButtons = $(\"<p>\").appendTo(valueList)\n\n                    if values.length <= opts.menuLimit\n                        $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.apply)\n                            .appendTo(finalButtons).bind \"click\", ->\n                                if valueList.find(\".changed\").removeClass(\"changed\").length\n                                    refresh()\n                                closeFilterBox()\n\n                    $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.cancel)\n                        .appendTo(finalButtons).bind \"click\", ->\n                            valueList.find(\".changed:checked\")\n                                .removeClass(\"changed\").prop(\"checked\", false)\n                            valueList.find(\".changed:not(:checked)\")\n                                .removeClass(\"changed\").prop(\"checked\", true)\n                            closeFilterBox()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle')\n                        .html(\" &#x25BE;\").bind \"click\", (e) ->\n                            {left, top} = $(e.currentTarget).position()\n                            valueList.css(left: left+10, top: top+10).show()\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink)\n\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    unused.append(attrElem).append(valueList)\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            ordering =\n                key_a_to_z:   {rowSymbol: \"&varr;\", colSymbol: \"&harr;\", next: \"value_a_to_z\"}\n                value_a_to_z: {rowSymbol: \"&darr;\", colSymbol: \"&rarr;\", next: \"value_z_to_a\"}\n                value_z_to_a: {rowSymbol: \"&uarr;\", colSymbol: \"&larr;\", next: \"key_a_to_z\"}\n\n            rowOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtRowOrder\")\n                .data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].rowSymbol)\n                    refresh()\n\n            colOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtColOrder\")\n                .data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].colSymbol)\n                    refresh()\n\n            $(\"<td>\").addClass('pvtVals')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append(rowOrderArrow)\n              .append(colOrderArrow)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2)\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend unused\n            else\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(unused)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownInAggregators\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n                subopts.rowOrder = rowOrderArrow.data(\"order\")\n                subopts.colOrder = colOrderArrow.data(\"order\")\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\n                    return true\n\n                pivotTable.pivot(materializedInput,subopts)\n                pivotUIOptions = $.extend {}, opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    colOrder: subopts.colOrder\n                    rowOrder: subopts.rowOrder\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer.val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        # given a series of values\n        # must return a function to map a given value to a CSS color\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n        colorScaleGenerator ?= (values) ->\n            min = Math.min(values...)\n            max = Math.max(values...)\n            return (x) ->\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\n                return \"rgb(255,#{nonRed},#{nonRed})\"\n\n        heatmapper = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorScale = colorScaleGenerator(values)\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\n\n        switch scope\n            when \"heatmap\"    then heatmapper \".pvtVal\"\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\"\n        heatmapper \".pvtTotal.colTotal\"\n\n        return this\n\n    ###\n    Barchart post-processing\n    ###\n\n    $.fn.barchart = (opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        barcharter = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            max = Math.max(values...)\n            if max < 0\n                max = 0\n            range = max;\n            min = Math.min(values...)\n            if min < 0\n                range = max - min\n            scaler = (x) -> 100*x/(1.4*range)\n            forEachCell (x, elem) ->\n                text = elem.text()\n                wrapper = $(\"<div>\").css\n                    \"position\": \"relative\"\n                    \"height\": \"55px\"\n                bgColor = \"gray\"\n                bBase = 0\n                if min < 0\n                    bBase = scaler(-min)\n                if x < 0\n                    bBase += scaler(x)\n                    bgColor = \"darkred\"\n                    x = -x\n                wrapper.append $(\"<div>\").css\n                    \"position\": \"absolute\"\n                    \"bottom\": bBase + \"%\"\n                    \"left\": 0\n                    \"right\": 0\n                    \"height\": scaler(x) + \"%\"\n                    \"background-color\": bgColor\n                wrapper.append $(\"<div>\").text(text).css\n                    \"position\":\"relative\"\n                    \"padding-left\":\"5px\"\n                    \"padding-right\":\"5px\"\n\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\n\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\n        barcharter \".pvtTotal.colTotal\"\n\n        return this\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, addSeparators, aggregatorTemplates, aggregators, dayNamesEn, derivers, getSort, locales, mthNamesEn, naturalSort, numberFormat, pivotTableRenderer, rd, renderers, rx, rz, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\"\n      };\n      opts = $.extend({}, defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      uniques: function(fn, formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return fn(this.uniq);\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      extremes: function(mode, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              sorter: getSort(data != null ? data.sorters : void 0, attr),\n              push: function(record) {\n                var ref, ref1, ref2, x;\n                x = record[attr];\n                if (mode === \"min\" || mode === \"max\") {\n                  x = parseFloat(x);\n                  if (!isNaN(x)) {\n                    this.val = Math[mode](x, (ref = this.val) != null ? ref : x);\n                  }\n                }\n                if (mode === \"first\") {\n                  if (this.sorter(x, (ref1 = this.val) != null ? ref1 : x) <= 0) {\n                    this.val = x;\n                  }\n                }\n                if (mode === \"last\") {\n                  if (this.sorter(x, (ref2 = this.val) != null ? ref2 : x) >= 0) {\n                    return this.val = x;\n                  }\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: function(x) {\n                if (isNaN(x)) {\n                  return x;\n                } else {\n                  return formatter(x);\n                }\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      quantile: function(q, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              vals: [],\n              push: function(record) {\n                var x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.vals.push(x);\n                }\n              },\n              value: function() {\n                var i;\n                if (this.vals.length === 0) {\n                  return null;\n                }\n                this.vals.sort(function(a, b) {\n                  return a - b;\n                });\n                i = (this.vals.length - 1) * q;\n                return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      runningStat: function(mode, ddof, formatter) {\n        if (mode == null) {\n          mode = \"mean\";\n        }\n        if (ddof == null) {\n          ddof = 1;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              n: 0.0,\n              m: 0.0,\n              s: 0.0,\n              push: function(record) {\n                var m_new, x;\n                x = parseFloat(record[attr]);\n                if (isNaN(x)) {\n                  return;\n                }\n                this.n += 1.0;\n                if (this.n === 1.0) {\n                  return this.m = x;\n                } else {\n                  m_new = this.m + (x - this.m) / this.n;\n                  this.s = this.s + (x - this.m) * (x - m_new);\n                  return this.m = m_new;\n                }\n              },\n              value: function() {\n                if (mode === \"mean\") {\n                  if (this.n === 0) {\n                    return 0 / 0;\n                  } else {\n                    return this.m;\n                  }\n                }\n                if (this.n <= ddof) {\n                  return 0;\n                }\n                switch (mode) {\n                  case \"var\":\n                    return this.s / (this.n - ddof);\n                  case \"stdev\":\n                    return Math.sqrt(this.s / (this.n - ddof));\n                }\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                return this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregatorTemplates.countUnique = function(f) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.length;\n      }), f);\n    };\n    aggregatorTemplates.listUnique = function(s) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.join(s);\n      }), (function(x) {\n        return x;\n      }));\n    };\n    aggregatorTemplates.max = function(f) {\n      return aggregatorTemplates.extremes('max', f);\n    };\n    aggregatorTemplates.min = function(f) {\n      return aggregatorTemplates.extremes('min', f);\n    };\n    aggregatorTemplates.first = function(f) {\n      return aggregatorTemplates.extremes('first', f);\n    };\n    aggregatorTemplates.last = function(f) {\n      return aggregatorTemplates.extremes('last', f);\n    };\n    aggregatorTemplates.median = function(f) {\n      return aggregatorTemplates.quantile(0.5, f);\n    };\n    aggregatorTemplates.average = function(f) {\n      return aggregatorTemplates.runningStat(\"mean\", 1, f);\n    };\n    aggregatorTemplates[\"var\"] = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"var\", ddof, f);\n    };\n    aggregatorTemplates.stdev = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"stdev\", ddof, f);\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Median\": tpl.median(usFmt),\n        \"Sample Variance\": tpl[\"var\"](1, usFmt),\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"First\": tpl.first(usFmt),\n        \"Last\": tpl.last(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Table Barchart\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).barchart();\n      },\n      \"Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\", opts);\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts);\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts);\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter values\",\n          apply: \"Apply\",\n          cancel: \"Cancel\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    rx = /(\\d+)|(\\D+)/g;\n    rd = /\\d/;\n    rz = /^0/;\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, nas, nbs;\n        if ((bs != null) && (as == null)) {\n          return -1;\n        }\n        if ((as != null) && (bs == null)) {\n          return 1;\n        }\n        if (typeof as === \"number\" && isNaN(as)) {\n          return -1;\n        }\n        if (typeof bs === \"number\" && isNaN(bs)) {\n          return 1;\n        }\n        nas = +as;\n        nbs = +bs;\n        if (nas < nbs) {\n          return -1;\n        }\n        if (nas > nbs) {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs !== \"number\") {\n          return -1;\n        }\n        if (typeof bs === \"number\" && typeof as !== \"number\") {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs === \"number\") {\n          return 0;\n        }\n        if (isNaN(nbs) && !isNaN(nas)) {\n          return -1;\n        }\n        if (isNaN(nas) && !isNaN(nbs)) {\n          return 1;\n        }\n        a = String(as);\n        b = String(bs);\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, l_mapping, mapping, x;\n      mapping = {};\n      l_mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n        if (typeof x === \"string\") {\n          l_mapping[x.toLowerCase()] = i;\n        }\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else if ((l_mapping[a] != null) && (l_mapping[b] != null)) {\n          return l_mapping[a] - l_mapping[b];\n        } else if (l_mapping[a] != null) {\n          return -1;\n        } else if (l_mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      if (sorters != null) {\n        if ($.isFunction(sorters)) {\n          sort = sorters(attr);\n          if ($.isFunction(sort)) {\n            return sort;\n          }\n        } else if (sorters[attr] != null) {\n          return sorters[attr];\n        }\n      }\n      return naturalSort;\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      var MULTI_AGG_ATTR, MULTI_AGG_ATTR_DISPLAY;\n\n      MULTI_AGG_ATTR = \"_metrics\";\n\n      MULTI_AGG_ATTR_DISPLAY = \"Metrics\";\n\n      function PivotData(input, opts) {\n        var ref, ref1, ref10, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;\n        if (opts == null) {\n          opts = {};\n        }\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.MULTI_AGG_ATTR = MULTI_AGG_ATTR;\n        this.MULTI_AGG_ATTR_DISPLAY = MULTI_AGG_ATTR_DISPLAY;\n        this.input = input;\n        this.aggregator = (ref = opts.aggregator) != null ? ref : aggregatorTemplates.count()();\n        this.aggregatorName = (ref1 = opts.aggregatorName) != null ? ref1 : \"Count\";\n        this.colAttrs = (ref2 = opts.cols) != null ? ref2 : [];\n        this.rowAttrs = (ref3 = opts.rows) != null ? ref3 : [];\n        this.valAttrs = (ref4 = opts.vals) != null ? ref4 : [];\n        if ($.isArray(this.aggregator) && indexOf.call(this.colAttrs, MULTI_AGG_ATTR) < 0 && indexOf.call(this.rowAttrs, MULTI_AGG_ATTR) < 0) {\n          this.colAttrs.push(MULTI_AGG_ATTR);\n        }\n        this.sorters = (ref5 = opts.sorters) != null ? ref5 : {};\n        this.rowOrder = (ref6 = opts.rowOrder) != null ? ref6 : \"key_a_to_z\";\n        this.colOrder = (ref7 = opts.colOrder) != null ? ref7 : \"key_a_to_z\";\n        this.derivedAttributes = (ref8 = opts.derivedAttributes) != null ? ref8 : {};\n        this.filter = (ref9 = opts.filter) != null ? ref9 : (function() {\n          return true;\n        });\n        this.emptyValue = (ref10 = opts.emptyValue) != null ? ref10 : 'null';\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.tree = {};\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = !$.isArray(this.aggregator) ? this.aggregator(this, [], []) : this.aggregator.map((function(_this) {\n          return function(agg) {\n            return agg(_this, [], []);\n          };\n        })(this));\n        this.sorted = false;\n        this.opts = opts;\n        PivotData.forEachRecord(input, opts, (function(_this) {\n          return function(record) {\n            if (opts.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, opts, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(opts.derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, ref1, v;\n            ref = opts.derivedAttributes;\n            for (k in ref) {\n              v = ref[k];\n              record[k] = (ref1 = v(record)) != null ? ref1 : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if (!opts.treatDataArrayAsRecords) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof $) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.prototype.forEachMatchingRecord = function(criteria, callback) {\n        return PivotData.forEachRecord(this.input, this.opts, (function(_this) {\n          return function(record) {\n            var k, ref, v;\n            if (!_this.opts.filter(record)) {\n              return;\n            }\n            for (k in criteria) {\n              if (!hasProp.call(criteria, k)) continue;\n              v = criteria[k];\n              if (v !== ((ref = record[k]) != null ? ref : _this.emptyValue)) {\n                return;\n              }\n            }\n            return callback(record);\n          };\n        })(this));\n      };\n\n      PivotData.prototype.arrSort = function(attrs) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(keyA, keyB) {\n          var attrIdx, comparison, sorter;\n          for (attrIdx in sortersArr) {\n            if (!hasProp.call(sortersArr, attrIdx)) continue;\n            sorter = sortersArr[attrIdx];\n            comparison = sorter(keyA[attrIdx], keyB[attrIdx]);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        var attrs, idx, key, keys, l, len1, ref, ref1, results, sortOrder, v;\n        if (!this.sorted) {\n          this.sorted = true;\n          ref = [[this.rowOrder, this.rowKeys, this.rowAttrs], [this.colOrder, this.colKeys, this.colAttrs]];\n          results = [];\n          for (idx = l = 0, len1 = ref.length; l < len1; idx = ++l) {\n            ref1 = ref[idx], sortOrder = ref1[0], keys = ref1[1], attrs = ref1[2];\n            v = (function(_this) {\n              return function(k, foo) {\n                var c, r;\n                r = idx === 0 ? k : foo;\n                c = idx === 1 ? k : foo;\n                return _this.getAggregator(r, c).value();\n              };\n            })(this);\n            if (sortOrder.startsWith(\"key\") && sortOrder !== \"key_a_to_z\") {\n              key = sortOrder.split('_')[1];\n              if (key.startsWith(\"-\")) {\n                key = key.slice(1).split(String.fromCharCode(0));\n                results.push(keys.sort((function(_this) {\n                  return function(a, b) {\n                    return naturalSort(v(a, key), v(b, key));\n                  };\n                })(this)));\n              } else {\n                key = key.split(String.fromCharCode(0));\n                results.push(keys.sort((function(_this) {\n                  return function(a, b) {\n                    return -naturalSort(v(a, key), v(b, key));\n                  };\n                })(this)));\n              }\n            } else {\n              switch (sortOrder) {\n                case \"value_a_to_z\":\n                  results.push(keys.sort((function(_this) {\n                    return function(a, b) {\n                      return naturalSort(v(a, []), v(b, []));\n                    };\n                  })(this)));\n                  break;\n                case \"value_z_to_a\":\n                  results.push(keys.sort((function(_this) {\n                    return function(a, b) {\n                      return -naturalSort(v(a, []), v(b, []));\n                    };\n                  })(this)));\n                  break;\n                default:\n                  results.push(keys.sort(this.arrSort(attrs)));\n              }\n            }\n          }\n          return results;\n        }\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        this.sortKeys();\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        this.sortKeys();\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record, aggIdx) {\n        var agg, aggregator, allTotal, colKey, colTotalAgg, flatColKey, flatRowKey, isMultiColTotals, isMultiRowTotals, l, len1, len2, len3, n, o, ref, ref1, ref2, ref3, ref4, rowKey, rowTotalAgg, x;\n        if ($.isArray(this.aggregator) && (aggIdx == null)) {\n          ref = this.aggregator;\n          for (aggIdx = l = 0, len1 = ref.length; l < len1; aggIdx = ++l) {\n            agg = ref[aggIdx];\n            record[MULTI_AGG_ATTR] = aggIdx;\n            this.processRecord(record, aggIdx);\n          }\n          delete record[MULTI_AGG_ATTR];\n          return;\n        }\n        aggregator = aggIdx != null ? this.aggregator[aggIdx] : this.aggregator;\n        colKey = [];\n        rowKey = [];\n        ref1 = this.colAttrs;\n        for (n = 0, len2 = ref1.length; n < len2; n++) {\n          x = ref1[n];\n          colKey.push((ref2 = record[x]) != null ? ref2 : this.emptyValue);\n        }\n        ref3 = this.rowAttrs;\n        for (o = 0, len3 = ref3.length; o < len3; o++) {\n          x = ref3[o];\n          rowKey.push((ref4 = record[x]) != null ? ref4 : this.emptyValue);\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        allTotal = aggIdx != null ? this.allTotal[aggIdx] : this.allTotal;\n        allTotal.push(record);\n        isMultiRowTotals = (aggIdx != null) && indexOf.call(this.colAttrs, MULTI_AGG_ATTR) >= 0;\n        if (rowKey.length !== 0) {\n          if (!this.rowTotals[flatRowKey]) {\n            this.rowKeys.push(rowKey);\n            if (isMultiRowTotals) {\n              this.rowTotals[flatRowKey] = [];\n            } else {\n              this.rowTotals[flatRowKey] = aggregator(this, rowKey, []);\n            }\n          }\n          if (isMultiRowTotals && !this.rowTotals[flatRowKey][aggIdx]) {\n            this.rowTotals[flatRowKey][aggIdx] = aggregator(this, rowKey, []);\n          }\n          rowTotalAgg = this.rowTotals[flatRowKey];\n          if (isMultiRowTotals) {\n            rowTotalAgg = rowTotalAgg[aggIdx];\n          }\n          rowTotalAgg.push(record);\n        }\n        isMultiColTotals = (aggIdx != null) && indexOf.call(this.rowAttrs, MULTI_AGG_ATTR) >= 0;\n        if (colKey.length !== 0) {\n          if (!this.colTotals[flatColKey]) {\n            this.colKeys.push(colKey);\n            if (isMultiColTotals) {\n              this.colTotals[flatColKey] = [];\n            } else {\n              this.colTotals[flatColKey] = aggregator(this, [], colKey);\n            }\n          }\n          if (isMultiColTotals && !this.colTotals[flatColKey][aggIdx]) {\n            this.colTotals[flatColKey][aggIdx] = aggregator(this, [], colKey);\n          }\n          colTotalAgg = this.colTotals[flatColKey];\n          if (isMultiColTotals) {\n            colTotalAgg = colTotalAgg[aggIdx];\n          }\n          colTotalAgg.push(record);\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = aggregator(this, rowKey, colKey);\n          }\n          return this.tree[flatRowKey][flatColKey].push(record);\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        if ($.isArray(agg)) {\n          return agg;\n        } else {\n          return agg != null ? agg : {\n            value: (function() {\n              return null;\n            }),\n            format: function() {\n              return \"\";\n            }\n          };\n        }\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var agg, aggIdx, aggregator, colAttr, colAttrIdx, colAttrs, colKey, colKeyIdx, colKeys, createHeader, createTotalsCell, createTotalsRow, defaults, getClickHandler, getHeaderClickHandler, i, l, len1, len2, len3, len4, len5, len6, len7, len8, n, o, ref, ref1, ref2, ref3, result, rowAttr, rowAttrIdx, rowAttrs, rowKey, rowKeyIdx, rowKeys, spanSize, t, tbody, td, th, thead, totalAggregator, tr, txt, u, val, w, x, y, z;\n      defaults = {\n        table: {\n          clickCallback: null\n        },\n        localeStrings: {\n          totals: \"Totals\"\n        },\n        treatDataArrayAsRecords: false\n      };\n      opts = $.extend(true, {}, defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      if (opts.table.clickCallback) {\n        getClickHandler = function(value, rowKey, colKey) {\n          var attr, filters, i, l, len1, len2, n;\n          filters = {};\n          for (i = l = 0, len1 = colAttrs.length; l < len1; i = ++l) {\n            attr = colAttrs[i];\n            if (colKey[i] != null) {\n              filters[attr] = colKey[i];\n            }\n          }\n          for (i = n = 0, len2 = rowAttrs.length; n < len2; i = ++n) {\n            attr = rowAttrs[i];\n            if (rowKey[i] != null) {\n              filters[attr] = rowKey[i];\n            }\n          }\n          return function(e) {\n            return opts.table.clickCallback(e, value, filters, pivotData);\n          };\n        };\n      }\n      if (opts.table.headerClickCallback) {\n        getHeaderClickHandler = function(rowOrCol, type, val) {\n          return function(e) {\n            return opts.table.headerClickCallback(e, rowOrCol, type, val);\n          };\n        };\n      }\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(keys, keyIdx, maxAttrIdx) {\n        var attrIdx, l, len, n, noDraw, ref, ref1, stop;\n        if (keyIdx !== 0) {\n          noDraw = true;\n          for (attrIdx = l = 0, ref = maxAttrIdx; 0 <= ref ? l <= ref : l >= ref; attrIdx = 0 <= ref ? ++l : --l) {\n            if (keys[keyIdx - 1][attrIdx] !== keys[keyIdx][attrIdx]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (keyIdx + len < keys.length) {\n          stop = false;\n          for (attrIdx = n = 0, ref1 = maxAttrIdx; 0 <= ref1 ? n <= ref1 : n >= ref1; attrIdx = 0 <= ref1 ? ++n : --n) {\n            if (keys[keyIdx][attrIdx] !== keys[keyIdx + len][attrIdx]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      for (colAttrIdx = l = 0, len1 = colAttrs.length; l < len1; colAttrIdx = ++l) {\n        colAttr = colAttrs[colAttrIdx];\n        tr = document.createElement(\"tr\");\n        if (parseInt(colAttrIdx) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = colAttr;\n        if ($.isArray(pivotData.aggregator) && colAttr === pivotData.MULTI_AGG_ATTR) {\n          th.textContent = pivotData.MULTI_AGG_ATTR_DISPLAY;\n        }\n        if (getHeaderClickHandler != null) {\n          th.onclick = getHeaderClickHandler(\"col\", \"attr\", colAttr);\n        }\n        tr.appendChild(th);\n        for (colKeyIdx = n = 0, len2 = colKeys.length; n < len2; colKeyIdx = ++n) {\n          colKey = colKeys[colKeyIdx];\n          x = spanSize(colKeys, parseInt(colKeyIdx), parseInt(colAttrIdx));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            if (opts.formatHeader) {\n              th.textContent = opts.formatHeader(colKey[colAttrIdx], colAttrs[colAttrIdx]);\n            } else {\n              th.textContent = colKey[colAttrIdx];\n            }\n            th.setAttribute(\"colspan\", x);\n            if ((getHeaderClickHandler != null) && colAttrIdx === (colAttrs.length - 1)) {\n              th.onclick = getHeaderClickHandler(\"col\", \"key\", colKey.join(String.fromCharCode(0)));\n            }\n            if (parseInt(colAttrIdx) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(colAttrIdx) === 0) {\n          createHeader = function(aggIdx) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n            th.innerHTML = opts.localeStrings.totals;\n            if (aggIdx != null) {\n              th.innerHTML += \" (\" + aggIdx + \")\";\n            }\n            th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n            if (getHeaderClickHandler != null) {\n              th.onclick = getHeaderClickHandler(\"col\", \"totals\", aggIdx || 0);\n            }\n            return tr.appendChild(th);\n          };\n          if ($.isArray(pivotData.aggregator) && (ref = pivotData.MULTI_AGG_ATTR, indexOf.call(colAttrs, ref) >= 0)) {\n            ref1 = pivotData.aggregator;\n            for (aggIdx = o = 0, len3 = ref1.length; o < len3; aggIdx = ++o) {\n              agg = ref1[aggIdx];\n              createHeader(aggIdx);\n            }\n          } else {\n            createHeader();\n          }\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i = t = 0, len4 = rowAttrs.length; t < len4; i = ++t) {\n          rowAttr = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = rowAttr;\n          if (getHeaderClickHandler != null) {\n            th.onclick = getHeaderClickHandler(\"row\", \"attr\", rowAttr);\n          }\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      for (rowKeyIdx = u = 0, len5 = rowKeys.length; u < len5; rowKeyIdx = ++u) {\n        rowKey = rowKeys[rowKeyIdx];\n        tr = document.createElement(\"tr\");\n        for (rowAttrIdx in rowKey) {\n          if (!hasProp.call(rowKey, rowAttrIdx)) continue;\n          txt = rowKey[rowAttrIdx];\n          x = spanSize(rowKeys, parseInt(rowKeyIdx), parseInt(rowAttrIdx));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            if (opts.formatHeader) {\n              th.textContent = opts.formatHeader(txt, rowAttrs[rowAttrIdx]);\n            } else {\n              th.textContent = txt;\n            }\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(rowAttrIdx) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            if ((getHeaderClickHandler != null) && parseInt(rowAttrIdx) === rowAttrs.length - 1) {\n              th.onclick = getHeaderClickHandler(\"row\", \"key\", rowKey.join(String.fromCharCode(0)));\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (colKeyIdx = w = 0, len6 = colKeys.length; w < len6; colKeyIdx = ++w) {\n          colKey = colKeys[colKeyIdx];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + rowKeyIdx + \" col\" + colKeyIdx;\n          td.textContent = aggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, colKey);\n          }\n          tr.appendChild(td);\n        }\n        createTotalsCell = function(totalAggregator) {\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal rowTotal\";\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, []);\n          }\n          td.setAttribute(\"data-for\", \"row\" + rowKeyIdx);\n          return tr.appendChild(td);\n        };\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        if ($.isArray(totalAggregator)) {\n          for (y = 0, len7 = totalAggregator.length; y < len7; y++) {\n            agg = totalAggregator[y];\n            createTotalsCell(agg);\n          }\n        } else {\n          createTotalsCell(totalAggregator);\n        }\n        tbody.appendChild(tr);\n      }\n      createTotalsRow = function(aggIdx) {\n        var createGrandTotalCell, i1, len8, len9, z;\n        tr = document.createElement(\"tr\");\n        th = document.createElement(\"th\");\n        th.className = \"pvtTotalLabel pvtColTotalLabel\";\n        th.innerHTML = opts.localeStrings.totals;\n        if (aggIdx != null) {\n          th.innerHTML += \" (\" + aggIdx + \")\";\n        }\n        th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n        if (getHeaderClickHandler != null) {\n          th.onclick = getHeaderClickHandler(\"row\", \"totals\", aggIdx || 0);\n        }\n        tr.appendChild(th);\n        for (colKeyIdx = z = 0, len8 = colKeys.length; z < len8; colKeyIdx = ++z) {\n          colKey = colKeys[colKeyIdx];\n          totalAggregator = pivotData.getAggregator([], colKey);\n          if (aggIdx != null) {\n            totalAggregator = totalAggregator[aggIdx];\n          }\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal colTotal\";\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, [], colKey);\n          }\n          td.setAttribute(\"data-for\", \"col\" + colKeyIdx);\n          tr.appendChild(td);\n        }\n        createGrandTotalCell = function(totalAggregator) {\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtGrandTotal\";\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, [], []);\n          }\n          return tr.appendChild(td);\n        };\n        totalAggregator = pivotData.getAggregator([], []);\n        if (!$.isArray(totalAggregator)) {\n          createGrandTotalCell(totalAggregator);\n        } else if (aggIdx != null) {\n          createGrandTotalCell(totalAggregator[aggIdx]);\n        } else {\n          for (i1 = 0, len9 = totalAggregator.length; i1 < len9; i1++) {\n            agg = totalAggregator[i1];\n            createGrandTotalCell(agg);\n          }\n        }\n        return tbody.appendChild(tr);\n      };\n      if ($.isArray(pivotData.aggregator) && (ref2 = pivotData.MULTI_AGG_ATTR, indexOf.call(rowAttrs, ref2) >= 0)) {\n        ref3 = pivotData.aggregator;\n        for (aggIdx = z = 0, len8 = ref3.length; z < len8; aggIdx = ++z) {\n          agg = ref3[aggIdx];\n          createTotalsRow(aggIdx);\n        }\n      } else {\n        createTotalsRow();\n      }\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, inputOpts, locale) {\n      var defaults, e, localeDefaults, localeStrings, opts, pivotData, result, x;\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      result = null;\n      try {\n        pivotData = new opts.dataClass(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggregator, attr, attrLength, attrValues, c, colOrderArrow, defaults, e, existingOpts, fn1, i, initialRender, l, len1, len2, len3, localeDefaults, localeStrings, materializedInput, n, o, opts, ordering, pivotTable, recordsProcessed, ref, ref1, ref2, ref3, refresh, refreshDelayed, renderer, rendererControl, rowOrderArrow, shownAttributes, shownInAggregators, shownInDragDrop, tr1, tr2, uiTable, unused, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        hiddenFromAggregators: [],\n        hiddenFromDragDrop: [],\n        menuLimit: 500,\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        onRefresh: null,\n        filter: function() {\n          return true;\n        },\n        sorters: {},\n        treatDataArrayAsRecords: false\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        attrValues = {};\n        materializedInput = [];\n        recordsProcessed = 0;\n        PivotData.forEachRecord(input, opts, function(record) {\n          var attr, base, ref, value;\n          if (!opts.filter(record)) {\n            return;\n          }\n          materializedInput.push(record);\n          for (attr in record) {\n            if (!hasProp.call(record, attr)) continue;\n            if (attrValues[attr] == null) {\n              attrValues[attr] = {};\n              if (recordsProcessed > 0) {\n                attrValues[attr][this.emptyValue] = recordsProcessed;\n              }\n            }\n          }\n          for (attr in attrValues) {\n            value = (ref = record[attr]) != null ? ref : this.emptyValue;\n            if ((base = attrValues[attr])[value] == null) {\n              base[value] = 0;\n            }\n            attrValues[attr][value]++;\n          }\n          return recordsProcessed++;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<td>\");\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref = opts.renderers;\n        for (x in ref) {\n          if (!hasProp.call(ref, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var results;\n          results = [];\n          for (a in attrValues) {\n            if (indexOf.call(opts.hiddenAttributes, a) < 0) {\n              results.push(a);\n            }\n          }\n          return results;\n        })();\n        shownInAggregators = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            c = shownAttributes[l];\n            if (indexOf.call(opts.hiddenFromAggregators, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        shownInDragDrop = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            c = shownAttributes[l];\n            if (indexOf.call(opts.hiddenFromDragDrop, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (l = 0, len1 = shownInDragDrop.length; l < len1; l++) {\n            a = shownInDragDrop[l];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          unused.addClass('pvtVertList');\n        } else {\n          unused.addClass('pvtHorizList');\n        }\n        fn1 = function(attr) {\n          var attrElem, checkContainer, closeFilterBox, controls, filterItem, filterItemExcluded, finalButtons, hasExcludedItem, len2, n, placeholder, ref1, sorter, triangleLink, v, value, valueCount, valueList, values;\n          values = (function() {\n            var results;\n            results = [];\n            for (v in attrValues[attr]) {\n              results.push(v);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").append($(\"<span>\").text(attr), $(\"<span>\").addClass(\"count\").text(\"(\" + values.length + \")\")));\n          if (values.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            if (values.length > 5) {\n              controls = $(\"<p>\").appendTo(valueList);\n              sorter = getSort(opts.sorters, attr);\n              placeholder = opts.localeStrings.filterResults;\n              $(\"<input>\", {\n                type: \"text\"\n              }).appendTo(controls).attr({\n                placeholder: placeholder,\n                \"class\": \"pvtSearch\"\n              }).bind(\"keyup\", function() {\n                var accept, accept_gen, filter;\n                filter = $(this).val().toLowerCase().trim();\n                accept_gen = function(prefix, accepted) {\n                  return function(v) {\n                    var real_filter, ref1;\n                    real_filter = filter.substring(prefix.length).trim();\n                    if (real_filter.length === 0) {\n                      return true;\n                    }\n                    return ref1 = Math.sign(sorter(v.toLowerCase(), real_filter)), indexOf.call(accepted, ref1) >= 0;\n                  };\n                };\n                accept = filter.startsWith(\">=\") ? accept_gen(\">=\", [1, 0]) : filter.startsWith(\"<=\") ? accept_gen(\"<=\", [-1, 0]) : filter.startsWith(\">\") ? accept_gen(\">\", [1]) : filter.startsWith(\"<\") ? accept_gen(\"<\", [-1]) : filter.startsWith(\"~\") ? function(v) {\n                  if (filter.substring(1).trim().length === 0) {\n                    return true;\n                  }\n                  return v.toLowerCase().match(filter.substring(1));\n                } : function(v) {\n                  return v.toLowerCase().indexOf(filter) !== -1;\n                };\n                return valueList.find('.pvtCheckContainer p label span.value').each(function() {\n                  if (accept($(this).text())) {\n                    return $(this).parent().parent().show();\n                  } else {\n                    return $(this).parent().parent().hide();\n                  }\n                });\n              });\n              controls.append($(\"<br>\"));\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n                valueList.find(\"input:visible:not(:checked)\").prop(\"checked\", true).toggleClass(\"changed\");\n                return false;\n              });\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n                valueList.find(\"input:visible:checked\").prop(\"checked\", false).toggleClass(\"changed\");\n                return false;\n              });\n            }\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref1 = values.sort(getSort(opts.sorters, attr));\n            for (n = 0, len2 = ref1.length; n < len2; n++) {\n              value = ref1[n];\n              valueCount = attrValues[attr][value];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[attr], value) < 0);\n              } else if (opts.exclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[attr], value) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr, value]).appendTo(filterItem).bind(\"change\", function() {\n                return $(this).toggleClass(\"changed\");\n              });\n              filterItem.append($(\"<span>\").addClass(\"value\").text(value));\n              filterItem.append($(\"<span>\").addClass(\"count\").text(\"(\" + valueCount + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          closeFilterBox = function() {\n            if (valueList.find(\"[type='checkbox']\").length > valueList.find(\"[type='checkbox']:checked\").length) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            valueList.find('.pvtSearch').val('');\n            valueList.find('.pvtCheckContainer p').show();\n            return valueList.hide();\n          };\n          finalButtons = $(\"<p>\").appendTo(valueList);\n          if (values.length <= opts.menuLimit) {\n            $(\"<button>\", {\n              type: \"button\"\n            }).text(opts.localeStrings.apply).appendTo(finalButtons).bind(\"click\", function() {\n              if (valueList.find(\".changed\").removeClass(\"changed\").length) {\n                refresh();\n              }\n              return closeFilterBox();\n            });\n          }\n          $(\"<button>\", {\n            type: \"button\"\n          }).text(opts.localeStrings.cancel).appendTo(finalButtons).bind(\"click\", function() {\n            valueList.find(\".changed:checked\").removeClass(\"changed\").prop(\"checked\", false);\n            valueList.find(\".changed:not(:checked)\").removeClass(\"changed\").prop(\"checked\", true);\n            return closeFilterBox();\n          });\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", function(e) {\n            var left, ref2, top;\n            ref2 = $(e.currentTarget).position(), left = ref2.left, top = ref2.top;\n            return valueList.css({\n              left: left + 10,\n              top: top + 10\n            }).show();\n          });\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          return unused.append(attrElem).append(valueList);\n        };\n        for (i in shownInDragDrop) {\n          if (!hasProp.call(shownInDragDrop, i)) continue;\n          attr = shownInDragDrop[i];\n          fn1(attr);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref1 = opts.aggregators;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        ordering = {\n          key_a_to_z: {\n            rowSymbol: \"&varr;\",\n            colSymbol: \"&harr;\",\n            next: \"value_a_to_z\"\n          },\n          value_a_to_z: {\n            rowSymbol: \"&darr;\",\n            colSymbol: \"&rarr;\",\n            next: \"value_z_to_a\"\n          },\n          value_z_to_a: {\n            rowSymbol: \"&uarr;\",\n            colSymbol: \"&larr;\",\n            next: \"key_a_to_z\"\n          }\n        };\n        rowOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtRowOrder\").data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].rowSymbol);\n          return refresh();\n        });\n        colOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtColOrder\").data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].colSymbol);\n          return refresh();\n        });\n        $(\"<td>\").addClass('pvtVals').appendTo(tr1).append(aggregator).append(rowOrderArrow).append(colOrderArrow).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tr2);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n          uiTable.find('tr:nth-child(2)').prepend(unused);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(rendererControl).append(unused));\n        }\n        this.html(uiTable);\n        ref2 = opts.cols;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownInDragDrop))));\n        }\n        ref3 = opts.rows;\n        for (o = 0, len3 = ref3.length; o < len3; o++) {\n          x = ref3[o];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownInDragDrop))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var exclusions, inclusions, len4, newDropdown, numInputsToProcess, pivotUIOptions, pvtVals, ref4, ref5, subopts, t, u, unusedAttrsContainer, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass\n            };\n            numInputsToProcess = (ref4 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref4 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = t = 0, ref5 = numInputsToProcess; 0 <= ref5 ? t < ref5 : t > ref5; x = 0 <= ref5 ? ++t : --t) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (u = 0, len4 = shownInAggregators.length; u < len4; u++) {\n                  attr = shownInAggregators[u];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            subopts.rowOrder = rowOrderArrow.data(\"order\");\n            subopts.colOrder = colOrderArrow.data(\"order\");\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, k, ref6, ref7;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref6 = \"\" + ((ref7 = record[k]) != null ? ref7 : 'null'), indexOf.call(excludedItems, ref6) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(materializedInput, subopts);\n            pivotUIOptions = $.extend({}, opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              colOrder: subopts.colOrder,\n              rowOrder: subopts.rowOrder,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope, opts) {\n      var colorScaleGenerator, heatmapper, i, j, l, n, numCols, numRows, ref, ref1, ref2;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(values) {\n          var max, min;\n          min = Math.min.apply(Math, values);\n          max = Math.max.apply(Math, values);\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      heatmapper = (function(_this) {\n        return function(scope) {\n          var colorScale, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorScale = colorScaleGenerator(values);\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", colorScale(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref1 = numRows; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i);\n          }\n          break;\n        case \"colheatmap\":\n          for (j = n = 0, ref2 = numCols; 0 <= ref2 ? n < ref2 : n > ref2; j = 0 <= ref2 ? ++n : --n) {\n            heatmapper(\".pvtVal.col\" + j);\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\");\n      heatmapper(\".pvtTotal.colTotal\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    return $.fn.barchart = function(opts) {\n      var barcharter, i, l, numCols, numRows, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, min, range, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          if (max < 0) {\n            max = 0;\n          }\n          range = max;\n          min = Math.min.apply(Math, values);\n          if (min < 0) {\n            range = max - min;\n          }\n          scaler = function(x) {\n            return 100 * x / (1.4 * range);\n          };\n          return forEachCell(function(x, elem) {\n            var bBase, bgColor, text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\",\n              \"height\": \"55px\"\n            });\n            bgColor = \"gray\";\n            bBase = 0;\n            if (min < 0) {\n              bBase = scaler(-min);\n            }\n            if (x < 0) {\n              bBase += scaler(x);\n              bgColor = \"darkred\";\n              x = -x;\n            }\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": bBase + \"%\",\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": bgColor\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"]}