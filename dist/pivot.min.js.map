{"version":3,"sources":["pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","FLAT_KEY_DELIM","PivotData","addSeparators","aggregatorTemplates","aggregators","calculateValueRanges","convertToBarchart","dayNamesEn","derivers","generateBarchartScalers","generateHeatmappers","getSort","locales","mthNamesEn","naturalSort","numberFormat","pivotTableRenderer","rd","renderers","rx","rz","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","uniques","arg","attr","uniq","record","ref","call","numInputs","sum","parseFloat","extremes","mode","val","sorter","sorters","ref1","ref2","Math","quantile","q","vals","sort","a","b","floor","ceil","runningStat","ddof","n","m","s","m_new","sqrt","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","fractionOf","wrapped","type","aggIdx","selector","total","row","col","inner","agg","getAggregator","concat","isArray","countUnique","f","listUnique","join","max","min","first","last","median","average","stdev","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Median","Sample Variance","Sample Standard Deviation","Minimum","Maximum","First","Last","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Table Barchart","Heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","cancel","totals","vs","by","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","p","_this","as","bs","a1","b1","nas","nbs","String","match","shift","order","l_mapping","mapping","toLowerCase","isFunction","input","ref10","ref11","ref12","ref13","ref3","ref4","ref5","ref6","ref7","ref8","ref9","populateMetaAggregators","getRowKeys","getColKeys","sortKeys","arrSort","aggregator","aggregatorName","multiAggAttr","colAttrs","cols","rowAttrs","rows","valAttrs","rowOrder","colOrder","derivedAttributes","filter","emptyValue","rowKeys","colKeys","tree","rowTotals","colTotals","allTotal","map","metaAggRowTotals","metaAggColTotals","metaAggAllTotal","sorted","forEachRecord","processRecord","addRecord","compactRecord","j","k","len1","results","results1","tblCols","isEmptyObject","v","treatDataArrayAsRecords","each","text","Error","prototype","forEachMatchingRecord","criteria","callback","attrs","_getKeyVal","sortersArr","key","attrIdx","keyVal","keyA","keyB","comparison","_sortByAggVal","attrsOrder","idx","isDesc","isRow","keys","sortOrder","sortParts","sortType","sortVal","comparisonKey","_getVal","sortKey","startsWith","parseInt","e","error","flatColKey","flatKey","flatRowKey","getTotalsAgg","isMultiTotals","len2","len3","len4","o","rawKey","rowOrCol","t","totalsAgg","c","r","forceDefaultTotalsAgg","getMetaAgg","totalsMetaAggregator","metaAggTotals","metricIdxLoc","oppositeDimAttrs","oppositeDimFlatKey","pivotUtilities","pivotData","rendererType","colAttr","colAttrIdx","colKeyIdx","createHeader","createTotalsCell","createTotalsRow","getClickHandler","getHeaderClickHandler","heatmappers","len5","len6","len7","len8","rowAttr","rowAttrIdx","rowKeyIdx","scalers","spanSize","tbody","td","th","thead","totalAggregator","tr","txt","u","valueRanges","w","y","z","table","clickCallback","filters","headerClickCallback","document","createElement","className","keyIdx","maxAttrIdx","len","noDraw","stop","setAttribute","appendChild","textContent","onclick","formatHeader","innerHTML","style","backgroundColor","all","createGrandTotalCell","i1","len9","rangeType","rangeTypes","seedRange","totalAgg","totalAggs","updateRange","seedDimRange","range","makeArray","colorScaleGenerator","heatmap","nonRed","round","generateScaler","rowRange","bottom","bgColor","height","wrapper","css","position","append","left","right","background-color","padding-left","padding-right","padding","paddingTop","textAlign","outerHTML","pivot","inputOpts","locale","localeDefaults","dataClass","renderer","rendererOptions","trigger","console","stack","empty","hasChildNodes","removeChild","lastChild","pivotUI","overwrite","attrLength","attrValues","colOrderArrow","existingOpts","fn1","initialRender","materializedInput","ordering","pivotTable","recordsProcessed","refresh","refreshDelayed","rendererControl","rowOrderArrow","shownAttributes","shownInAggregators","shownInDragDrop","tr1","tr2","uiTable","unused","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","hiddenFromAggregators","hiddenFromDragDrop","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","base","class","addClass","appendTo","html","attrElem","checkContainer","closeFilterBox","controls","filterItem","filterItemExcluded","finalButtons","hasExcludedItem","placeholder","triangleLink","valueCount","valueList","values","hide","accept","accept_gen","trim","accepted","real_filter","substring","find","parent","show","prop","toggleClass","removeClass","top","currentTarget","key_a_to_z","rowSymbol","colSymbol","next","value_a_to_z","value_z_to_a","role","prepend","inArray","rendererName","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","subopts","unusedAttrsContainer","remove","not","excludedItems","inclusionsInfo","children","setTimeout","sortable","update","ui","sender","connectWith","items"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults =\n            digitsAfterDecimal: 2, scaler: 1,\n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n        opts = $.extend({}, defaults, opts)\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x) or not x?\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        uniques: (fn, formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> fn(@uniq)\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: null\n            push: (record) ->\n                x = parseFloat(record[attr])\n                if not isNaN x\n                    if not @sum? then @sum = 0\n                    @sum += x\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        extremes: (mode, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            sorter: getSort(data?.sorters, attr)\n            push: (record) ->\n                x = record[attr]\n                if mode in [\"min\", \"max\"]\n                    x = parseFloat(x)\n                    if not isNaN x then @val = Math[mode](x, @val ? x)\n                if mode == \"first\" then @val = x if @sorter(x, @val ? x) <= 0\n                if mode == \"last\"  then @val = x if @sorter(x, @val ? x) >= 0\n            value: -> @val\n            format: (x) -> if isNaN(x) then x else formatter(x)\n            numInputs: if attr? then 0 else 1\n\n        quantile: (q, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            vals: []\n            push: (record) ->\n                x = parseFloat(record[attr])\n                @vals.push(x) if not isNaN(x)\n            value: ->\n                return null if @vals.length == 0\n                @vals.sort((a,b) -> a-b)\n                i = (@vals.length-1)*q\n                return (@vals[Math.floor(i)] + @vals[Math.ceil(i)])/2.0\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        runningStat: (mode=\"mean\", ddof=1, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            n: 0.0, m: 0.0, s: 0.0\n            push: (record) ->\n                x = parseFloat(record[attr])\n                return if isNaN(x)\n                @n += 1.0\n                if @n == 1.0\n                    @m = x\n                else\n                    m_new = @m + (x - @m)/@n\n                    @s = @s + (x - @m)*(x - m_new)\n                    @m = m_new\n            value: ->\n                if mode == \"mean\"\n                    return if @n == 0 then 0/0 else @m\n                return 0 if @n <= ddof\n                switch mode\n                    when \"var\"   then @s/(@n-ddof)\n                    when \"stdev\" then Math.sqrt(@s/(@n-ddof))\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: ->\n                sign = if upper then 1 else -1\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\n                    (1 + 1.642374415149816/@sumDenom)\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        #To support multi-metrics mode, these aggregator factories must be\n        #instantiated with the aggregator index, so that value() knows how\n        # to find the corresponding fractionOf aggregator for the denominator.\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (aggIdx, x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: ->\n                agg = data.getAggregator(@selector..., true)\n                if $.isArray(agg)\n                    agg = agg[aggIdx]\n                return @inner.value() / agg.inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    aggregatorTemplates.countUnique = (f) -> aggregatorTemplates.uniques(((x) -> x.length), f)\n    aggregatorTemplates.listUnique =  (s) -> aggregatorTemplates.uniques(((x) -> x.join(s)), ((x)->x))\n    aggregatorTemplates.max =         (f) -> aggregatorTemplates.extremes('max', f)\n    aggregatorTemplates.min =         (f) -> aggregatorTemplates.extremes('min', f)\n    aggregatorTemplates.first =       (f) -> aggregatorTemplates.extremes('first', f)\n    aggregatorTemplates.last =        (f) -> aggregatorTemplates.extremes('last', f)\n    aggregatorTemplates.median =      (f) -> aggregatorTemplates.quantile(0.5, f)\n    aggregatorTemplates.average =     (f) -> aggregatorTemplates.runningStat(\"mean\", 1, f)\n    aggregatorTemplates.var =         (ddof, f) -> aggregatorTemplates.runningStat(\"var\", ddof, f)\n    aggregatorTemplates.stdev =       (ddof, f) -> aggregatorTemplates.runningStat(\"stdev\", ddof, f)\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) ->\n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Integer Sum\":          tpl.sum(usFmtInt)\n        \"Average\":              tpl.average(usFmt)\n        \"Median\":               tpl.median(usFmt)\n        \"Sample Variance\":      tpl.var(1, usFmt)\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"First\":                tpl.first(usFmt)\n        \"Last\":                 tpl.last(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":          (data, opts) -> pivotTableRenderer(data, opts)\n        \"Table Barchart\": (data, opts) -> pivotTableRenderer(data, opts, \"barchart\")\n        \"Heatmap\":        (data, opts) -> pivotTableRenderer(data, opts, \"heatmap\")\n        \"Row Heatmap\":    (data, opts) -> pivotTableRenderer(data, opts, \"rowheatmap\")\n        \"Col Heatmap\":    (data, opts) -> pivotTableRenderer(data, opts, \"colheatmap\")\n\n    locales =\n        en:\n            aggregators: aggregators\n            renderers: renderers\n            localeStrings:\n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter values\"\n                apply: \"Apply\"\n                cancel: \"Cancel\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    rx = /(\\d+)|(\\D+)/g\n    rd = /\\d/\n    rz = /^0/\n    naturalSort = (as, bs) =>\n        #nulls first\n        return -1 if bs? and not as?\n        return  1 if as? and not bs?\n\n        #then raw NaNs\n        return -1 if typeof as == \"number\" and isNaN(as)\n        return  1 if typeof bs == \"number\" and isNaN(bs)\n\n        #numbers and numbery strings group together\n        nas = +as\n        nbs = +bs\n        return -1 if nas < nbs\n        return  1 if nas > nbs\n\n        #within that, true numbers before numbery strings\n        return -1 if typeof as == \"number\" and typeof bs != \"number\"\n        return  1 if typeof bs == \"number\" and typeof as != \"number\"\n        return  0 if typeof as == \"number\" and typeof bs == \"number\"\n\n        # 'Infinity' is a textual number, so less than 'A'\n        return -1 if isNaN(nbs) and not isNaN(nas)\n        return  1 if isNaN(nas) and not isNaN(nbs)\n\n        #finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n        a = String(as)\n        b = String(bs)\n        return 0 if a == b\n        return (if a > b then 1 else -1) unless rd.test(a) and rd.test(b)\n\n        #special treatment for strings containing digits\n        a = a.match(rx) #create digits vs non-digit chunks and iterate through\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 != b1\n                if rd.test(a1) and rd.test(b1) #both are digit chunks\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        return a.length - b.length\n\n    sortAs = (order) ->\n        mapping = {}\n        l_mapping = {} # sort lowercased keys similarly\n        for i, x of order\n            mapping[x] = i\n            l_mapping[x.toLowerCase()] = i if typeof x == \"string\"\n        (a, b) ->\n            if mapping[a]? and mapping[b]? then mapping[a] - mapping[b]\n            else if mapping[a]? then -1\n            else if mapping[b]? then 1\n            else if l_mapping[a]? and l_mapping[b]? then l_mapping[a] - l_mapping[b]\n            else if l_mapping[a]? then -1\n            else if l_mapping[b]? then 1\n            else naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        if sorters?\n            if $.isFunction(sorters)\n                sort = sorters(attr)\n                return sort if $.isFunction(sort)\n            else if sorters[attr]?\n                return sorters[attr]\n        return naturalSort\n\n    ###\n    Data Model class\n    ###\n\n    FLAT_KEY_DELIM = '\\u0001'\n    class PivotData\n        constructor: (input, opts = {}) ->\n            @input = input\n\n            #May be an array of aggregators.\n            @aggregator = opts.aggregator ? aggregatorTemplates.count()()\n\n            #Only used by pivotUI(). No multi-aggregator support.\n            @aggregatorName = opts.aggregatorName ? \"Count\"\n\n            #If there are multiple aggregators, this fake attribute is used to generate the extra cols/rows.\n            @multiAggAttr = opts.multiAggAttr ? \"_metrics\"\n\n            #Attributes are the record fields selected by the user. Value attributes are used to instantiate aggregators.\n            @colAttrs = opts.cols ? []\n            @rowAttrs = opts.rows ? []\n            @valAttrs = opts.vals ? []  #Only used by plotly, gchart, and c3 renderers.\n\n            #Insert the multi-agg attribute as the last column if not provided already.\n            if $.isArray(@aggregator) and @multiAggAttr not in @colAttrs and @multiAggAttr not in @rowAttrs\n                @colAttrs.push @multiAggAttr\n\n            #Used when sorting keys by attribute value. See getSort().\n            #Either an object or a fn, e.g.: sorters[attr]=sortFn, or sorters(attr)=sortFn.\n            @sorters = opts.sorters ? {}\n\n            #How keys are sorted. See @sortKeys() for possible values.\n            @rowOrder = opts.rowOrder ? \"key_a_to_z\"\n            @colOrder = opts.colOrder ? \"key_a_to_z\"\n\n            #HIQ client derives its own attributes, and does not use this property.\n            @derivedAttributes = opts.derivedAttributes ? {}\n\n            @filter = opts.filter ? (-> true)\n            @emptyValue = opts.emptyValue ? 'null'\n\n            #Keys are generated tuples of attribute values.\n            @rowKeys = []\n            @colKeys = []\n\n            #Aggregator instances, one per value cell in the table. Created in @processData().\n            #Normal aggregators, at tree[rowKey][colKey].\n            @tree = {}\n            #Row/col total aggregators, at rowTotals[rowKey] and colTotals[colKey].\n            #In multi-metric mode, the values are arrays.\n            @rowTotals = {}\n            @colTotals = {}\n            #Grand total aggregator. In multi-metric mode, this is an array.\n            @allTotal = if not $.isArray(@aggregator) then @aggregator(this, [], []) else @aggregator.map((agg) => agg(this, [], []))\n\n            #Same as above, used only when meta-aggregator is provided\n            @metaAggRowTotals = {}\n            @metaAggColTotals = {}\n            @metaAggAllTotal = null\n\n            #Keys are not sorted on init, but when first accessed (e.g. in getRowKeys()).\n            @sorted = false\n\n            @opts = opts\n\n            #Generate table cells and aggregators from records that pass the filter.\n            PivotData.forEachRecord input, opts, (record) =>\n                @processRecord(record) if opts.filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, opts, f) ->\n            if $.isEmptyObject opts.derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) -> \n                    record[k] = v(record) ? record[k] for k, v of opts.derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if !opts.treatDataArrayAsRecords #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof $\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        #Only used by examples/mps_prepop.html. Covered in tests/pivot_spec.coffee.\n        forEachMatchingRecord: (criteria, callback) ->\n            PivotData.forEachRecord @input, @opts, (record) =>\n                return if not @opts.filter(record)\n                for own k, v of criteria\n                    return if v != (record[k] ? @emptyValue)\n                callback(record)\n\n        #Create sort fn that sorts row/col keys by attribute value.\n        #Sorts coarser attributes first, e.g.: [\"A\", 10] < [\"B\", 1] < [\"B\", 5].\n        #`attrs`: Array of attributes on which to sort. Assumes keys are\n        #  composed of these attributes.\n        #`order`: Array of \"+\" or \"-\" values, one per attribute. \"-\"\n        #  indicates a descending sort.\n        arrSort: (attrs, order) =>\n            # Convert empty value string back to null so it may be compared naturally to other values.\n            _getKeyVal = (key, attrIdx) ->\n                keyVal = key[attrIdx]\n                return if keyVal == @emptyValue then null else keyVal\n\n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (keyA,keyB) ->\n                for own attrIdx, sorter of sortersArr\n                    comparison = sorter(_getKeyVal(keyA, attrIdx), _getKeyVal(keyB, attrIdx))\n                    if order? and order[attrIdx] == \"-\"\n                        comparison *= -1\n                    return comparison if comparison != 0\n                return 0\n\n        #Sort row and col keys based on @rowOrder and @colOrder. Possible values:\n        #  `key_[-]flatKey`: Sort based on the values for the given key, in \"flat\"\n        #    form (FLAT_KEY_DELIM-separated string). Optional \"-\" for descending sort.\n        #  `totals_[-]aggIdx`: Sort based on the totals values. aggIdx is the index\n        #    of the aggregator to use (ignored if not multi-metrics mode). Optional\n        #    \"-\" for descending sort.\n        #  `attr_[+|-]_...`: Sort based on attribute values. There is one asc/desc\n        #    indicator per attribute.\n        #  `value_[a_to_z|z_to_a]`: Legacy sort on totals values. Does not support\n        #    multi-metrics mode.\n        #  `key_[a_to_z]`: Legacy sort on attribute values, all ascending.\n        sortKeys: () =>\n            if @sorted\n                return\n            @sorted = true\n\n            for [sortOrder, keys, attrs], idx in [\n              [@rowOrder, @rowKeys, @rowAttrs],\n              [@colOrder, @colKeys, @colAttrs]\n            ]\n                isRow = idx == 0\n\n                #Sort keys by the value of the aggregator at `comparisonKey`.\n                #If `isDesc` is true, does a descending sort. In multi-metrics\n                #mode, `aggIdx` is the index of the totals aggregator to use.\n                _sortByAggVal = (comparisonKey, isDesc, aggIdx) =>\n                    _getVal = (sortKey) =>\n                        row = if isRow then sortKey else comparisonKey\n                        col = if not isRow then sortKey else comparisonKey\n                        agg = @getAggregator(row, col)\n                        if $.isArray(agg)\n                            agg = agg[aggIdx or 0]\n                        return agg.value()\n\n                    keys.sort (a,b) => getSort(@sorters, null)(_getVal(a), _getVal(b)) * (if isDesc then -1 else 1)\n\n                switch sortOrder\n                    #Legacy sorts.\n                    when \"value_a_to_z\" then _sortByAggVal([])\n                    when \"value_z_to_a\" then _sortByAggVal([], true)\n                    when \"key_a_to_z\" then keys.sort @arrSort(attrs)\n                    else\n                        sortParts = sortOrder.split(\"_\")\n                        sortType = sortParts[0]\n\n                        switch sortType\n                            when \"attr\"\n                                attrsOrder = sortParts.slice(1)\n                                keys.sort @arrSort(attrs, attrsOrder)\n                            else\n                                sortVal = sortParts[1]\n\n                                #Check for descending sort.\n                                isDesc = false\n                                if sortVal.startsWith(\"-\")\n                                    sortVal = sortVal.slice(1)\n                                    isDesc = true\n\n                                if sortType == \"key\"\n                                    key = sortVal.split(FLAT_KEY_DELIM)\n                                    _sortByAggVal(key, isDesc)\n                                else  # sortType == \"totals\"\n                                    aggIdx = parseInt(sortVal)\n                                    _sortByAggVal([], isDesc, aggIdx)\n\n        getColKeys: () =>\n            try\n                @sortKeys()\n            catch e\n                #Ignore error: use un-sorted keys.\n            return @colKeys\n\n        getRowKeys: () =>\n            try\n                @sortKeys()\n            catch e\n                #Ignore error: use un-sorted keys.\n            return @rowKeys\n\n        #Generate keys for the record, and update all corresponding aggregators\n        #(i.e., the grand total, row/col total, and normal row+col aggregators).\n        #:aggIdx: In multi-metrics mode, index into the @aggregator array.\n        processRecord: (record, aggIdx) -> #this code is called in a tight loop\n\n            #In multi-metric mode, process record once per aggregator.\n            if $.isArray(@aggregator) and not aggIdx?\n                for agg, aggIdx in @aggregator\n                    record[@multiAggAttr] = aggIdx\n                    @processRecord(record, aggIdx)\n                delete record[@multiAggAttr]  # leave records unmodified\n                return\n\n            aggregator = if aggIdx? then @aggregator[aggIdx] else @aggregator\n\n            colKey = []\n            rowKey = []\n            colKey.push record[x] ? @emptyValue for x in @colAttrs\n            rowKey.push record[x] ? @emptyValue for x in @rowAttrs\n            flatRowKey = rowKey.join(FLAT_KEY_DELIM)\n            flatColKey = colKey.join(FLAT_KEY_DELIM)\n\n            #Grand total cell.\n            allTotal = if aggIdx? then @allTotal[aggIdx] else @allTotal\n            allTotal.push record\n\n            getTotalsAgg = (rowOrCol, key) =>  #fat arrow to get closure over PivotData object `this`\n                r = if rowOrCol == \"row\" then key else []\n                c = if rowOrCol == \"row\" then [] else key\n                return aggregator(this, r, c)\n\n            for [rowOrCol, attrs, keys, rawKey, flatKey, totals] in [\n              [\"row\", @colAttrs, @rowKeys, rowKey, flatRowKey, @rowTotals],\n              [\"col\", @rowAttrs, @colKeys, colKey, flatColKey, @colTotals]\n            ]\n                isMultiTotals = aggIdx? and @multiAggAttr in attrs\n                if rawKey.length != 0\n                    #First time we've seen this key: create totals aggregator.\n                    if not totals[flatKey]\n                        keys.push rawKey\n                        totals[flatKey] = if isMultiTotals then [] else getTotalsAgg(rowOrCol, rawKey)\n                    if isMultiTotals and not totals[flatKey][aggIdx]\n                        totals[flatKey][aggIdx] = getTotalsAgg(rowOrCol, rawKey)\n                    #Push record to the totals aggregator.\n                    totalsAgg = totals[flatKey]\n                    if isMultiTotals\n                        totalsAgg = totalsAgg[aggIdx]\n                    totalsAgg.push record\n\n            if colKey.length != 0 and rowKey.length != 0\n                if not @tree[flatRowKey]\n                    @tree[flatRowKey] = {}\n                if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey] = aggregator(this, rowKey, colKey)\n                @tree[flatRowKey][flatColKey].push record\n\n        #In multi-metric mode, totals aggregators are arrays.\n        getAggregator: (rowKey, colKey, forceDefaultTotalsAgg = false) =>\n            flatRowKey = rowKey.join(FLAT_KEY_DELIM)\n            flatColKey = colKey.join(FLAT_KEY_DELIM)\n            getMetaAgg = @opts.totalsMetaAggregator and not forceDefaultTotalsAgg\n            if rowKey.length == 0 and colKey.length == 0\n                agg = if getMetaAgg then @metaAggAllTotal else @allTotal\n            else if rowKey.length == 0\n                agg = (if getMetaAgg then @metaAggColTotals else @colTotals)[flatColKey]\n            else if colKey.length == 0\n                agg = (if getMetaAgg then @metaAggRowTotals else @rowTotals)[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            #In multi-metric mode, don't bother creating default aggregators.\n            return if $.isArray(agg) then agg else (agg ? {value: (-> null), format: -> \"\"})\n\n        populateMetaAggregators: () =>\n            if @opts.totalsMetaAggregator\n                totalsMetaAggregator = @opts.totalsMetaAggregator\n                #Create and populate meta-aggregators for each totals aggregator\n                for own flatRowKey, row of @tree\n                    for own flatColKey, aggregator of row\n                        for [totals, metaAggTotals, oppositeDimAttrs, flatKey, oppositeDimFlatKey] in [\n                            [@rowTotals, @metaAggRowTotals, @colAttrs, flatRowKey, flatColKey],\n                            [@colTotals, @metaAggColTotals, @rowAttrs, flatColKey, flatRowKey]\n                        ]\n                            #Row/col meta-aggregators. Will be an array if in multi-metric mode\n                            if not $.isArray(totals[flatKey])\n                                if flatKey not of metaAggTotals\n                                    metaAggTotals[flatKey] = totalsMetaAggregator()\n                                metaAggTotals[flatKey].push(aggregator)\n                            else\n                                if flatKey not of metaAggTotals\n                                    metaAggTotals[flatKey] = totals[flatKey].   map -> totalsMetaAggregator()\n                                metricIdxLoc = oppositeDimAttrs.indexOf(@multiAggAttr)\n                                idx = parseInt(oppositeDimFlatKey.split(FLAT_KEY_DELIM)[metricIdxLoc])\n                                metaAggTotals[flatKey][idx].push(aggregator)\n\n                        #Grand total meta-aggregator. Also will be an array if in multi-metric mode\n                        if not $.isArray(@allTotal)\n                            if @metaAggAllTotal == null\n                                @metaAggAllTotal = totalsMetaAggregator()\n                            @metaAggAllTotal.push(aggregator)\n                        else\n                            if not @metaAggAllTotal\n                                @metaAggAllTotal = @allTotal.map -> totalsMetaAggregator()\n                            [key, attrs] = if @multiAggAttr in @rowAttrs then [flatRowKey, @rowAttrs] else [flatColKey, @colAttrs]\n                            idx = parseInt(key.split(FLAT_KEY_DELIM)[attrs.indexOf(@multiAggAttr)])\n                            @metaAggAllTotal[idx].push(aggregator)\n\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData}\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts, rendererType) ->\n        defaults =\n            table: clickCallback: null\n            localeStrings: totals: \"Totals\"\n            treatDataArrayAsRecords: false\n\n        opts = $.extend(true, {}, defaults, opts)\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        if opts.table.clickCallback\n            getClickHandler = (value, rowKey, colKey, aggIdx = null) ->\n                filters = {}\n                filters[attr] = colKey[i] for attr, i in colAttrs when colKey[i]?\n                filters[attr] = rowKey[i] for attr, i in rowAttrs when rowKey[i]?\n                # Add metric index clicked for row totals/grand totals.\n                # This allows us to generate the correct filters from filtered attributes for the drilldown.\n                if aggIdx?\n                    filters[pivotData.multiAggAttr] = aggIdx\n\n                return (e) -> opts.table.clickCallback(e, value, filters, pivotData)\n\n        if opts.table.headerClickCallback\n            getHeaderClickHandler = (rowOrCol, type, val) ->\n                return (e) -> opts.table.headerClickCallback(e, rowOrCol, type, val)\n\n        # If rendering a heatmap or barchart, calculate value ranges across various\n        # pivot table cuts, to generate heatmap colors and bar chart lengths.\n        if rendererType?\n            valueRanges = calculateValueRanges(rendererType, pivotData)\n            if rendererType in [\"heatmap\", \"rowheatmap\", \"colheatmap\"]\n                heatmappers = generateHeatmappers(valueRanges, opts)\n            else if rendererType is \"barchart\"\n                scalers = generateBarchartScalers(valueRanges)\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col span size for all cells\n        spanSize = (keys, keyIdx, maxAttrIdx) ->\n            #check if cell should be drawn (e.g., if an attr is coarser than the next one, we only draw that attr cell once)\n            if keyIdx != 0\n                noDraw = true\n                for attrIdx in [0..maxAttrIdx]\n                    if keys[keyIdx-1][attrIdx] != keys[keyIdx][attrIdx]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            #calculate span\n            len = 0\n            while keyIdx+len < keys.length\n                stop = false\n                for attrIdx in [0..maxAttrIdx]\n                    stop = true if keys[keyIdx][attrIdx] != keys[keyIdx+len][attrIdx]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        for colAttr, colAttrIdx in colAttrs\n            tr = document.createElement(\"tr\")\n\n            #create empty upper-left cell spanning both row and col attrs\n            if parseInt(colAttrIdx) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n\n            #create cell for this col attr\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = colAttr\n            if getHeaderClickHandler?\n                th.onclick = getHeaderClickHandler(\"col\", \"attr\", colAttr)\n            tr.appendChild th\n\n            # create cell for each col key (of this attribute)\n            for colKey, colKeyIdx in colKeys\n                x = spanSize(colKeys, parseInt(colKeyIdx), parseInt(colAttrIdx))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    if opts.formatHeader\n                        th.textContent = opts.formatHeader(colKey[colAttrIdx], colAttrs[colAttrIdx]);\n                    else\n                        th.textContent = colKey[colAttrIdx]\n                    th.setAttribute(\"colspan\", x)\n\n                    #Only allow clicking on the finest-grained attribute.\n                    if getHeaderClickHandler? and colAttrIdx == (colAttrs.length - 1)\n                        flatColKey = colKey.join(FLAT_KEY_DELIM)\n                        th.onclick = getHeaderClickHandler(\"col\", \"key\", flatColKey)\n                        #Add key to data-set for post-processing sort icons.\n                        th.setAttribute(\"data-flat-key\", flatColKey)\n\n                    #if this is the last col attr, each col key spans 2 rows (the 2nd being the row attr row)\n                    if parseInt(colAttrIdx) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n\n                    tr.appendChild th\n\n            # create row totals column header\n            if parseInt(colAttrIdx) == 0\n                createHeader = (aggIdx) ->\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                    th.innerHTML = opts.localeStrings.totals\n                    if aggIdx?\n                        th.setAttribute(\"data-agg-idx\", aggIdx)\n                    th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                    if getHeaderClickHandler?\n                        th.onclick = getHeaderClickHandler(\"col\", \"totals\", aggIdx or 0)\n                    tr.appendChild th\n\n                #In multi-metric mode, if \"Metrics\" attr is a col, there is one row totals col per aggregator.\n                if $.isArray(pivotData.aggregator) and pivotData.multiAggAttr in colAttrs\n                    #Skip row totals if \"Metrics\" is the only col attr: the totals are redundant.\n                    if colAttrs.length > 1\n                        for agg, aggIdx in pivotData.aggregator\n                            createHeader(aggIdx)\n                else\n                    createHeader()\n\n            thead.appendChild tr\n\n        #then a single row for all row attrs\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for rowAttr, i in rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.textContent = rowAttr\n                if getHeaderClickHandler?\n                    th.onclick = getHeaderClickHandler(\"row\", \"attr\", rowAttr)\n                tr.appendChild th\n            th = document.createElement(\"th\")  #empty cell below col attr cells\n            if colAttrs.length ==0\n                #use empty cell for the row totals if there are no col attrs\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                if getHeaderClickHandler?\n                    #there is only one col totals aggregator\n                    th.onclick = getHeaderClickHandler(\"col\", \"totals\", 0)\n            tr.appendChild th\n            thead.appendChild tr\n\n        result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for rowKey, rowKeyIdx in rowKeys\n            tr = document.createElement(\"tr\")\n\n            #create a header cell for each row attr\n            for own rowAttrIdx, txt of rowKey\n                x = spanSize(rowKeys, parseInt(rowKeyIdx), parseInt(rowAttrIdx))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    if opts.formatHeader\n                        th.textContent = opts.formatHeader(txt, rowAttrs[rowAttrIdx]);\n                    else\n                        th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n\n                    #if this is the last row attr, the header cell spans 2 cols (the 2nd being the col attr col)\n                    if parseInt(rowAttrIdx) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",2)\n\n                    if getHeaderClickHandler? and parseInt(rowAttrIdx) == rowAttrs.length-1\n                        flatRowKey = rowKey.join(FLAT_KEY_DELIM)\n                        th.onclick = getHeaderClickHandler(\"row\", \"key\", flatRowKey)\n                        #Add key to data-set for post-processing sort icons.\n                        th.setAttribute(\"data-flat-key\", flatRowKey)\n\n                    tr.appendChild th\n\n            #create a value cell for each col key\n            for colKey, colKeyIdx in colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row#{rowKeyIdx} col#{colKeyIdx}\"\n                td.textContent = aggregator.format(val)\n                if heatmappers?\n                    td.style.backgroundColor = switch rendererType\n                        when \"heatmap\" then heatmappers.all(val)\n                        when \"rowheatmap\" then heatmappers.rows[rowKeyIdx](val)\n                        when \"colheatmap\" then heatmappers.cols[colKeyIdx](val)\n                else if scalers?\n                    convertToBarchart(td, scalers.rows[rowKeyIdx](val))\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, colKey)\n                tr.appendChild td\n\n            #create rightmost row totals cell/s\n            createTotalsCell = (totalAggregator, aggIdx) ->\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal rowTotal\"\n                td.textContent = totalAggregator.format(val)\n                if heatmappers?\n                    td.style.backgroundColor = heatmappers.rowTotals(val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, [], aggIdx)\n                td.setAttribute(\"data-for\", \"row\"+rowKeyIdx)\n                tr.appendChild td\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            #Multi-metric mode: one totals cell per aggregator.\n            if $.isArray(totalAggregator)\n                #Skip row totals if \"Metrics\" is the only col attr: the totals are redundant.\n                if colAttrs.length > 1\n                    for agg, aggIdx in totalAggregator\n                        createTotalsCell(agg, aggIdx)\n            else\n                createTotalsCell(totalAggregator, null)\n\n            tbody.appendChild tr\n\n        #finally, the row for col totals (which includes a grand total cell in the bottom-right)\n        createTotalsRow = (aggIdx) ->\n            tr = document.createElement(\"tr\")\n\n            #left-most header cell\n            th = document.createElement(\"th\")\n            th.className = \"pvtTotalLabel pvtColTotalLabel\"\n            th.innerHTML = opts.localeStrings.totals\n            if aggIdx?\n                th.setAttribute(\"data-agg-idx\", aggIdx)\n            th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n            if getHeaderClickHandler?\n                th.onclick = getHeaderClickHandler(\"row\", \"totals\", aggIdx or 0)\n            tr.appendChild th\n\n            #value cells, one per col key\n            for colKey, colKeyIdx in colKeys\n                totalAggregator = pivotData.getAggregator([], colKey)\n                if aggIdx?\n                    totalAggregator = totalAggregator[aggIdx]\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal colTotal\"\n                td.textContent = totalAggregator.format(val)\n                if heatmappers?\n                    td.style.backgroundColor = heatmappers.colTotals(val)\n                else if scalers?\n                    convertToBarchart(td, scalers.colTotals(val))\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, [], colKey, aggIdx)\n                td.setAttribute(\"data-for\", \"col\"+colKeyIdx)\n                tr.appendChild td\n\n            #right-most grand total cell\n            createGrandTotalCell = (totalAggregator, aggIdx) ->\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtGrandTotal\"\n                td.textContent = totalAggregator.format(val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, [], [], aggIdx)\n                tr.appendChild td\n\n            #This is an array in multi-metrics mode.\n            totalAggregator = pivotData.getAggregator([], [])\n            if not $.isArray(totalAggregator)\n                createGrandTotalCell(totalAggregator)\n            #Multi-metrics mode, \"metrics\" attr in rows: each grand total cell is created per createTotalsRow() call.\n            else if aggIdx?\n                createGrandTotalCell(totalAggregator[aggIdx])\n            #Multi-metrics mode, \"metrics\" attr in cols, only one totals row: one grand total cell per aggregator.\n            else\n                #Skip row totals if \"Metrics\" is the only col attr: totals are redundant.\n                if colAttrs.length > 1\n                    for agg, aggIdx in totalAggregator\n                        createGrandTotalCell(agg, aggIdx)\n\n            tbody.appendChild tr\n\n        #In multi-metric mode, if the \"Metrics\" attr is a row, there is one\n        #col totals row per aggregator.\n        if $.isArray(pivotData.aggregator) and pivotData.multiAggAttr in rowAttrs\n            #Skip col totals if \"Metrics\" is the only row attr: the totals are redundant.\n            if rowAttrs.length > 1\n                for agg, aggIdx in pivotData.aggregator\n                    createTotalsRow(aggIdx)\n        else\n            createTotalsRow()\n\n        result.appendChild tbody\n\n        return result\n\n    # Calculate [min, max] ranges for values across various cuts of the pivot table.\n    calculateValueRanges = (rendererType, pivotData) =>\n        valueRanges = {}\n\n        # Get required ranges.\n        rangeTypes = switch rendererType\n            when \"heatmap\" then [\"all\", \"rowTotals\", \"colTotals\"]\n            when \"rowheatmap\" then [\"rows\", \"rowTotals\", \"colTotals\"]\n            when \"colheatmap\" then [\"cols\", \"rowTotals\", \"colTotals\"]\n            when \"barchart\" then [\"rows\", \"colTotals\"]\n\n        # Seed each required range.\n        seedRange = (rangeType) ->\n            if rangeType in [\"rows\", \"cols\"]\n                valueRanges[rangeType] = {}\n                keys = if rangeType is \"rows\" then pivotData.rowKeys else pivotData.colKeys\n                seedDimRange = (keyIdx) ->\n                    valueRanges[rangeType][keyIdx] = [Infinity, -Infinity]\n                seedDimRange keyIdx for key, keyIdx in keys\n            else\n                valueRanges[rangeType] = [Infinity, -Infinity]\n        seedRange rangeType for rangeType in rangeTypes\n\n        # Extend the given [min, max] range with the given value.\n        updateRange = (range, val) ->\n            if val? and isFinite val\n                range[0] = Math.min(range[0], val)\n                range[1] = Math.max(range[1], val)\n\n        # Calculate [min, max] for each required range.\n        for rowKey, rowKeyIdx in pivotData.rowKeys\n            for colKey, colKeyIdx in pivotData.colKeys\n                val = pivotData.getAggregator(rowKey, colKey).value()\n                if valueRanges.all?\n                    updateRange(valueRanges.all, val)\n                if valueRanges.rows?\n                    updateRange(valueRanges.rows[rowKeyIdx], val)\n                if valueRanges.cols?\n                    updateRange(valueRanges.cols[colKeyIdx], val)\n                if rowKeyIdx is 0 and valueRanges.colTotals?\n                    totalAggs = $.makeArray(pivotData.getAggregator([], colKey))\n                    updateRange(valueRanges.colTotals, totalAgg.value()) for totalAgg in totalAggs\n            if valueRanges.rowTotals?\n                totalAggs = $.makeArray(pivotData.getAggregator(rowKey, []))\n                updateRange(valueRanges.rowTotals, totalAgg.value()) for totalAgg in totalAggs\n\n        return valueRanges\n\n    # Create functions that take a cell value and return a heatmap color.\n    generateHeatmappers = (valueRanges, opts) ->\n        heatmappers = {}\n\n        # Given a [min, max] range, create a function that generates a CSS color for a value.\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n        colorScaleGenerator ?= ([min, max]) ->\n            return (x) ->\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\n                return \"rgb(255,#{nonRed},#{nonRed})\"\n\n        # Create heatmappers for every range.\n        for rangeType of valueRanges\n            if rangeType in [\"rows\", \"cols\"]\n                heatmappers[rangeType] = {}\n                for keyIdx, range of valueRanges[rangeType]\n                    heatmappers[rangeType][keyIdx] = colorScaleGenerator(range)\n            else\n                heatmappers[rangeType] = colorScaleGenerator(valueRanges[rangeType])\n\n        return heatmappers\n\n    # Create functions that take a cell value and return info for creating a\n    # properly sized bar in a bar chart.\n    generateBarchartScalers = (valueRanges) ->\n        scalers = {}\n\n        # Given a [min, max] range, create a function that generates a\n        # [bottom, height, bgColor] triplet for a cell value.\n        generateScaler = ([min, max]) ->\n            if max < 0\n                max = 0\n            range = max;\n            if min < 0\n                range = max - min\n            scaler = (x) -> 100 * x / (1.4 * range)\n            bottom = 0\n            if min < 0\n                bottom = scaler(-min)\n            return (x) ->\n                if x < 0\n                    return [bottom + scaler(x), scaler(-x), \"darkred\"]\n                else\n                    return [bottom, scaler(x), \"grey\"]\n\n        # Generate scalers for the barchart ranges.\n        scalers.colTotals = generateScaler(valueRanges.colTotals)\n        scalers.rows = {}\n        for rowKeyIdx, rowRange of valueRanges.rows\n            scalers.rows[rowKeyIdx] = generateScaler(rowRange)\n\n        return scalers\n\n    # Given a cell in the pivot table, and bar chart info from generateScaler(),\n    # convert the DOM element into a bar.\n    convertToBarchart = (td, [bottom, height, bgColor]) ->\n        text = td.textContent\n        wrapper = $(\"<div>\").css\n            \"position\": \"relative\"\n            \"height\": \"55px\"\n\n        wrapper.append $(\"<div>\").css\n            \"position\": \"absolute\"\n            \"bottom\": bottom + \"%\"\n            \"left\": 0\n            \"right\": 0\n            \"height\": height + \"%\"\n            \"background-color\": bgColor\n\n        wrapper.append $(\"<div>\").text(text).css\n            \"position\":\"relative\"\n            \"padding-left\":\"5px\"\n            \"padding-right\":\"5px\"\n\n        td.style.padding = 0\n        td.style.paddingTop = \"5px\"\n        td.style.textAlign = \"center\"\n        td.innerHTML = wrapper[0].outerHTML\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, inputOpts, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            cols : [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: {}\n            derivedAttributes: {}\n            renderer: pivotTableRenderer\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n\n        result = null\n        try\n            pivotData = if input instanceof opts.dataClass then input else new opts.dataClass(input, opts)\n            pivotData.populateMetaAggregators()\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                @trigger(\"pivotTableError\", [e, opts.localeStrings.renderError])\n                console.error(e.stack) if console?\n                result = $(\"<span>\").empty\n        catch e\n            @trigger(\"pivotTableError\", [e, opts.localeStrings.computeError])\n            console.error(e.stack) if console?\n            result = $(\"<span>\").empty\n\n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            hiddenFromAggregators: []\n            hiddenFromDragDrop: []\n            menuLimit: 500\n            cols: [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            onRefresh: null\n            filter: -> true\n            sorters: {}\n            treatDataArrayAsRecords: false\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n        else\n            opts = existingOpts\n\n        try\n            # do a first pass on the data to cache a materialized copy of any\n            # function-valued inputs and to compute dimension cardinalities\n            attrValues = {}\n            materializedInput = []\n            recordsProcessed = 0\n            PivotData.forEachRecord input, opts, (record) ->\n                return unless opts.filter(record)\n                materializedInput.push(record)\n                for own attr of record\n                    if not attrValues[attr]?\n                        attrValues[attr] = {}\n                        if recordsProcessed > 0\n                            attrValues[attr][@emptyValue] = recordsProcessed\n                for attr of attrValues\n                    value = record[attr] ? @emptyValue\n                    attrValues[attr][value] ?= 0\n                    attrValues[attr][value]++\n                recordsProcessed++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            rendererControl = $(\"<td>\")\n\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\n            shownAttributes = (a for a of attrValues when a not in opts.hiddenAttributes)\n            shownInAggregators = (c for c in shownAttributes when c not in opts.hiddenFromAggregators)\n            shownInDragDrop = (c for c in shownAttributes when c not in opts.hiddenFromDragDrop)\n\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownInDragDrop\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                unused.addClass('pvtVertList')\n            else\n                unused.addClass('pvtHorizList')\n\n            for own i, attr of shownInDragDrop\n                do (attr) ->\n                    values = (v for v of attrValues[attr])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").append(\n                        $(\"<span>\").text(attr),\n                        $(\"<span>\").addClass(\"count\").text(\"(#{values.length})\"),\n                        )\n                    if values.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        if values.length > 5\n                            controls = $(\"<p>\").appendTo(valueList)\n                            sorter = getSort(opts.sorters, attr)\n                            placeholder = opts.localeStrings.filterResults\n                            $(\"<input>\", {type: \"text\"}).appendTo(controls)\n                                .attr({placeholder: placeholder, class: \"pvtSearch\"})\n                                .bind \"keyup\", ->\n                                    filter = $(this).val().toLowerCase().trim()\n                                    accept_gen = (prefix, accepted) -> (v) ->\n                                        real_filter = filter.substring(prefix.length).trim()\n                                        return true if real_filter.length == 0\n                                        return Math.sign(sorter(v.toLowerCase(), real_filter)) in accepted\n                                    accept =\n                                        if      filter.startsWith(\">=\") then accept_gen(\">=\", [1,0])\n                                        else if filter.startsWith(\"<=\") then accept_gen(\"<=\", [-1,0])\n                                        else if filter.startsWith(\">\")  then accept_gen(\">\",  [1])\n                                        else if filter.startsWith(\"<\")  then accept_gen(\"<\",  [-1])\n                                        else if filter.startsWith(\"~\")  then (v) ->\n                                                return true if filter.substring(1).trim().length == 0\n                                                v.toLowerCase().match(filter.substring(1))\n                                        else (v) -> v.toLowerCase().indexOf(filter) != -1\n\n                                    valueList.find('.pvtCheckContainer p label span.value').each ->\n                                        if accept($(this).text())\n                                            $(this).parent().parent().show()\n                                        else\n                                            $(this).parent().parent().hide()\n                            controls.append $(\"<br>\")\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectAll)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:not(:checked)\")\n                                        .prop(\"checked\", true).toggleClass(\"changed\")\n                                    return false\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectNone)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:checked\")\n                                        .prop(\"checked\", false).toggleClass(\"changed\")\n                                    return false\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for value in values.sort(getSort(opts.sorters, attr))\n                             valueCount = attrValues[attr][value]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[attr]\n                                filterItemExcluded = (value not in opts.inclusions[attr])\n                             else if opts.exclusions[attr]\n                                filterItemExcluded = (value in opts.exclusions[attr])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\n                                .appendTo(filterItem)\n                                .bind \"change\", -> $(this).toggleClass(\"changed\")\n                             filterItem.append $(\"<span>\").addClass(\"value\").text(value)\n                             filterItem.append $(\"<span>\").addClass(\"count\").text(\"(\"+valueCount+\")\")\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    closeFilterBox = ->\n                        if valueList.find(\"[type='checkbox']\").length >\n                               valueList.find(\"[type='checkbox']:checked\").length\n                                attrElem.addClass \"pvtFilteredAttribute\"\n                            else\n                                attrElem.removeClass \"pvtFilteredAttribute\"\n\n                            valueList.find('.pvtSearch').val('')\n                            valueList.find('.pvtCheckContainer p').show()\n                            valueList.hide()\n\n                    finalButtons = $(\"<p>\").appendTo(valueList)\n\n                    if values.length <= opts.menuLimit\n                        $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.apply)\n                            .appendTo(finalButtons).bind \"click\", ->\n                                if valueList.find(\".changed\").removeClass(\"changed\").length\n                                    refresh()\n                                closeFilterBox()\n\n                    $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.cancel)\n                        .appendTo(finalButtons).bind \"click\", ->\n                            valueList.find(\".changed:checked\")\n                                .removeClass(\"changed\").prop(\"checked\", false)\n                            valueList.find(\".changed:not(:checked)\")\n                                .removeClass(\"changed\").prop(\"checked\", true)\n                            closeFilterBox()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle')\n                        .html(\" &#x25BE;\").bind \"click\", (e) ->\n                            {left, top} = $(e.currentTarget).position()\n                            valueList.css(left: left+10, top: top+10).show()\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink)\n\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    unused.append(attrElem).append(valueList)\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            ordering =\n                key_a_to_z:   {rowSymbol: \"&varr;\", colSymbol: \"&harr;\", next: \"value_a_to_z\"}\n                value_a_to_z: {rowSymbol: \"&darr;\", colSymbol: \"&rarr;\", next: \"value_z_to_a\"}\n                value_z_to_a: {rowSymbol: \"&uarr;\", colSymbol: \"&larr;\", next: \"key_a_to_z\"}\n\n            rowOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtRowOrder\")\n                .data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].rowSymbol)\n                    refresh()\n\n            colOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtColOrder\")\n                .data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].colSymbol)\n                    refresh()\n\n            $(\"<td>\").addClass('pvtVals')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append(rowOrderArrow)\n              .append(colOrderArrow)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2)\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend unused\n            else\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(unused)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownInAggregators\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n                subopts.rowOrder = rowOrderArrow.data(\"order\")\n                subopts.colOrder = colOrderArrow.data(\"order\")\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\n                    return true\n\n                pivotTable.pivot(materializedInput,subopts)\n                pivotUIOptions = $.extend {}, opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    colOrder: subopts.colOrder\n                    rowOrder: subopts.rowOrder\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer.val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            @trigger(\"pivotTableError\", e)\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var FLAT_KEY_DELIM, PivotData, addSeparators, aggregatorTemplates, aggregators, calculateValueRanges, convertToBarchart, dayNamesEn, derivers, generateBarchartScalers, generateHeatmappers, getSort, locales, mthNamesEn, naturalSort, numberFormat, pivotTableRenderer, rd, renderers, rx, rz, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\"\n      };\n      opts = $.extend({}, defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x) || (x == null)) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      uniques: function(fn, formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return fn(this.uniq);\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: null,\n              push: function(record) {\n                var x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  if (this.sum == null) {\n                    this.sum = 0;\n                  }\n                  return this.sum += x;\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      extremes: function(mode, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              sorter: getSort(data != null ? data.sorters : void 0, attr),\n              push: function(record) {\n                var ref, ref1, ref2, x;\n                x = record[attr];\n                if (mode === \"min\" || mode === \"max\") {\n                  x = parseFloat(x);\n                  if (!isNaN(x)) {\n                    this.val = Math[mode](x, (ref = this.val) != null ? ref : x);\n                  }\n                }\n                if (mode === \"first\") {\n                  if (this.sorter(x, (ref1 = this.val) != null ? ref1 : x) <= 0) {\n                    this.val = x;\n                  }\n                }\n                if (mode === \"last\") {\n                  if (this.sorter(x, (ref2 = this.val) != null ? ref2 : x) >= 0) {\n                    return this.val = x;\n                  }\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: function(x) {\n                if (isNaN(x)) {\n                  return x;\n                } else {\n                  return formatter(x);\n                }\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      quantile: function(q, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              vals: [],\n              push: function(record) {\n                var x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.vals.push(x);\n                }\n              },\n              value: function() {\n                var i;\n                if (this.vals.length === 0) {\n                  return null;\n                }\n                this.vals.sort(function(a, b) {\n                  return a - b;\n                });\n                i = (this.vals.length - 1) * q;\n                return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      runningStat: function(mode, ddof, formatter) {\n        if (mode == null) {\n          mode = \"mean\";\n        }\n        if (ddof == null) {\n          ddof = 1;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              n: 0.0,\n              m: 0.0,\n              s: 0.0,\n              push: function(record) {\n                var m_new, x;\n                x = parseFloat(record[attr]);\n                if (isNaN(x)) {\n                  return;\n                }\n                this.n += 1.0;\n                if (this.n === 1.0) {\n                  return this.m = x;\n                } else {\n                  m_new = this.m + (x - this.m) / this.n;\n                  this.s = this.s + (x - this.m) * (x - m_new);\n                  return this.m = m_new;\n                }\n              },\n              value: function() {\n                if (mode === \"mean\") {\n                  if (this.n === 0) {\n                    return 0 / 0;\n                  } else {\n                    return this.m;\n                  }\n                }\n                if (this.n <= ddof) {\n                  return 0;\n                }\n                switch (mode) {\n                  case \"var\":\n                    return this.s / (this.n - ddof);\n                  case \"stdev\":\n                    return Math.sqrt(this.s / (this.n - ddof));\n                }\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var aggIdx, x;\n          aggIdx = arguments[0], x = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                var agg;\n                agg = data.getAggregator.apply(data, slice.call(this.selector).concat([true]));\n                if ($.isArray(agg)) {\n                  agg = agg[aggIdx];\n                }\n                return this.inner.value() / agg.inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregatorTemplates.countUnique = function(f) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.length;\n      }), f);\n    };\n    aggregatorTemplates.listUnique = function(s) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.join(s);\n      }), (function(x) {\n        return x;\n      }));\n    };\n    aggregatorTemplates.max = function(f) {\n      return aggregatorTemplates.extremes('max', f);\n    };\n    aggregatorTemplates.min = function(f) {\n      return aggregatorTemplates.extremes('min', f);\n    };\n    aggregatorTemplates.first = function(f) {\n      return aggregatorTemplates.extremes('first', f);\n    };\n    aggregatorTemplates.last = function(f) {\n      return aggregatorTemplates.extremes('last', f);\n    };\n    aggregatorTemplates.median = function(f) {\n      return aggregatorTemplates.quantile(0.5, f);\n    };\n    aggregatorTemplates.average = function(f) {\n      return aggregatorTemplates.runningStat(\"mean\", 1, f);\n    };\n    aggregatorTemplates[\"var\"] = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"var\", ddof, f);\n    };\n    aggregatorTemplates.stdev = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"stdev\", ddof, f);\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Median\": tpl.median(usFmt),\n        \"Sample Variance\": tpl[\"var\"](1, usFmt),\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"First\": tpl.first(usFmt),\n        \"Last\": tpl.last(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Table Barchart\": function(data, opts) {\n        return pivotTableRenderer(data, opts, \"barchart\");\n      },\n      \"Heatmap\": function(data, opts) {\n        return pivotTableRenderer(data, opts, \"heatmap\");\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return pivotTableRenderer(data, opts, \"rowheatmap\");\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return pivotTableRenderer(data, opts, \"colheatmap\");\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter values\",\n          apply: \"Apply\",\n          cancel: \"Cancel\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    rx = /(\\d+)|(\\D+)/g;\n    rd = /\\d/;\n    rz = /^0/;\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, nas, nbs;\n        if ((bs != null) && (as == null)) {\n          return -1;\n        }\n        if ((as != null) && (bs == null)) {\n          return 1;\n        }\n        if (typeof as === \"number\" && isNaN(as)) {\n          return -1;\n        }\n        if (typeof bs === \"number\" && isNaN(bs)) {\n          return 1;\n        }\n        nas = +as;\n        nbs = +bs;\n        if (nas < nbs) {\n          return -1;\n        }\n        if (nas > nbs) {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs !== \"number\") {\n          return -1;\n        }\n        if (typeof bs === \"number\" && typeof as !== \"number\") {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs === \"number\") {\n          return 0;\n        }\n        if (isNaN(nbs) && !isNaN(nas)) {\n          return -1;\n        }\n        if (isNaN(nas) && !isNaN(nbs)) {\n          return 1;\n        }\n        a = String(as);\n        b = String(bs);\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, l_mapping, mapping, x;\n      mapping = {};\n      l_mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n        if (typeof x === \"string\") {\n          l_mapping[x.toLowerCase()] = i;\n        }\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else if ((l_mapping[a] != null) && (l_mapping[b] != null)) {\n          return l_mapping[a] - l_mapping[b];\n        } else if (l_mapping[a] != null) {\n          return -1;\n        } else if (l_mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      if (sorters != null) {\n        if ($.isFunction(sorters)) {\n          sort = sorters(attr);\n          if ($.isFunction(sort)) {\n            return sort;\n          }\n        } else if (sorters[attr] != null) {\n          return sorters[attr];\n        }\n      }\n      return naturalSort;\n    };\n\n    /*\n    Data Model class\n     */\n    FLAT_KEY_DELIM = '\\u0001';\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        var ref, ref1, ref10, ref11, ref12, ref13, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;\n        if (opts == null) {\n          opts = {};\n        }\n        this.populateMetaAggregators = bind(this.populateMetaAggregators, this);\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.input = input;\n        this.aggregator = (ref = opts.aggregator) != null ? ref : aggregatorTemplates.count()();\n        this.aggregatorName = (ref1 = opts.aggregatorName) != null ? ref1 : \"Count\";\n        this.multiAggAttr = (ref2 = opts.multiAggAttr) != null ? ref2 : \"_metrics\";\n        this.colAttrs = (ref3 = opts.cols) != null ? ref3 : [];\n        this.rowAttrs = (ref4 = opts.rows) != null ? ref4 : [];\n        this.valAttrs = (ref5 = opts.vals) != null ? ref5 : [];\n        if ($.isArray(this.aggregator) && (ref6 = this.multiAggAttr, indexOf.call(this.colAttrs, ref6) < 0) && (ref7 = this.multiAggAttr, indexOf.call(this.rowAttrs, ref7) < 0)) {\n          this.colAttrs.push(this.multiAggAttr);\n        }\n        this.sorters = (ref8 = opts.sorters) != null ? ref8 : {};\n        this.rowOrder = (ref9 = opts.rowOrder) != null ? ref9 : \"key_a_to_z\";\n        this.colOrder = (ref10 = opts.colOrder) != null ? ref10 : \"key_a_to_z\";\n        this.derivedAttributes = (ref11 = opts.derivedAttributes) != null ? ref11 : {};\n        this.filter = (ref12 = opts.filter) != null ? ref12 : (function() {\n          return true;\n        });\n        this.emptyValue = (ref13 = opts.emptyValue) != null ? ref13 : 'null';\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.tree = {};\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = !$.isArray(this.aggregator) ? this.aggregator(this, [], []) : this.aggregator.map((function(_this) {\n          return function(agg) {\n            return agg(_this, [], []);\n          };\n        })(this));\n        this.metaAggRowTotals = {};\n        this.metaAggColTotals = {};\n        this.metaAggAllTotal = null;\n        this.sorted = false;\n        this.opts = opts;\n        PivotData.forEachRecord(input, opts, (function(_this) {\n          return function(record) {\n            if (opts.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, opts, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(opts.derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, ref1, v;\n            ref = opts.derivedAttributes;\n            for (k in ref) {\n              v = ref[k];\n              record[k] = (ref1 = v(record)) != null ? ref1 : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if (!opts.treatDataArrayAsRecords) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof $) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.prototype.forEachMatchingRecord = function(criteria, callback) {\n        return PivotData.forEachRecord(this.input, this.opts, (function(_this) {\n          return function(record) {\n            var k, ref, v;\n            if (!_this.opts.filter(record)) {\n              return;\n            }\n            for (k in criteria) {\n              if (!hasProp.call(criteria, k)) continue;\n              v = criteria[k];\n              if (v !== ((ref = record[k]) != null ? ref : _this.emptyValue)) {\n                return;\n              }\n            }\n            return callback(record);\n          };\n        })(this));\n      };\n\n      PivotData.prototype.arrSort = function(attrs, order) {\n        var _getKeyVal, a, sortersArr;\n        _getKeyVal = function(key, attrIdx) {\n          var keyVal;\n          keyVal = key[attrIdx];\n          if (keyVal === this.emptyValue) {\n            return null;\n          } else {\n            return keyVal;\n          }\n        };\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(keyA, keyB) {\n          var attrIdx, comparison, sorter;\n          for (attrIdx in sortersArr) {\n            if (!hasProp.call(sortersArr, attrIdx)) continue;\n            sorter = sortersArr[attrIdx];\n            comparison = sorter(_getKeyVal(keyA, attrIdx), _getKeyVal(keyB, attrIdx));\n            if ((order != null) && order[attrIdx] === \"-\") {\n              comparison *= -1;\n            }\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        var _sortByAggVal, aggIdx, attrs, attrsOrder, idx, isDesc, isRow, key, keys, l, len1, ref, ref1, results, sortOrder, sortParts, sortType, sortVal;\n        if (this.sorted) {\n          return;\n        }\n        this.sorted = true;\n        ref = [[this.rowOrder, this.rowKeys, this.rowAttrs], [this.colOrder, this.colKeys, this.colAttrs]];\n        results = [];\n        for (idx = l = 0, len1 = ref.length; l < len1; idx = ++l) {\n          ref1 = ref[idx], sortOrder = ref1[0], keys = ref1[1], attrs = ref1[2];\n          isRow = idx === 0;\n          _sortByAggVal = (function(_this) {\n            return function(comparisonKey, isDesc, aggIdx) {\n              var _getVal;\n              _getVal = function(sortKey) {\n                var agg, col, row;\n                row = isRow ? sortKey : comparisonKey;\n                col = !isRow ? sortKey : comparisonKey;\n                agg = _this.getAggregator(row, col);\n                if ($.isArray(agg)) {\n                  agg = agg[aggIdx || 0];\n                }\n                return agg.value();\n              };\n              return keys.sort(function(a, b) {\n                return getSort(_this.sorters, null)(_getVal(a), _getVal(b)) * (isDesc ? -1 : 1);\n              });\n            };\n          })(this);\n          switch (sortOrder) {\n            case \"value_a_to_z\":\n              results.push(_sortByAggVal([]));\n              break;\n            case \"value_z_to_a\":\n              results.push(_sortByAggVal([], true));\n              break;\n            case \"key_a_to_z\":\n              results.push(keys.sort(this.arrSort(attrs)));\n              break;\n            default:\n              sortParts = sortOrder.split(\"_\");\n              sortType = sortParts[0];\n              switch (sortType) {\n                case \"attr\":\n                  attrsOrder = sortParts.slice(1);\n                  results.push(keys.sort(this.arrSort(attrs, attrsOrder)));\n                  break;\n                default:\n                  sortVal = sortParts[1];\n                  isDesc = false;\n                  if (sortVal.startsWith(\"-\")) {\n                    sortVal = sortVal.slice(1);\n                    isDesc = true;\n                  }\n                  if (sortType === \"key\") {\n                    key = sortVal.split(FLAT_KEY_DELIM);\n                    results.push(_sortByAggVal(key, isDesc));\n                  } else {\n                    aggIdx = parseInt(sortVal);\n                    results.push(_sortByAggVal([], isDesc, aggIdx));\n                  }\n              }\n          }\n        }\n        return results;\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        var e;\n        try {\n          this.sortKeys();\n        } catch (error) {\n          e = error;\n        }\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        var e;\n        try {\n          this.sortKeys();\n        } catch (error) {\n          e = error;\n        }\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record, aggIdx) {\n        var agg, aggregator, allTotal, attrs, colKey, flatColKey, flatKey, flatRowKey, getTotalsAgg, isMultiTotals, keys, l, len1, len2, len3, len4, n, o, rawKey, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, rowKey, rowOrCol, t, totals, totalsAgg, x;\n        if ($.isArray(this.aggregator) && (aggIdx == null)) {\n          ref = this.aggregator;\n          for (aggIdx = l = 0, len1 = ref.length; l < len1; aggIdx = ++l) {\n            agg = ref[aggIdx];\n            record[this.multiAggAttr] = aggIdx;\n            this.processRecord(record, aggIdx);\n          }\n          delete record[this.multiAggAttr];\n          return;\n        }\n        aggregator = aggIdx != null ? this.aggregator[aggIdx] : this.aggregator;\n        colKey = [];\n        rowKey = [];\n        ref1 = this.colAttrs;\n        for (n = 0, len2 = ref1.length; n < len2; n++) {\n          x = ref1[n];\n          colKey.push((ref2 = record[x]) != null ? ref2 : this.emptyValue);\n        }\n        ref3 = this.rowAttrs;\n        for (o = 0, len3 = ref3.length; o < len3; o++) {\n          x = ref3[o];\n          rowKey.push((ref4 = record[x]) != null ? ref4 : this.emptyValue);\n        }\n        flatRowKey = rowKey.join(FLAT_KEY_DELIM);\n        flatColKey = colKey.join(FLAT_KEY_DELIM);\n        allTotal = aggIdx != null ? this.allTotal[aggIdx] : this.allTotal;\n        allTotal.push(record);\n        getTotalsAgg = (function(_this) {\n          return function(rowOrCol, key) {\n            var c, r;\n            r = rowOrCol === \"row\" ? key : [];\n            c = rowOrCol === \"row\" ? [] : key;\n            return aggregator(_this, r, c);\n          };\n        })(this);\n        ref5 = [[\"row\", this.colAttrs, this.rowKeys, rowKey, flatRowKey, this.rowTotals], [\"col\", this.rowAttrs, this.colKeys, colKey, flatColKey, this.colTotals]];\n        for (t = 0, len4 = ref5.length; t < len4; t++) {\n          ref6 = ref5[t], rowOrCol = ref6[0], attrs = ref6[1], keys = ref6[2], rawKey = ref6[3], flatKey = ref6[4], totals = ref6[5];\n          isMultiTotals = (aggIdx != null) && (ref7 = this.multiAggAttr, indexOf.call(attrs, ref7) >= 0);\n          if (rawKey.length !== 0) {\n            if (!totals[flatKey]) {\n              keys.push(rawKey);\n              totals[flatKey] = isMultiTotals ? [] : getTotalsAgg(rowOrCol, rawKey);\n            }\n            if (isMultiTotals && !totals[flatKey][aggIdx]) {\n              totals[flatKey][aggIdx] = getTotalsAgg(rowOrCol, rawKey);\n            }\n            totalsAgg = totals[flatKey];\n            if (isMultiTotals) {\n              totalsAgg = totalsAgg[aggIdx];\n            }\n            totalsAgg.push(record);\n          }\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = aggregator(this, rowKey, colKey);\n          }\n          return this.tree[flatRowKey][flatColKey].push(record);\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey, forceDefaultTotalsAgg) {\n        var agg, flatColKey, flatRowKey, getMetaAgg;\n        if (forceDefaultTotalsAgg == null) {\n          forceDefaultTotalsAgg = false;\n        }\n        flatRowKey = rowKey.join(FLAT_KEY_DELIM);\n        flatColKey = colKey.join(FLAT_KEY_DELIM);\n        getMetaAgg = this.opts.totalsMetaAggregator && !forceDefaultTotalsAgg;\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = getMetaAgg ? this.metaAggAllTotal : this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = (getMetaAgg ? this.metaAggColTotals : this.colTotals)[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = (getMetaAgg ? this.metaAggRowTotals : this.rowTotals)[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        if ($.isArray(agg)) {\n          return agg;\n        } else {\n          return agg != null ? agg : {\n            value: (function() {\n              return null;\n            }),\n            format: function() {\n              return \"\";\n            }\n          };\n        }\n      };\n\n      PivotData.prototype.populateMetaAggregators = function() {\n        var aggregator, attrs, flatColKey, flatKey, flatRowKey, idx, key, metaAggTotals, metricIdxLoc, oppositeDimAttrs, oppositeDimFlatKey, ref, results, row, totals, totalsMetaAggregator;\n        if (this.opts.totalsMetaAggregator) {\n          totalsMetaAggregator = this.opts.totalsMetaAggregator;\n          ref = this.tree;\n          results = [];\n          for (flatRowKey in ref) {\n            if (!hasProp.call(ref, flatRowKey)) continue;\n            row = ref[flatRowKey];\n            results.push((function() {\n              var l, len1, ref1, ref2, ref3, ref4, results1;\n              results1 = [];\n              for (flatColKey in row) {\n                if (!hasProp.call(row, flatColKey)) continue;\n                aggregator = row[flatColKey];\n                ref1 = [[this.rowTotals, this.metaAggRowTotals, this.colAttrs, flatRowKey, flatColKey], [this.colTotals, this.metaAggColTotals, this.rowAttrs, flatColKey, flatRowKey]];\n                for (l = 0, len1 = ref1.length; l < len1; l++) {\n                  ref2 = ref1[l], totals = ref2[0], metaAggTotals = ref2[1], oppositeDimAttrs = ref2[2], flatKey = ref2[3], oppositeDimFlatKey = ref2[4];\n                  if (!$.isArray(totals[flatKey])) {\n                    if (!(flatKey in metaAggTotals)) {\n                      metaAggTotals[flatKey] = totalsMetaAggregator();\n                    }\n                    metaAggTotals[flatKey].push(aggregator);\n                  } else {\n                    if (!(flatKey in metaAggTotals)) {\n                      metaAggTotals[flatKey] = totals[flatKey].map(function() {\n                        return totalsMetaAggregator();\n                      });\n                    }\n                    metricIdxLoc = oppositeDimAttrs.indexOf(this.multiAggAttr);\n                    idx = parseInt(oppositeDimFlatKey.split(FLAT_KEY_DELIM)[metricIdxLoc]);\n                    metaAggTotals[flatKey][idx].push(aggregator);\n                  }\n                }\n                if (!$.isArray(this.allTotal)) {\n                  if (this.metaAggAllTotal === null) {\n                    this.metaAggAllTotal = totalsMetaAggregator();\n                  }\n                  results1.push(this.metaAggAllTotal.push(aggregator));\n                } else {\n                  if (!this.metaAggAllTotal) {\n                    this.metaAggAllTotal = this.allTotal.map(function() {\n                      return totalsMetaAggregator();\n                    });\n                  }\n                  ref4 = (ref3 = this.multiAggAttr, indexOf.call(this.rowAttrs, ref3) >= 0) ? [flatRowKey, this.rowAttrs] : [flatColKey, this.colAttrs], key = ref4[0], attrs = ref4[1];\n                  idx = parseInt(key.split(FLAT_KEY_DELIM)[attrs.indexOf(this.multiAggAttr)]);\n                  results1.push(this.metaAggAllTotal[idx].push(aggregator));\n                }\n              }\n              return results1;\n            }).call(this));\n          }\n          return results;\n        }\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts, rendererType) {\n      var agg, aggIdx, aggregator, colAttr, colAttrIdx, colAttrs, colKey, colKeyIdx, colKeys, createHeader, createTotalsCell, createTotalsRow, defaults, flatColKey, flatRowKey, getClickHandler, getHeaderClickHandler, heatmappers, i, l, len1, len2, len3, len4, len5, len6, len7, len8, n, o, ref, ref1, ref2, ref3, result, rowAttr, rowAttrIdx, rowAttrs, rowKey, rowKeyIdx, rowKeys, scalers, spanSize, t, tbody, td, th, thead, totalAggregator, tr, txt, u, val, valueRanges, w, x, y, z;\n      defaults = {\n        table: {\n          clickCallback: null\n        },\n        localeStrings: {\n          totals: \"Totals\"\n        },\n        treatDataArrayAsRecords: false\n      };\n      opts = $.extend(true, {}, defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      if (opts.table.clickCallback) {\n        getClickHandler = function(value, rowKey, colKey, aggIdx) {\n          var attr, filters, i, l, len1, len2, n;\n          if (aggIdx == null) {\n            aggIdx = null;\n          }\n          filters = {};\n          for (i = l = 0, len1 = colAttrs.length; l < len1; i = ++l) {\n            attr = colAttrs[i];\n            if (colKey[i] != null) {\n              filters[attr] = colKey[i];\n            }\n          }\n          for (i = n = 0, len2 = rowAttrs.length; n < len2; i = ++n) {\n            attr = rowAttrs[i];\n            if (rowKey[i] != null) {\n              filters[attr] = rowKey[i];\n            }\n          }\n          if (aggIdx != null) {\n            filters[pivotData.multiAggAttr] = aggIdx;\n          }\n          return function(e) {\n            return opts.table.clickCallback(e, value, filters, pivotData);\n          };\n        };\n      }\n      if (opts.table.headerClickCallback) {\n        getHeaderClickHandler = function(rowOrCol, type, val) {\n          return function(e) {\n            return opts.table.headerClickCallback(e, rowOrCol, type, val);\n          };\n        };\n      }\n      if (rendererType != null) {\n        valueRanges = calculateValueRanges(rendererType, pivotData);\n        if (rendererType === \"heatmap\" || rendererType === \"rowheatmap\" || rendererType === \"colheatmap\") {\n          heatmappers = generateHeatmappers(valueRanges, opts);\n        } else if (rendererType === \"barchart\") {\n          scalers = generateBarchartScalers(valueRanges);\n        }\n      }\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(keys, keyIdx, maxAttrIdx) {\n        var attrIdx, l, len, n, noDraw, ref, ref1, stop;\n        if (keyIdx !== 0) {\n          noDraw = true;\n          for (attrIdx = l = 0, ref = maxAttrIdx; 0 <= ref ? l <= ref : l >= ref; attrIdx = 0 <= ref ? ++l : --l) {\n            if (keys[keyIdx - 1][attrIdx] !== keys[keyIdx][attrIdx]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (keyIdx + len < keys.length) {\n          stop = false;\n          for (attrIdx = n = 0, ref1 = maxAttrIdx; 0 <= ref1 ? n <= ref1 : n >= ref1; attrIdx = 0 <= ref1 ? ++n : --n) {\n            if (keys[keyIdx][attrIdx] !== keys[keyIdx + len][attrIdx]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      for (colAttrIdx = l = 0, len1 = colAttrs.length; l < len1; colAttrIdx = ++l) {\n        colAttr = colAttrs[colAttrIdx];\n        tr = document.createElement(\"tr\");\n        if (parseInt(colAttrIdx) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = colAttr;\n        if (getHeaderClickHandler != null) {\n          th.onclick = getHeaderClickHandler(\"col\", \"attr\", colAttr);\n        }\n        tr.appendChild(th);\n        for (colKeyIdx = n = 0, len2 = colKeys.length; n < len2; colKeyIdx = ++n) {\n          colKey = colKeys[colKeyIdx];\n          x = spanSize(colKeys, parseInt(colKeyIdx), parseInt(colAttrIdx));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            if (opts.formatHeader) {\n              th.textContent = opts.formatHeader(colKey[colAttrIdx], colAttrs[colAttrIdx]);\n            } else {\n              th.textContent = colKey[colAttrIdx];\n            }\n            th.setAttribute(\"colspan\", x);\n            if ((getHeaderClickHandler != null) && colAttrIdx === (colAttrs.length - 1)) {\n              flatColKey = colKey.join(FLAT_KEY_DELIM);\n              th.onclick = getHeaderClickHandler(\"col\", \"key\", flatColKey);\n              th.setAttribute(\"data-flat-key\", flatColKey);\n            }\n            if (parseInt(colAttrIdx) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(colAttrIdx) === 0) {\n          createHeader = function(aggIdx) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n            th.innerHTML = opts.localeStrings.totals;\n            if (aggIdx != null) {\n              th.setAttribute(\"data-agg-idx\", aggIdx);\n            }\n            th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n            if (getHeaderClickHandler != null) {\n              th.onclick = getHeaderClickHandler(\"col\", \"totals\", aggIdx || 0);\n            }\n            return tr.appendChild(th);\n          };\n          if ($.isArray(pivotData.aggregator) && (ref = pivotData.multiAggAttr, indexOf.call(colAttrs, ref) >= 0)) {\n            if (colAttrs.length > 1) {\n              ref1 = pivotData.aggregator;\n              for (aggIdx = o = 0, len3 = ref1.length; o < len3; aggIdx = ++o) {\n                agg = ref1[aggIdx];\n                createHeader(aggIdx);\n              }\n            }\n          } else {\n            createHeader();\n          }\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i = t = 0, len4 = rowAttrs.length; t < len4; i = ++t) {\n          rowAttr = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = rowAttr;\n          if (getHeaderClickHandler != null) {\n            th.onclick = getHeaderClickHandler(\"row\", \"attr\", rowAttr);\n          }\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          if (getHeaderClickHandler != null) {\n            th.onclick = getHeaderClickHandler(\"col\", \"totals\", 0);\n          }\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      for (rowKeyIdx = u = 0, len5 = rowKeys.length; u < len5; rowKeyIdx = ++u) {\n        rowKey = rowKeys[rowKeyIdx];\n        tr = document.createElement(\"tr\");\n        for (rowAttrIdx in rowKey) {\n          if (!hasProp.call(rowKey, rowAttrIdx)) continue;\n          txt = rowKey[rowAttrIdx];\n          x = spanSize(rowKeys, parseInt(rowKeyIdx), parseInt(rowAttrIdx));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            if (opts.formatHeader) {\n              th.textContent = opts.formatHeader(txt, rowAttrs[rowAttrIdx]);\n            } else {\n              th.textContent = txt;\n            }\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(rowAttrIdx) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            if ((getHeaderClickHandler != null) && parseInt(rowAttrIdx) === rowAttrs.length - 1) {\n              flatRowKey = rowKey.join(FLAT_KEY_DELIM);\n              th.onclick = getHeaderClickHandler(\"row\", \"key\", flatRowKey);\n              th.setAttribute(\"data-flat-key\", flatRowKey);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (colKeyIdx = w = 0, len6 = colKeys.length; w < len6; colKeyIdx = ++w) {\n          colKey = colKeys[colKeyIdx];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + rowKeyIdx + \" col\" + colKeyIdx;\n          td.textContent = aggregator.format(val);\n          if (heatmappers != null) {\n            td.style.backgroundColor = (function() {\n              switch (rendererType) {\n                case \"heatmap\":\n                  return heatmappers.all(val);\n                case \"rowheatmap\":\n                  return heatmappers.rows[rowKeyIdx](val);\n                case \"colheatmap\":\n                  return heatmappers.cols[colKeyIdx](val);\n              }\n            })();\n          } else if (scalers != null) {\n            convertToBarchart(td, scalers.rows[rowKeyIdx](val));\n          }\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, colKey);\n          }\n          tr.appendChild(td);\n        }\n        createTotalsCell = function(totalAggregator, aggIdx) {\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal rowTotal\";\n          td.textContent = totalAggregator.format(val);\n          if (heatmappers != null) {\n            td.style.backgroundColor = heatmappers.rowTotals(val);\n          }\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, [], aggIdx);\n          }\n          td.setAttribute(\"data-for\", \"row\" + rowKeyIdx);\n          return tr.appendChild(td);\n        };\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        if ($.isArray(totalAggregator)) {\n          if (colAttrs.length > 1) {\n            for (aggIdx = y = 0, len7 = totalAggregator.length; y < len7; aggIdx = ++y) {\n              agg = totalAggregator[aggIdx];\n              createTotalsCell(agg, aggIdx);\n            }\n          }\n        } else {\n          createTotalsCell(totalAggregator, null);\n        }\n        tbody.appendChild(tr);\n      }\n      createTotalsRow = function(aggIdx) {\n        var createGrandTotalCell, i1, len8, len9, z;\n        tr = document.createElement(\"tr\");\n        th = document.createElement(\"th\");\n        th.className = \"pvtTotalLabel pvtColTotalLabel\";\n        th.innerHTML = opts.localeStrings.totals;\n        if (aggIdx != null) {\n          th.setAttribute(\"data-agg-idx\", aggIdx);\n        }\n        th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n        if (getHeaderClickHandler != null) {\n          th.onclick = getHeaderClickHandler(\"row\", \"totals\", aggIdx || 0);\n        }\n        tr.appendChild(th);\n        for (colKeyIdx = z = 0, len8 = colKeys.length; z < len8; colKeyIdx = ++z) {\n          colKey = colKeys[colKeyIdx];\n          totalAggregator = pivotData.getAggregator([], colKey);\n          if (aggIdx != null) {\n            totalAggregator = totalAggregator[aggIdx];\n          }\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal colTotal\";\n          td.textContent = totalAggregator.format(val);\n          if (heatmappers != null) {\n            td.style.backgroundColor = heatmappers.colTotals(val);\n          } else if (scalers != null) {\n            convertToBarchart(td, scalers.colTotals(val));\n          }\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, [], colKey, aggIdx);\n          }\n          td.setAttribute(\"data-for\", \"col\" + colKeyIdx);\n          tr.appendChild(td);\n        }\n        createGrandTotalCell = function(totalAggregator, aggIdx) {\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtGrandTotal\";\n          td.textContent = totalAggregator.format(val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, [], [], aggIdx);\n          }\n          return tr.appendChild(td);\n        };\n        totalAggregator = pivotData.getAggregator([], []);\n        if (!$.isArray(totalAggregator)) {\n          createGrandTotalCell(totalAggregator);\n        } else if (aggIdx != null) {\n          createGrandTotalCell(totalAggregator[aggIdx]);\n        } else {\n          if (colAttrs.length > 1) {\n            for (aggIdx = i1 = 0, len9 = totalAggregator.length; i1 < len9; aggIdx = ++i1) {\n              agg = totalAggregator[aggIdx];\n              createGrandTotalCell(agg, aggIdx);\n            }\n          }\n        }\n        return tbody.appendChild(tr);\n      };\n      if ($.isArray(pivotData.aggregator) && (ref2 = pivotData.multiAggAttr, indexOf.call(rowAttrs, ref2) >= 0)) {\n        if (rowAttrs.length > 1) {\n          ref3 = pivotData.aggregator;\n          for (aggIdx = z = 0, len8 = ref3.length; z < len8; aggIdx = ++z) {\n            agg = ref3[aggIdx];\n            createTotalsRow(aggIdx);\n          }\n        }\n      } else {\n        createTotalsRow();\n      }\n      result.appendChild(tbody);\n      return result;\n    };\n    calculateValueRanges = (function(_this) {\n      return function(rendererType, pivotData) {\n        var colKey, colKeyIdx, l, len1, len2, len3, len4, len5, n, o, rangeType, rangeTypes, ref, ref1, rowKey, rowKeyIdx, seedRange, t, totalAgg, totalAggs, u, updateRange, val, valueRanges;\n        valueRanges = {};\n        rangeTypes = (function() {\n          switch (rendererType) {\n            case \"heatmap\":\n              return [\"all\", \"rowTotals\", \"colTotals\"];\n            case \"rowheatmap\":\n              return [\"rows\", \"rowTotals\", \"colTotals\"];\n            case \"colheatmap\":\n              return [\"cols\", \"rowTotals\", \"colTotals\"];\n            case \"barchart\":\n              return [\"rows\", \"colTotals\"];\n          }\n        })();\n        seedRange = function(rangeType) {\n          var key, keyIdx, keys, l, len1, results, seedDimRange;\n          if (rangeType === \"rows\" || rangeType === \"cols\") {\n            valueRanges[rangeType] = {};\n            keys = rangeType === \"rows\" ? pivotData.rowKeys : pivotData.colKeys;\n            seedDimRange = function(keyIdx) {\n              return valueRanges[rangeType][keyIdx] = [2e308, -2e308];\n            };\n            results = [];\n            for (keyIdx = l = 0, len1 = keys.length; l < len1; keyIdx = ++l) {\n              key = keys[keyIdx];\n              results.push(seedDimRange(keyIdx));\n            }\n            return results;\n          } else {\n            return valueRanges[rangeType] = [2e308, -2e308];\n          }\n        };\n        for (l = 0, len1 = rangeTypes.length; l < len1; l++) {\n          rangeType = rangeTypes[l];\n          seedRange(rangeType);\n        }\n        updateRange = function(range, val) {\n          if ((val != null) && isFinite(val)) {\n            range[0] = Math.min(range[0], val);\n            return range[1] = Math.max(range[1], val);\n          }\n        };\n        ref = pivotData.rowKeys;\n        for (rowKeyIdx = n = 0, len2 = ref.length; n < len2; rowKeyIdx = ++n) {\n          rowKey = ref[rowKeyIdx];\n          ref1 = pivotData.colKeys;\n          for (colKeyIdx = o = 0, len3 = ref1.length; o < len3; colKeyIdx = ++o) {\n            colKey = ref1[colKeyIdx];\n            val = pivotData.getAggregator(rowKey, colKey).value();\n            if (valueRanges.all != null) {\n              updateRange(valueRanges.all, val);\n            }\n            if (valueRanges.rows != null) {\n              updateRange(valueRanges.rows[rowKeyIdx], val);\n            }\n            if (valueRanges.cols != null) {\n              updateRange(valueRanges.cols[colKeyIdx], val);\n            }\n            if (rowKeyIdx === 0 && (valueRanges.colTotals != null)) {\n              totalAggs = $.makeArray(pivotData.getAggregator([], colKey));\n              for (t = 0, len4 = totalAggs.length; t < len4; t++) {\n                totalAgg = totalAggs[t];\n                updateRange(valueRanges.colTotals, totalAgg.value());\n              }\n            }\n          }\n          if (valueRanges.rowTotals != null) {\n            totalAggs = $.makeArray(pivotData.getAggregator(rowKey, []));\n            for (u = 0, len5 = totalAggs.length; u < len5; u++) {\n              totalAgg = totalAggs[u];\n              updateRange(valueRanges.rowTotals, totalAgg.value());\n            }\n          }\n        }\n        return valueRanges;\n      };\n    })(this);\n    generateHeatmappers = function(valueRanges, opts) {\n      var colorScaleGenerator, heatmappers, keyIdx, range, rangeType, ref, ref1;\n      heatmappers = {};\n      colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(arg) {\n          var max, min;\n          min = arg[0], max = arg[1];\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      for (rangeType in valueRanges) {\n        if (rangeType === \"rows\" || rangeType === \"cols\") {\n          heatmappers[rangeType] = {};\n          ref1 = valueRanges[rangeType];\n          for (keyIdx in ref1) {\n            range = ref1[keyIdx];\n            heatmappers[rangeType][keyIdx] = colorScaleGenerator(range);\n          }\n        } else {\n          heatmappers[rangeType] = colorScaleGenerator(valueRanges[rangeType]);\n        }\n      }\n      return heatmappers;\n    };\n    generateBarchartScalers = function(valueRanges) {\n      var generateScaler, ref, rowKeyIdx, rowRange, scalers;\n      scalers = {};\n      generateScaler = function(arg) {\n        var bottom, max, min, range, scaler;\n        min = arg[0], max = arg[1];\n        if (max < 0) {\n          max = 0;\n        }\n        range = max;\n        if (min < 0) {\n          range = max - min;\n        }\n        scaler = function(x) {\n          return 100 * x / (1.4 * range);\n        };\n        bottom = 0;\n        if (min < 0) {\n          bottom = scaler(-min);\n        }\n        return function(x) {\n          if (x < 0) {\n            return [bottom + scaler(x), scaler(-x), \"darkred\"];\n          } else {\n            return [bottom, scaler(x), \"grey\"];\n          }\n        };\n      };\n      scalers.colTotals = generateScaler(valueRanges.colTotals);\n      scalers.rows = {};\n      ref = valueRanges.rows;\n      for (rowKeyIdx in ref) {\n        rowRange = ref[rowKeyIdx];\n        scalers.rows[rowKeyIdx] = generateScaler(rowRange);\n      }\n      return scalers;\n    };\n    convertToBarchart = function(td, arg) {\n      var bgColor, bottom, height, text, wrapper;\n      bottom = arg[0], height = arg[1], bgColor = arg[2];\n      text = td.textContent;\n      wrapper = $(\"<div>\").css({\n        \"position\": \"relative\",\n        \"height\": \"55px\"\n      });\n      wrapper.append($(\"<div>\").css({\n        \"position\": \"absolute\",\n        \"bottom\": bottom + \"%\",\n        \"left\": 0,\n        \"right\": 0,\n        \"height\": height + \"%\",\n        \"background-color\": bgColor\n      }));\n      wrapper.append($(\"<div>\").text(text).css({\n        \"position\": \"relative\",\n        \"padding-left\": \"5px\",\n        \"padding-right\": \"5px\"\n      }));\n      td.style.padding = 0;\n      td.style.paddingTop = \"5px\";\n      td.style.textAlign = \"center\";\n      return td.innerHTML = wrapper[0].outerHTML;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, inputOpts, locale) {\n      var defaults, e, localeDefaults, localeStrings, opts, pivotData, result, x;\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      result = null;\n      try {\n        pivotData = input instanceof opts.dataClass ? input : new opts.dataClass(input, opts);\n        pivotData.populateMetaAggregators();\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          this.trigger(\"pivotTableError\", [e, opts.localeStrings.renderError]);\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").empty;\n        }\n      } catch (error) {\n        e = error;\n        this.trigger(\"pivotTableError\", [e, opts.localeStrings.computeError]);\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").empty;\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    return $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggregator, attr, attrLength, attrValues, c, colOrderArrow, defaults, e, existingOpts, fn1, i, initialRender, l, len1, len2, len3, localeDefaults, localeStrings, materializedInput, n, o, opts, ordering, pivotTable, recordsProcessed, ref, ref1, ref2, ref3, refresh, refreshDelayed, renderer, rendererControl, rowOrderArrow, shownAttributes, shownInAggregators, shownInDragDrop, tr1, tr2, uiTable, unused, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        hiddenFromAggregators: [],\n        hiddenFromDragDrop: [],\n        menuLimit: 500,\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        onRefresh: null,\n        filter: function() {\n          return true;\n        },\n        sorters: {},\n        treatDataArrayAsRecords: false\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        attrValues = {};\n        materializedInput = [];\n        recordsProcessed = 0;\n        PivotData.forEachRecord(input, opts, function(record) {\n          var attr, base, ref, value;\n          if (!opts.filter(record)) {\n            return;\n          }\n          materializedInput.push(record);\n          for (attr in record) {\n            if (!hasProp.call(record, attr)) continue;\n            if (attrValues[attr] == null) {\n              attrValues[attr] = {};\n              if (recordsProcessed > 0) {\n                attrValues[attr][this.emptyValue] = recordsProcessed;\n              }\n            }\n          }\n          for (attr in attrValues) {\n            value = (ref = record[attr]) != null ? ref : this.emptyValue;\n            if ((base = attrValues[attr])[value] == null) {\n              base[value] = 0;\n            }\n            attrValues[attr][value]++;\n          }\n          return recordsProcessed++;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<td>\");\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref = opts.renderers;\n        for (x in ref) {\n          if (!hasProp.call(ref, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var results;\n          results = [];\n          for (a in attrValues) {\n            if (indexOf.call(opts.hiddenAttributes, a) < 0) {\n              results.push(a);\n            }\n          }\n          return results;\n        })();\n        shownInAggregators = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            c = shownAttributes[l];\n            if (indexOf.call(opts.hiddenFromAggregators, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        shownInDragDrop = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            c = shownAttributes[l];\n            if (indexOf.call(opts.hiddenFromDragDrop, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (l = 0, len1 = shownInDragDrop.length; l < len1; l++) {\n            a = shownInDragDrop[l];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          unused.addClass('pvtVertList');\n        } else {\n          unused.addClass('pvtHorizList');\n        }\n        fn1 = function(attr) {\n          var attrElem, checkContainer, closeFilterBox, controls, filterItem, filterItemExcluded, finalButtons, hasExcludedItem, len2, n, placeholder, ref1, sorter, triangleLink, v, value, valueCount, valueList, values;\n          values = (function() {\n            var results;\n            results = [];\n            for (v in attrValues[attr]) {\n              results.push(v);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").append($(\"<span>\").text(attr), $(\"<span>\").addClass(\"count\").text(\"(\" + values.length + \")\")));\n          if (values.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            if (values.length > 5) {\n              controls = $(\"<p>\").appendTo(valueList);\n              sorter = getSort(opts.sorters, attr);\n              placeholder = opts.localeStrings.filterResults;\n              $(\"<input>\", {\n                type: \"text\"\n              }).appendTo(controls).attr({\n                placeholder: placeholder,\n                \"class\": \"pvtSearch\"\n              }).bind(\"keyup\", function() {\n                var accept, accept_gen, filter;\n                filter = $(this).val().toLowerCase().trim();\n                accept_gen = function(prefix, accepted) {\n                  return function(v) {\n                    var real_filter, ref1;\n                    real_filter = filter.substring(prefix.length).trim();\n                    if (real_filter.length === 0) {\n                      return true;\n                    }\n                    return ref1 = Math.sign(sorter(v.toLowerCase(), real_filter)), indexOf.call(accepted, ref1) >= 0;\n                  };\n                };\n                accept = filter.startsWith(\">=\") ? accept_gen(\">=\", [1, 0]) : filter.startsWith(\"<=\") ? accept_gen(\"<=\", [-1, 0]) : filter.startsWith(\">\") ? accept_gen(\">\", [1]) : filter.startsWith(\"<\") ? accept_gen(\"<\", [-1]) : filter.startsWith(\"~\") ? function(v) {\n                  if (filter.substring(1).trim().length === 0) {\n                    return true;\n                  }\n                  return v.toLowerCase().match(filter.substring(1));\n                } : function(v) {\n                  return v.toLowerCase().indexOf(filter) !== -1;\n                };\n                return valueList.find('.pvtCheckContainer p label span.value').each(function() {\n                  if (accept($(this).text())) {\n                    return $(this).parent().parent().show();\n                  } else {\n                    return $(this).parent().parent().hide();\n                  }\n                });\n              });\n              controls.append($(\"<br>\"));\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n                valueList.find(\"input:visible:not(:checked)\").prop(\"checked\", true).toggleClass(\"changed\");\n                return false;\n              });\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n                valueList.find(\"input:visible:checked\").prop(\"checked\", false).toggleClass(\"changed\");\n                return false;\n              });\n            }\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref1 = values.sort(getSort(opts.sorters, attr));\n            for (n = 0, len2 = ref1.length; n < len2; n++) {\n              value = ref1[n];\n              valueCount = attrValues[attr][value];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[attr], value) < 0);\n              } else if (opts.exclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[attr], value) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr, value]).appendTo(filterItem).bind(\"change\", function() {\n                return $(this).toggleClass(\"changed\");\n              });\n              filterItem.append($(\"<span>\").addClass(\"value\").text(value));\n              filterItem.append($(\"<span>\").addClass(\"count\").text(\"(\" + valueCount + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          closeFilterBox = function() {\n            if (valueList.find(\"[type='checkbox']\").length > valueList.find(\"[type='checkbox']:checked\").length) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            valueList.find('.pvtSearch').val('');\n            valueList.find('.pvtCheckContainer p').show();\n            return valueList.hide();\n          };\n          finalButtons = $(\"<p>\").appendTo(valueList);\n          if (values.length <= opts.menuLimit) {\n            $(\"<button>\", {\n              type: \"button\"\n            }).text(opts.localeStrings.apply).appendTo(finalButtons).bind(\"click\", function() {\n              if (valueList.find(\".changed\").removeClass(\"changed\").length) {\n                refresh();\n              }\n              return closeFilterBox();\n            });\n          }\n          $(\"<button>\", {\n            type: \"button\"\n          }).text(opts.localeStrings.cancel).appendTo(finalButtons).bind(\"click\", function() {\n            valueList.find(\".changed:checked\").removeClass(\"changed\").prop(\"checked\", false);\n            valueList.find(\".changed:not(:checked)\").removeClass(\"changed\").prop(\"checked\", true);\n            return closeFilterBox();\n          });\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", function(e) {\n            var left, ref2, top;\n            ref2 = $(e.currentTarget).position(), left = ref2.left, top = ref2.top;\n            return valueList.css({\n              left: left + 10,\n              top: top + 10\n            }).show();\n          });\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          return unused.append(attrElem).append(valueList);\n        };\n        for (i in shownInDragDrop) {\n          if (!hasProp.call(shownInDragDrop, i)) continue;\n          attr = shownInDragDrop[i];\n          fn1(attr);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref1 = opts.aggregators;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        ordering = {\n          key_a_to_z: {\n            rowSymbol: \"&varr;\",\n            colSymbol: \"&harr;\",\n            next: \"value_a_to_z\"\n          },\n          value_a_to_z: {\n            rowSymbol: \"&darr;\",\n            colSymbol: \"&rarr;\",\n            next: \"value_z_to_a\"\n          },\n          value_z_to_a: {\n            rowSymbol: \"&uarr;\",\n            colSymbol: \"&larr;\",\n            next: \"key_a_to_z\"\n          }\n        };\n        rowOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtRowOrder\").data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].rowSymbol);\n          return refresh();\n        });\n        colOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtColOrder\").data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].colSymbol);\n          return refresh();\n        });\n        $(\"<td>\").addClass('pvtVals').appendTo(tr1).append(aggregator).append(rowOrderArrow).append(colOrderArrow).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tr2);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n          uiTable.find('tr:nth-child(2)').prepend(unused);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(rendererControl).append(unused));\n        }\n        this.html(uiTable);\n        ref2 = opts.cols;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownInDragDrop))));\n        }\n        ref3 = opts.rows;\n        for (o = 0, len3 = ref3.length; o < len3; o++) {\n          x = ref3[o];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownInDragDrop))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var exclusions, inclusions, len4, newDropdown, numInputsToProcess, pivotUIOptions, pvtVals, ref4, ref5, subopts, t, u, unusedAttrsContainer, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass\n            };\n            numInputsToProcess = (ref4 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref4 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = t = 0, ref5 = numInputsToProcess; 0 <= ref5 ? t < ref5 : t > ref5; x = 0 <= ref5 ? ++t : --t) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (u = 0, len4 = shownInAggregators.length; u < len4; u++) {\n                  attr = shownInAggregators[u];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            subopts.rowOrder = rowOrderArrow.data(\"order\");\n            subopts.colOrder = colOrderArrow.data(\"order\");\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, k, ref6, ref7;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref6 = \"\" + ((ref7 = record[k]) != null ? ref7 : 'null'), indexOf.call(excludedItems, ref6) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(materializedInput, subopts);\n            pivotUIOptions = $.extend({}, opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              colOrder: subopts.colOrder,\n              rowOrder: subopts.rowOrder,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        this.trigger(\"pivotTableError\", e);\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"]}