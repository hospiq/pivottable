{"version":3,"sources":["pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","addSeparators","aggregatorTemplates","aggregators","dayNamesEn","derivers","getSort","locales","mthNamesEn","naturalSort","numberFormat","pivotTableRenderer","rd","renderers","rx","rz","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","uniques","arg","attr","uniq","record","ref","call","numInputs","sum","parseFloat","extremes","mode","val","sorter","sorters","ref1","ref2","Math","quantile","q","vals","sort","a","b","floor","ceil","runningStat","ddof","n","m","s","m_new","sqrt","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","fractionOf","wrapped","type","aggIdx","selector","total","row","col","inner","agg","getAggregator","isArray","countUnique","f","listUnique","join","max","min","first","last","median","average","stdev","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Median","Sample Variance","Sample Standard Deviation","Minimum","Maximum","First","Last","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Table Barchart","barchart","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","cancel","totals","vs","by","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","p","_this","as","bs","a1","b1","nas","nbs","String","match","shift","order","l_mapping","mapping","toLowerCase","isFunction","input","ref10","ref11","ref12","ref13","ref3","ref4","ref5","ref6","ref7","ref8","ref9","getRowKeys","getColKeys","sortKeys","arrSort","aggregator","aggregatorName","multiAggAttr","colAttrs","cols","rowAttrs","rows","valAttrs","rowOrder","colOrder","derivedAttributes","filter","emptyValue","rowKeys","colKeys","tree","rowTotals","colTotals","allTotal","map","sorted","forEachRecord","processRecord","addRecord","compactRecord","j","k","len1","results","results1","tblCols","isEmptyObject","v","treatDataArrayAsRecords","each","text","Error","prototype","forEachMatchingRecord","criteria","callback","attrs","sortersArr","keyA","keyB","attrIdx","comparison","_sortByAggVal","attrsOrder","idx","isDesc","isRow","key","keys","sortOrder","sortParts","sortType","sortVal","comparisonKey","_getVal","sortKey","startsWith","fromCharCode","parseInt","flatColKey","flatKey","flatRowKey","getTotalsAgg","isMultiTotals","len2","len3","len4","o","rawKey","rowOrCol","t","totalsAgg","c","r","pivotUtilities","pivotData","colAttr","colAttrIdx","colKeyIdx","createHeader","createTotalsCell","createTotalsRow","getClickHandler","getHeaderClickHandler","len5","len6","len7","len8","rowAttr","rowAttrIdx","rowKeyIdx","spanSize","tbody","td","th","thead","totalAggregator","tr","txt","u","w","y","z","table","clickCallback","filters","e","headerClickCallback","document","createElement","className","keyIdx","maxAttrIdx","len","noDraw","stop","setAttribute","appendChild","textContent","onclick","formatHeader","dataset","innerHTML","createGrandTotalCell","i1","len9","pivot","inputOpts","locale","localeDefaults","dataClass","renderer","rendererOptions","error","console","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","overwrite","attrLength","attrValues","colOrderArrow","existingOpts","fn1","initialRender","materializedInput","ordering","pivotTable","recordsProcessed","refresh","refreshDelayed","rendererControl","rowOrderArrow","shownAttributes","shownInAggregators","shownInDragDrop","tr1","tr2","uiTable","unused","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","hiddenFromAggregators","hiddenFromDragDrop","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","base","class","addClass","appendTo","attrElem","checkContainer","closeFilterBox","controls","filterItem","filterItemExcluded","finalButtons","hasExcludedItem","placeholder","triangleLink","valueCount","valueList","values","hide","accept","accept_gen","trim","accepted","real_filter","substring","find","parent","show","prop","toggleClass","removeClass","left","top","currentTarget","position","css","key_a_to_z","rowSymbol","colSymbol","next","value_a_to_z","value_z_to_a","role","prepend","inArray","rendererName","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","subopts","unusedAttrsContainer","remove","not","excludedItems","inclusionsInfo","children","setTimeout","sortable","update","ui","sender","connectWith","items","scope","colorScaleGenerator","heatmapper","numCols","numRows","nonRed","round","colorScale","forEachCell","elem","barcharter","range","bBase","bgColor","wrapper","height","bottom","right","background-color","padding-left","padding-right","padding","padding-top","text-align"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults =\n            digitsAfterDecimal: 2, scaler: 1,\n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n        opts = $.extend({}, defaults, opts)\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        uniques: (fn, formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> fn(@uniq)\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        extremes: (mode, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            sorter: getSort(data?.sorters, attr)\n            push: (record) ->\n                x = record[attr]\n                if mode in [\"min\", \"max\"]\n                    x = parseFloat(x)\n                    if not isNaN x then @val = Math[mode](x, @val ? x)\n                if mode == \"first\" then @val = x if @sorter(x, @val ? x) <= 0\n                if mode == \"last\"  then @val = x if @sorter(x, @val ? x) >= 0\n            value: -> @val\n            format: (x) -> if isNaN(x) then x else formatter(x)\n            numInputs: if attr? then 0 else 1\n\n        quantile: (q, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            vals: []\n            push: (record) ->\n                x = parseFloat(record[attr])\n                @vals.push(x) if not isNaN(x)\n            value: ->\n                return null if @vals.length == 0\n                @vals.sort((a,b) -> a-b)\n                i = (@vals.length-1)*q\n                return (@vals[Math.floor(i)] + @vals[Math.ceil(i)])/2.0\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        runningStat: (mode=\"mean\", ddof=1, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            n: 0.0, m: 0.0, s: 0.0\n            push: (record) ->\n                x = parseFloat(record[attr])\n                return if isNaN(x)\n                @n += 1.0\n                if @n == 1.0\n                    @m = x\n                else\n                    m_new = @m + (x - @m)/@n\n                    @s = @s + (x - @m)*(x - m_new)\n                    @m = m_new\n            value: ->\n                if mode == \"mean\"\n                    return if @n == 0 then 0/0 else @m\n                return 0 if @n <= ddof\n                switch mode\n                    when \"var\"   then @s/(@n-ddof)\n                    when \"stdev\" then Math.sqrt(@s/(@n-ddof))\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: ->\n                sign = if upper then 1 else -1\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\n                    (1 + 1.642374415149816/@sumDenom)\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        #To support multi-metrics mode, these aggregator factories must be\n        #instantiated with the aggregator index, so that value() knows how\n        # to find the corresponding fractionOf aggregator for the denominator.\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (aggIdx, x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: ->\n                agg = data.getAggregator(@selector...)\n                if $.isArray(agg)\n                    agg = agg[aggIdx]\n                return @inner.value() / agg.inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    aggregatorTemplates.countUnique = (f) -> aggregatorTemplates.uniques(((x) -> x.length), f)\n    aggregatorTemplates.listUnique =  (s) -> aggregatorTemplates.uniques(((x) -> x.join(s)), ((x)->x))\n    aggregatorTemplates.max =         (f) -> aggregatorTemplates.extremes('max', f)\n    aggregatorTemplates.min =         (f) -> aggregatorTemplates.extremes('min', f)\n    aggregatorTemplates.first =       (f) -> aggregatorTemplates.extremes('first', f)\n    aggregatorTemplates.last =        (f) -> aggregatorTemplates.extremes('last', f)\n    aggregatorTemplates.median =      (f) -> aggregatorTemplates.quantile(0.5, f)\n    aggregatorTemplates.average =     (f) -> aggregatorTemplates.runningStat(\"mean\", 1, f)\n    aggregatorTemplates.var =         (ddof, f) -> aggregatorTemplates.runningStat(\"var\", ddof, f)\n    aggregatorTemplates.stdev =       (ddof, f) -> aggregatorTemplates.runningStat(\"stdev\", ddof, f)\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) ->\n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Integer Sum\":          tpl.sum(usFmtInt)\n        \"Average\":              tpl.average(usFmt)\n        \"Median\":               tpl.median(usFmt)\n        \"Sample Variance\":      tpl.var(1, usFmt)\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"First\":                tpl.first(usFmt)\n        \"Last\":                 tpl.last(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":          (data, opts) ->   pivotTableRenderer(data, opts)\n        \"Table Barchart\": (data, opts) -> $(pivotTableRenderer(data, opts)).barchart()\n        \"Heatmap\":        (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\n        \"Row Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\n        \"Col Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\n\n    locales =\n        en:\n            aggregators: aggregators\n            renderers: renderers\n            localeStrings:\n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter values\"\n                apply: \"Apply\"\n                cancel: \"Cancel\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    rx = /(\\d+)|(\\D+)/g\n    rd = /\\d/\n    rz = /^0/\n    naturalSort = (as, bs) =>\n        #nulls first\n        return -1 if bs? and not as?\n        return  1 if as? and not bs?\n\n        #then raw NaNs\n        return -1 if typeof as == \"number\" and isNaN(as)\n        return  1 if typeof bs == \"number\" and isNaN(bs)\n\n        #numbers and numbery strings group together\n        nas = +as\n        nbs = +bs\n        return -1 if nas < nbs\n        return  1 if nas > nbs\n\n        #within that, true numbers before numbery strings\n        return -1 if typeof as == \"number\" and typeof bs != \"number\"\n        return  1 if typeof bs == \"number\" and typeof as != \"number\"\n        return  0 if typeof as == \"number\" and typeof bs == \"number\"\n\n        # 'Infinity' is a textual number, so less than 'A'\n        return -1 if isNaN(nbs) and not isNaN(nas)\n        return  1 if isNaN(nas) and not isNaN(nbs)\n\n        #finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n        a = String(as)\n        b = String(bs)\n        return 0 if a == b\n        return (if a > b then 1 else -1) unless rd.test(a) and rd.test(b)\n\n        #special treatment for strings containing digits\n        a = a.match(rx) #create digits vs non-digit chunks and iterate through\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 != b1\n                if rd.test(a1) and rd.test(b1) #both are digit chunks\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        return a.length - b.length\n\n    sortAs = (order) ->\n        mapping = {}\n        l_mapping = {} # sort lowercased keys similarly\n        for i, x of order\n            mapping[x] = i\n            l_mapping[x.toLowerCase()] = i if typeof x == \"string\"\n        (a, b) ->\n            if mapping[a]? and mapping[b]? then mapping[a] - mapping[b]\n            else if mapping[a]? then -1\n            else if mapping[b]? then 1\n            else if l_mapping[a]? and l_mapping[b]? then l_mapping[a] - l_mapping[b]\n            else if l_mapping[a]? then -1\n            else if l_mapping[b]? then 1\n            else naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        if sorters?\n            if $.isFunction(sorters)\n                sort = sorters(attr)\n                return sort if $.isFunction(sort)\n            else if sorters[attr]?\n                return sorters[attr]\n        return naturalSort\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts = {}) ->\n            @input = input\n\n            #May be an array of aggregators.\n            @aggregator = opts.aggregator ? aggregatorTemplates.count()()\n\n            #Only used by pivotUI(). No multi-aggregator support.\n            @aggregatorName = opts.aggregatorName ? \"Count\"\n\n            #If there are multiple aggregators, this fake attribute is used to generate the extra cols/rows.\n            @multiAggAttr = opts.multiAggAttr ? \"_metrics\"\n\n            #Attributes are the record fields selected by the user. Value attributes are used to instantiate aggregators.\n            @colAttrs = opts.cols ? []\n            @rowAttrs = opts.rows ? []\n            @valAttrs = opts.vals ? []  #Only used by plotly, gchart, and c3 renderers.\n\n            #Insert the multi-agg attribute as the last column if not provided already.\n            if $.isArray(@aggregator) and @multiAggAttr not in @colAttrs and @multiAggAttr not in @rowAttrs\n                @colAttrs.push @multiAggAttr\n\n            #Used when sorting keys by attribute value. See getSort().\n            #Either an object or a fn, e.g.: sorters[attr]=sortFn, or sorters(attr)=sortFn.\n            @sorters = opts.sorters ? {}\n\n            #How keys are sorted. See @sortKeys() for possible values.\n            @rowOrder = opts.rowOrder ? \"key_a_to_z\"\n            @colOrder = opts.colOrder ? \"key_a_to_z\"\n\n            #HIQ client derives its own attributes, and does not use this property.\n            @derivedAttributes = opts.derivedAttributes ? {}\n\n            @filter = opts.filter ? (-> true)\n            @emptyValue = opts.emptyValue ? 'null'\n\n            #Keys are generated tuples of attribute values.\n            @rowKeys = []\n            @colKeys = []\n\n            #Aggregator instances, one per value cell in the table. Created in @processData().\n            #Normal aggregators, at tree[rowKey][colKey].\n            @tree = {}\n            #Row/col total aggregators, at rowTotals[rowKey] and colTotals[colKey].\n            #In multi-metric mode, the values are arrays.\n            @rowTotals = {}\n            @colTotals = {}\n            #Grand total aggregator. In multi-metric mode, this is an array.\n            @allTotal = if not $.isArray(@aggregator) then @aggregator(this, [], []) else @aggregator.map((agg) => agg(this, [], []))\n\n            #Keys are not sorted on init, but when first accessed (e.g. in getRowKeys()).\n            @sorted = false\n\n            @opts = opts\n\n            #Generate table cells and aggregators from records that pass the filter.\n            PivotData.forEachRecord input, opts, (record) =>\n                @processRecord(record) if opts.filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, opts, f) ->\n            if $.isEmptyObject opts.derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) -> \n                    record[k] = v(record) ? record[k] for k, v of opts.derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if !opts.treatDataArrayAsRecords #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof $\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        #Only used by examples/mps_prepop.html. Covered in tests/pivot_spec.coffee.\n        forEachMatchingRecord: (criteria, callback) ->\n            PivotData.forEachRecord @input, @opts, (record) =>\n                return if not @opts.filter(record)\n                for own k, v of criteria\n                    return if v != (record[k] ? @emptyValue)\n                callback(record)\n\n        #Create sort fn that sorts row/col keys by attribute value.\n        #Sorts coarser attributes first, e.g.: [\"A\", 10] < [\"B\", 1] < [\"B\", 5].\n        #`attrs`: Array of attributes on which to sort. Assumes keys are\n        #  composed of these attributes.\n        #`order`: Array of \"+\" or \"-\" values, one per attribute. \"-\"\n        #  indicates a descending sort.\n        arrSort: (attrs, order) =>\n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (keyA,keyB) ->\n                for own attrIdx, sorter of sortersArr\n                    comparison = sorter(keyA[attrIdx], keyB[attrIdx])\n                    if order? and order[attrIdx] == \"-\"\n                        comparison *= -1\n                    return comparison if comparison != 0\n                return 0\n\n        #Sort row and col keys based on @rowOrder and @colOrder. Possible values:\n        #  `key_[-]flatKey`: Sort based on the values for the given key, in \"flat\"\n        #    form (\\0-separated string). Optional \"-\" for descending sort.\n        #  `totals_[-]aggIdx`: Sort based on the totals values. aggIdx is the index\n        #    of the aggregator to use (ignored if not multi-metrics mode). Optional\n        #    \"-\" for descending sort.\n        #  `attr_[+|-]_...`: Sort based on attribute values. There is one asc/desc\n        #    indicator per attribute.\n        #  `value_[a_to_z|z_to_a]`: Legacy sort on totals values. Does not support\n        #    multi-metrics mode.\n        #  `key_[a_to_z]`: Legacy sort on attribute values, all ascending.\n        sortKeys: () =>\n            if @sorted\n                return\n            @sorted = true\n\n            for [sortOrder, keys, attrs], idx in [\n              [@rowOrder, @rowKeys, @rowAttrs],\n              [@colOrder, @colKeys, @colAttrs]\n            ]\n                isRow = idx == 0\n\n                #Sort keys by the value of the aggregator at `comparisonKey`.\n                #If `isDesc` is true, does a descending sort. In multi-metrics\n                #mode, `aggIdx` is the index of the totals aggregator to use.\n                _sortByAggVal = (comparisonKey, isDesc, aggIdx) =>\n                    _getVal = (sortKey) =>\n                        row = if isRow then sortKey else comparisonKey\n                        col = if not isRow then sortKey else comparisonKey\n                        agg = @getAggregator(row, col)\n                        if $.isArray(agg)\n                            agg = agg[aggIdx or 0]\n                        return agg.value()\n\n                    keys.sort (a,b) => naturalSort(_getVal(a), _getVal(b)) * (if isDesc then -1 else 1)\n\n                switch sortOrder\n                    #Legacy sorts.\n                    when \"value_a_to_z\" then _sortByAggVal([])\n                    when \"value_z_to_a\" then _sortByAggVal([], true)\n                    when \"key_a_to_z\" then keys.sort @arrSort(attrs)\n                    else\n                        sortParts = sortOrder.split(\"_\")\n                        sortType = sortParts[0]\n\n                        switch sortType\n                            when \"attr\"\n                                attrsOrder = sortParts.slice(1)\n                                keys.sort @arrSort(attrs, attrsOrder)\n                            else\n                                sortVal = sortParts[1]\n\n                                #Check for descending sort.\n                                isDesc = false\n                                if sortVal.startsWith(\"-\")\n                                    sortVal = sortVal.slice(1)\n                                    isDesc = true\n\n                                if sortType == \"key\"\n                                    key = sortVal.split(String.fromCharCode(0))\n                                    _sortByAggVal(key, isDesc)\n                                else  # sortType == \"totals\"\n                                    aggIdx = parseInt(sortVal)\n                                    _sortByAggVal([], isDesc, aggIdx)\n\n        getColKeys: () =>\n            @sortKeys()\n            return @colKeys\n\n        getRowKeys: () =>\n            @sortKeys()\n            return @rowKeys\n\n        #Generate keys for the record, and update all corresponding aggregators\n        #(i.e., the grand total, row/col total, and normal row+col aggregators).\n        #:aggIdx: In multi-metrics mode, index into the @aggregator array.\n        processRecord: (record, aggIdx) -> #this code is called in a tight loop\n\n            #In multi-metric mode, process record once per aggregator.\n            if $.isArray(@aggregator) and not aggIdx?\n                for agg, aggIdx in @aggregator\n                    record[@multiAggAttr] = aggIdx\n                    @processRecord(record, aggIdx)\n                delete record[@multiAggAttr]  # leave records unmodified\n                return\n\n            aggregator = if aggIdx? then @aggregator[aggIdx] else @aggregator\n\n            colKey = []\n            rowKey = []\n            colKey.push record[x] ? @emptyValue for x in @colAttrs\n            rowKey.push record[x] ? @emptyValue for x in @rowAttrs\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n\n            #Grand total cell.\n            allTotal = if aggIdx? then @allTotal[aggIdx] else @allTotal\n            allTotal.push record\n\n            getTotalsAgg = (rowOrCol, key) =>  #fat arrow to get closure over PivotData object `this`\n                r = if rowOrCol == \"row\" then key else []\n                c = if rowOrCol == \"row\" then [] else key\n                return aggregator(this, r, c)\n\n            for [rowOrCol, attrs, keys, rawKey, flatKey, totals] in [\n              [\"row\", @colAttrs, @rowKeys, rowKey, flatRowKey, @rowTotals],\n              [\"col\", @rowAttrs, @colKeys, colKey, flatColKey, @colTotals]\n            ]\n                isMultiTotals = aggIdx? and @multiAggAttr in attrs\n                if rawKey.length != 0\n                    #First time we've seen this key: create totals aggregator.\n                    if not totals[flatKey]\n                        keys.push rawKey\n                        totals[flatKey] = if isMultiTotals then [] else getTotalsAgg(rowOrCol, rawKey)\n                    if isMultiTotals and not totals[flatKey][aggIdx]\n                        totals[flatKey][aggIdx] = getTotalsAgg(rowOrCol, rawKey)\n                    #Push record to the totals aggregator.\n                    totalsAgg = totals[flatKey]\n                    if isMultiTotals\n                        totalsAgg = totalsAgg[aggIdx]\n                    totalsAgg.push record\n\n            if colKey.length != 0 and rowKey.length != 0\n                if not @tree[flatRowKey]\n                    @tree[flatRowKey] = {}\n                if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey] = aggregator(this, rowKey, colKey)\n                @tree[flatRowKey][flatColKey].push record\n\n        #In multi-metric mode, totals aggregators are arrays.\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            #In multi-metric mode, don't bother creating default aggregators.\n            return if $.isArray(agg) then agg else (agg ? {value: (-> null), format: -> \"\"})\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData}\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n        defaults =\n            table: clickCallback: null\n            localeStrings: totals: \"Totals\"\n            treatDataArrayAsRecords: false\n\n        opts = $.extend(true, {}, defaults, opts)\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        if opts.table.clickCallback\n            getClickHandler = (value, rowKey, colKey) ->\n                filters = {}\n                filters[attr] = colKey[i] for attr, i in colAttrs when colKey[i]?\n                filters[attr] = rowKey[i] for attr, i in rowAttrs when rowKey[i]?\n                return (e) -> opts.table.clickCallback(e, value, filters, pivotData)\n\n        if opts.table.headerClickCallback\n            getHeaderClickHandler = (rowOrCol, type, val) ->\n                return (e) -> opts.table.headerClickCallback(e, rowOrCol, type, val)\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col span size for all cells\n        spanSize = (keys, keyIdx, maxAttrIdx) ->\n            #check if cell should be drawn (e.g., if an attr is coarser than the next one, we only draw that attr cell once)\n            if keyIdx != 0\n                noDraw = true\n                for attrIdx in [0..maxAttrIdx]\n                    if keys[keyIdx-1][attrIdx] != keys[keyIdx][attrIdx]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            #calculate span\n            len = 0\n            while keyIdx+len < keys.length\n                stop = false\n                for attrIdx in [0..maxAttrIdx]\n                    stop = true if keys[keyIdx][attrIdx] != keys[keyIdx+len][attrIdx]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        for colAttr, colAttrIdx in colAttrs\n            tr = document.createElement(\"tr\")\n\n            #create empty upper-left cell spanning both row and col attrs\n            if parseInt(colAttrIdx) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n\n            #create cell for this col attr\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = colAttr\n            if getHeaderClickHandler?\n                th.onclick = getHeaderClickHandler(\"col\", \"attr\", colAttr)\n            tr.appendChild th\n\n            # create cell for each col key (of this attribute)\n            for colKey, colKeyIdx in colKeys\n                x = spanSize(colKeys, parseInt(colKeyIdx), parseInt(colAttrIdx))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    if opts.formatHeader\n                        th.textContent = opts.formatHeader(colKey[colAttrIdx], colAttrs[colAttrIdx]);\n                    else\n                        th.textContent = colKey[colAttrIdx]\n                    th.setAttribute(\"colspan\", x)\n\n                    #Only allow clicking on the finest-grained attribute.\n                    if getHeaderClickHandler? and colAttrIdx == (colAttrs.length - 1)\n                        flatColKey = colKey.join(String.fromCharCode(0))\n                        th.onclick = getHeaderClickHandler(\"col\", \"key\", flatColKey)\n                        #Add key to data-set for post-processing sort icons. CSS selectors\n                        #don't work w/code point 0, but we don't need the separators anyway.\n                        th.dataset.flatKey = colKey.join(\"\")\n\n                    #if this is the last col attr, each col key spans 2 rows (the 2nd being the row attr row)\n                    if parseInt(colAttrIdx) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n\n                    tr.appendChild th\n\n            # create row totals column header\n            if parseInt(colAttrIdx) == 0\n                createHeader = (aggIdx) ->\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                    th.innerHTML = opts.localeStrings.totals\n                    if aggIdx?\n                        th.dataset.aggIdx = aggIdx\n                    th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                    if getHeaderClickHandler?\n                        th.onclick = getHeaderClickHandler(\"col\", \"totals\", aggIdx or 0)\n                    tr.appendChild th\n\n                #In multi-metric mode, if \"Metrics\" attr is a col, there is one row totals col per aggregator.\n                if $.isArray(pivotData.aggregator) and pivotData.multiAggAttr in colAttrs\n                    #Skip row totals if \"Metrics\" is the only col attr: the totals are redundant.\n                    if colAttrs.length > 1\n                        for agg, aggIdx in pivotData.aggregator\n                            createHeader(aggIdx)\n                else\n                    createHeader()\n\n            thead.appendChild tr\n\n        #then a single row for all row attrs\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for rowAttr, i in rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.textContent = rowAttr\n                if getHeaderClickHandler?\n                    th.onclick = getHeaderClickHandler(\"row\", \"attr\", rowAttr)\n                tr.appendChild th\n            th = document.createElement(\"th\")  #empty cell below col attr cells\n            if colAttrs.length ==0\n                #use empty cell for the row totals if there are no col attrs\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                if getHeaderClickHandler?\n                    #there is only one col totals aggregator\n                    th.onclick = getHeaderClickHandler(\"col\", \"totals\", 0)\n            tr.appendChild th\n            thead.appendChild tr\n\n        result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for rowKey, rowKeyIdx in rowKeys\n            tr = document.createElement(\"tr\")\n\n            #create a header cell for each row attr\n            for own rowAttrIdx, txt of rowKey\n                x = spanSize(rowKeys, parseInt(rowKeyIdx), parseInt(rowAttrIdx))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    if opts.formatHeader\n                        th.textContent = opts.formatHeader(txt, rowAttrs[rowAttrIdx]);\n                    else\n                        th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n\n                    #if this is the last row attr, the header cell spans 2 cols (the 2nd being the col attr col)\n                    if parseInt(rowAttrIdx) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",2)\n\n                    if getHeaderClickHandler? and parseInt(rowAttrIdx) == rowAttrs.length-1\n                        flatRowKey = rowKey.join(String.fromCharCode(0))\n                        th.onclick = getHeaderClickHandler(\"row\", \"key\", flatRowKey)\n                        #Add key to data-set for post-processing sort icons. CSS selectors\n                        #don't work w/code point 0, but we don't need the separators anyway.\n                        th.dataset.flatKey = rowKey.join(\"\")\n\n                    tr.appendChild th\n\n            #create a value cell for each col key\n            for colKey, colKeyIdx in colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row#{rowKeyIdx} col#{colKeyIdx}\"\n                td.textContent = aggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, colKey)\n                tr.appendChild td\n\n            #create rightmost row totals cell/s\n            createTotalsCell = (totalAggregator) ->\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal rowTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, [])\n                td.setAttribute(\"data-for\", \"row\"+rowKeyIdx)\n                tr.appendChild td\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            #Multi-metric mode: one totals cell per aggregator.\n            if $.isArray(totalAggregator)\n                #Skip col totals if \"Metrics\" is the only row attr: the totals are redundant.\n                if rowAttrs.length > 1\n                    for agg in totalAggregator\n                        createTotalsCell(agg)\n            else\n                createTotalsCell(totalAggregator)\n\n            tbody.appendChild tr\n\n        #finally, the row for col totals (which includes a grand total cell in the bottom-right)\n        createTotalsRow = (aggIdx) ->\n            tr = document.createElement(\"tr\")\n\n            #left-most header cell\n            th = document.createElement(\"th\")\n            th.className = \"pvtTotalLabel pvtColTotalLabel\"\n            th.innerHTML = opts.localeStrings.totals\n            if aggIdx?\n                th.dataset.aggIdx = aggIdx\n            th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n            if getHeaderClickHandler?\n                th.onclick = getHeaderClickHandler(\"row\", \"totals\", aggIdx or 0)\n            tr.appendChild th\n\n            #value cells, one per col key\n            for colKey, colKeyIdx in colKeys\n                totalAggregator = pivotData.getAggregator([], colKey)\n                if aggIdx?\n                    totalAggregator = totalAggregator[aggIdx]\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal colTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, [], colKey)\n                td.setAttribute(\"data-for\", \"col\"+colKeyIdx)\n                tr.appendChild td\n\n            #right-most grand total cell\n            createGrandTotalCell = (totalAggregator) ->\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtGrandTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, [], [])\n                tr.appendChild td\n\n            #This is an array in multi-metrics mode.\n            totalAggregator = pivotData.getAggregator([], [])\n            if not $.isArray(totalAggregator)\n                createGrandTotalCell(totalAggregator)\n            #Multi-metrics mode, \"metrics\" attr in rows: each grand total cell is created per createTotalsRow() call.\n            else if aggIdx?\n                createGrandTotalCell(totalAggregator[aggIdx])\n            #Multi-metrics mode, \"metrics\" attr in cols, only one totals row: one grand total cell per aggregator.\n            else\n                #Skip row totals if \"Metrics\" is the only col attr: totals are redundant.\n                if colAttrs.length > 1\n                    for agg in totalAggregator\n                        createGrandTotalCell(agg)\n\n            tbody.appendChild tr\n\n        #In multi-metric mode, if the \"Metrics\" attr is a row, there is one\n        #col totals row per aggregator.\n        if $.isArray(pivotData.aggregator) and pivotData.multiAggAttr in rowAttrs\n            #Skip col totals if \"Metrics\" is the only row attr: the totals are redundant.\n            if rowAttrs.length > 1\n                for agg, aggIdx in pivotData.aggregator\n                    createTotalsRow(aggIdx)\n        else\n            createTotalsRow()\n\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, inputOpts, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            cols : [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: {}\n            derivedAttributes: {}\n            renderer: pivotTableRenderer\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n\n        result = null\n        try\n            pivotData = new opts.dataClass(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n\n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            hiddenFromAggregators: []\n            hiddenFromDragDrop: []\n            menuLimit: 500\n            cols: [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            onRefresh: null\n            filter: -> true\n            sorters: {}\n            treatDataArrayAsRecords: false\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n        else\n            opts = existingOpts\n\n        try\n            # do a first pass on the data to cache a materialized copy of any\n            # function-valued inputs and to compute dimension cardinalities\n            attrValues = {}\n            materializedInput = []\n            recordsProcessed = 0\n            PivotData.forEachRecord input, opts, (record) ->\n                return unless opts.filter(record)\n                materializedInput.push(record)\n                for own attr of record\n                    if not attrValues[attr]?\n                        attrValues[attr] = {}\n                        if recordsProcessed > 0\n                            attrValues[attr][@emptyValue] = recordsProcessed\n                for attr of attrValues\n                    value = record[attr] ? @emptyValue\n                    attrValues[attr][value] ?= 0\n                    attrValues[attr][value]++\n                recordsProcessed++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            rendererControl = $(\"<td>\")\n\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\n            shownAttributes = (a for a of attrValues when a not in opts.hiddenAttributes)\n            shownInAggregators = (c for c in shownAttributes when c not in opts.hiddenFromAggregators)\n            shownInDragDrop = (c for c in shownAttributes when c not in opts.hiddenFromDragDrop)\n\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownInDragDrop\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                unused.addClass('pvtVertList')\n            else\n                unused.addClass('pvtHorizList')\n\n            for own i, attr of shownInDragDrop\n                do (attr) ->\n                    values = (v for v of attrValues[attr])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").append(\n                        $(\"<span>\").text(attr),\n                        $(\"<span>\").addClass(\"count\").text(\"(#{values.length})\"),\n                        )\n                    if values.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        if values.length > 5\n                            controls = $(\"<p>\").appendTo(valueList)\n                            sorter = getSort(opts.sorters, attr)\n                            placeholder = opts.localeStrings.filterResults\n                            $(\"<input>\", {type: \"text\"}).appendTo(controls)\n                                .attr({placeholder: placeholder, class: \"pvtSearch\"})\n                                .bind \"keyup\", ->\n                                    filter = $(this).val().toLowerCase().trim()\n                                    accept_gen = (prefix, accepted) -> (v) ->\n                                        real_filter = filter.substring(prefix.length).trim()\n                                        return true if real_filter.length == 0\n                                        return Math.sign(sorter(v.toLowerCase(), real_filter)) in accepted\n                                    accept =\n                                        if      filter.startsWith(\">=\") then accept_gen(\">=\", [1,0])\n                                        else if filter.startsWith(\"<=\") then accept_gen(\"<=\", [-1,0])\n                                        else if filter.startsWith(\">\")  then accept_gen(\">\",  [1])\n                                        else if filter.startsWith(\"<\")  then accept_gen(\"<\",  [-1])\n                                        else if filter.startsWith(\"~\")  then (v) ->\n                                                return true if filter.substring(1).trim().length == 0\n                                                v.toLowerCase().match(filter.substring(1))\n                                        else (v) -> v.toLowerCase().indexOf(filter) != -1\n\n                                    valueList.find('.pvtCheckContainer p label span.value').each ->\n                                        if accept($(this).text())\n                                            $(this).parent().parent().show()\n                                        else\n                                            $(this).parent().parent().hide()\n                            controls.append $(\"<br>\")\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectAll)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:not(:checked)\")\n                                        .prop(\"checked\", true).toggleClass(\"changed\")\n                                    return false\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectNone)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:checked\")\n                                        .prop(\"checked\", false).toggleClass(\"changed\")\n                                    return false\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for value in values.sort(getSort(opts.sorters, attr))\n                             valueCount = attrValues[attr][value]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[attr]\n                                filterItemExcluded = (value not in opts.inclusions[attr])\n                             else if opts.exclusions[attr]\n                                filterItemExcluded = (value in opts.exclusions[attr])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\n                                .appendTo(filterItem)\n                                .bind \"change\", -> $(this).toggleClass(\"changed\")\n                             filterItem.append $(\"<span>\").addClass(\"value\").text(value)\n                             filterItem.append $(\"<span>\").addClass(\"count\").text(\"(\"+valueCount+\")\")\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    closeFilterBox = ->\n                        if valueList.find(\"[type='checkbox']\").length >\n                               valueList.find(\"[type='checkbox']:checked\").length\n                                attrElem.addClass \"pvtFilteredAttribute\"\n                            else\n                                attrElem.removeClass \"pvtFilteredAttribute\"\n\n                            valueList.find('.pvtSearch').val('')\n                            valueList.find('.pvtCheckContainer p').show()\n                            valueList.hide()\n\n                    finalButtons = $(\"<p>\").appendTo(valueList)\n\n                    if values.length <= opts.menuLimit\n                        $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.apply)\n                            .appendTo(finalButtons).bind \"click\", ->\n                                if valueList.find(\".changed\").removeClass(\"changed\").length\n                                    refresh()\n                                closeFilterBox()\n\n                    $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.cancel)\n                        .appendTo(finalButtons).bind \"click\", ->\n                            valueList.find(\".changed:checked\")\n                                .removeClass(\"changed\").prop(\"checked\", false)\n                            valueList.find(\".changed:not(:checked)\")\n                                .removeClass(\"changed\").prop(\"checked\", true)\n                            closeFilterBox()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle')\n                        .html(\" &#x25BE;\").bind \"click\", (e) ->\n                            {left, top} = $(e.currentTarget).position()\n                            valueList.css(left: left+10, top: top+10).show()\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink)\n\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    unused.append(attrElem).append(valueList)\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            ordering =\n                key_a_to_z:   {rowSymbol: \"&varr;\", colSymbol: \"&harr;\", next: \"value_a_to_z\"}\n                value_a_to_z: {rowSymbol: \"&darr;\", colSymbol: \"&rarr;\", next: \"value_z_to_a\"}\n                value_z_to_a: {rowSymbol: \"&uarr;\", colSymbol: \"&larr;\", next: \"key_a_to_z\"}\n\n            rowOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtRowOrder\")\n                .data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].rowSymbol)\n                    refresh()\n\n            colOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtColOrder\")\n                .data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].colSymbol)\n                    refresh()\n\n            $(\"<td>\").addClass('pvtVals')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append(rowOrderArrow)\n              .append(colOrderArrow)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2)\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend unused\n            else\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(unused)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownInAggregators\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n                subopts.rowOrder = rowOrderArrow.data(\"order\")\n                subopts.colOrder = colOrderArrow.data(\"order\")\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\n                    return true\n\n                pivotTable.pivot(materializedInput,subopts)\n                pivotUIOptions = $.extend {}, opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    colOrder: subopts.colOrder\n                    rowOrder: subopts.rowOrder\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer.val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        # given a series of values\n        # must return a function to map a given value to a CSS color\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n        colorScaleGenerator ?= (values) ->\n            min = Math.min(values...)\n            max = Math.max(values...)\n            return (x) ->\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\n                return \"rgb(255,#{nonRed},#{nonRed})\"\n\n        heatmapper = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorScale = colorScaleGenerator(values)\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\n\n        switch scope\n            when \"heatmap\"    then heatmapper \".pvtVal\"\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\"\n        heatmapper \".pvtTotal.colTotal\"\n\n        return this\n\n    ###\n    Barchart post-processing\n    ###\n\n    $.fn.barchart = (opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        barcharter = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            max = Math.max(values...)\n            if max < 0\n                max = 0\n            range = max;\n            min = Math.min(values...)\n            if min < 0\n                range = max - min\n            scaler = (x) -> 100*x/(1.4*range)\n            forEachCell (x, elem) ->\n                text = elem.text()\n                wrapper = $(\"<div>\").css\n                    \"position\": \"relative\"\n                    \"height\": \"55px\"\n                bgColor = \"gray\"\n                bBase = 0\n                if min < 0\n                    bBase = scaler(-min)\n                if x < 0\n                    bBase += scaler(x)\n                    bgColor = \"darkred\"\n                    x = -x\n                wrapper.append $(\"<div>\").css\n                    \"position\": \"absolute\"\n                    \"bottom\": bBase + \"%\"\n                    \"left\": 0\n                    \"right\": 0\n                    \"height\": scaler(x) + \"%\"\n                    \"background-color\": bgColor\n                wrapper.append $(\"<div>\").text(text).css\n                    \"position\":\"relative\"\n                    \"padding-left\":\"5px\"\n                    \"padding-right\":\"5px\"\n\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\n\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\n        barcharter \".pvtTotal.colTotal\"\n\n        return this\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, addSeparators, aggregatorTemplates, aggregators, dayNamesEn, derivers, getSort, locales, mthNamesEn, naturalSort, numberFormat, pivotTableRenderer, rd, renderers, rx, rz, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\"\n      };\n      opts = $.extend({}, defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      uniques: function(fn, formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return fn(this.uniq);\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      extremes: function(mode, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              sorter: getSort(data != null ? data.sorters : void 0, attr),\n              push: function(record) {\n                var ref, ref1, ref2, x;\n                x = record[attr];\n                if (mode === \"min\" || mode === \"max\") {\n                  x = parseFloat(x);\n                  if (!isNaN(x)) {\n                    this.val = Math[mode](x, (ref = this.val) != null ? ref : x);\n                  }\n                }\n                if (mode === \"first\") {\n                  if (this.sorter(x, (ref1 = this.val) != null ? ref1 : x) <= 0) {\n                    this.val = x;\n                  }\n                }\n                if (mode === \"last\") {\n                  if (this.sorter(x, (ref2 = this.val) != null ? ref2 : x) >= 0) {\n                    return this.val = x;\n                  }\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: function(x) {\n                if (isNaN(x)) {\n                  return x;\n                } else {\n                  return formatter(x);\n                }\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      quantile: function(q, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              vals: [],\n              push: function(record) {\n                var x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.vals.push(x);\n                }\n              },\n              value: function() {\n                var i;\n                if (this.vals.length === 0) {\n                  return null;\n                }\n                this.vals.sort(function(a, b) {\n                  return a - b;\n                });\n                i = (this.vals.length - 1) * q;\n                return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      runningStat: function(mode, ddof, formatter) {\n        if (mode == null) {\n          mode = \"mean\";\n        }\n        if (ddof == null) {\n          ddof = 1;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              n: 0.0,\n              m: 0.0,\n              s: 0.0,\n              push: function(record) {\n                var m_new, x;\n                x = parseFloat(record[attr]);\n                if (isNaN(x)) {\n                  return;\n                }\n                this.n += 1.0;\n                if (this.n === 1.0) {\n                  return this.m = x;\n                } else {\n                  m_new = this.m + (x - this.m) / this.n;\n                  this.s = this.s + (x - this.m) * (x - m_new);\n                  return this.m = m_new;\n                }\n              },\n              value: function() {\n                if (mode === \"mean\") {\n                  if (this.n === 0) {\n                    return 0 / 0;\n                  } else {\n                    return this.m;\n                  }\n                }\n                if (this.n <= ddof) {\n                  return 0;\n                }\n                switch (mode) {\n                  case \"var\":\n                    return this.s / (this.n - ddof);\n                  case \"stdev\":\n                    return Math.sqrt(this.s / (this.n - ddof));\n                }\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var aggIdx, x;\n          aggIdx = arguments[0], x = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                var agg;\n                agg = data.getAggregator.apply(data, this.selector);\n                if ($.isArray(agg)) {\n                  agg = agg[aggIdx];\n                }\n                return this.inner.value() / agg.inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregatorTemplates.countUnique = function(f) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.length;\n      }), f);\n    };\n    aggregatorTemplates.listUnique = function(s) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.join(s);\n      }), (function(x) {\n        return x;\n      }));\n    };\n    aggregatorTemplates.max = function(f) {\n      return aggregatorTemplates.extremes('max', f);\n    };\n    aggregatorTemplates.min = function(f) {\n      return aggregatorTemplates.extremes('min', f);\n    };\n    aggregatorTemplates.first = function(f) {\n      return aggregatorTemplates.extremes('first', f);\n    };\n    aggregatorTemplates.last = function(f) {\n      return aggregatorTemplates.extremes('last', f);\n    };\n    aggregatorTemplates.median = function(f) {\n      return aggregatorTemplates.quantile(0.5, f);\n    };\n    aggregatorTemplates.average = function(f) {\n      return aggregatorTemplates.runningStat(\"mean\", 1, f);\n    };\n    aggregatorTemplates[\"var\"] = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"var\", ddof, f);\n    };\n    aggregatorTemplates.stdev = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"stdev\", ddof, f);\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Median\": tpl.median(usFmt),\n        \"Sample Variance\": tpl[\"var\"](1, usFmt),\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"First\": tpl.first(usFmt),\n        \"Last\": tpl.last(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Table Barchart\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).barchart();\n      },\n      \"Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\", opts);\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts);\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts);\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter values\",\n          apply: \"Apply\",\n          cancel: \"Cancel\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    rx = /(\\d+)|(\\D+)/g;\n    rd = /\\d/;\n    rz = /^0/;\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, nas, nbs;\n        if ((bs != null) && (as == null)) {\n          return -1;\n        }\n        if ((as != null) && (bs == null)) {\n          return 1;\n        }\n        if (typeof as === \"number\" && isNaN(as)) {\n          return -1;\n        }\n        if (typeof bs === \"number\" && isNaN(bs)) {\n          return 1;\n        }\n        nas = +as;\n        nbs = +bs;\n        if (nas < nbs) {\n          return -1;\n        }\n        if (nas > nbs) {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs !== \"number\") {\n          return -1;\n        }\n        if (typeof bs === \"number\" && typeof as !== \"number\") {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs === \"number\") {\n          return 0;\n        }\n        if (isNaN(nbs) && !isNaN(nas)) {\n          return -1;\n        }\n        if (isNaN(nas) && !isNaN(nbs)) {\n          return 1;\n        }\n        a = String(as);\n        b = String(bs);\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, l_mapping, mapping, x;\n      mapping = {};\n      l_mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n        if (typeof x === \"string\") {\n          l_mapping[x.toLowerCase()] = i;\n        }\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else if ((l_mapping[a] != null) && (l_mapping[b] != null)) {\n          return l_mapping[a] - l_mapping[b];\n        } else if (l_mapping[a] != null) {\n          return -1;\n        } else if (l_mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      if (sorters != null) {\n        if ($.isFunction(sorters)) {\n          sort = sorters(attr);\n          if ($.isFunction(sort)) {\n            return sort;\n          }\n        } else if (sorters[attr] != null) {\n          return sorters[attr];\n        }\n      }\n      return naturalSort;\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        var ref, ref1, ref10, ref11, ref12, ref13, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;\n        if (opts == null) {\n          opts = {};\n        }\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.input = input;\n        this.aggregator = (ref = opts.aggregator) != null ? ref : aggregatorTemplates.count()();\n        this.aggregatorName = (ref1 = opts.aggregatorName) != null ? ref1 : \"Count\";\n        this.multiAggAttr = (ref2 = opts.multiAggAttr) != null ? ref2 : \"_metrics\";\n        this.colAttrs = (ref3 = opts.cols) != null ? ref3 : [];\n        this.rowAttrs = (ref4 = opts.rows) != null ? ref4 : [];\n        this.valAttrs = (ref5 = opts.vals) != null ? ref5 : [];\n        if ($.isArray(this.aggregator) && (ref6 = this.multiAggAttr, indexOf.call(this.colAttrs, ref6) < 0) && (ref7 = this.multiAggAttr, indexOf.call(this.rowAttrs, ref7) < 0)) {\n          this.colAttrs.push(this.multiAggAttr);\n        }\n        this.sorters = (ref8 = opts.sorters) != null ? ref8 : {};\n        this.rowOrder = (ref9 = opts.rowOrder) != null ? ref9 : \"key_a_to_z\";\n        this.colOrder = (ref10 = opts.colOrder) != null ? ref10 : \"key_a_to_z\";\n        this.derivedAttributes = (ref11 = opts.derivedAttributes) != null ? ref11 : {};\n        this.filter = (ref12 = opts.filter) != null ? ref12 : (function() {\n          return true;\n        });\n        this.emptyValue = (ref13 = opts.emptyValue) != null ? ref13 : 'null';\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.tree = {};\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = !$.isArray(this.aggregator) ? this.aggregator(this, [], []) : this.aggregator.map((function(_this) {\n          return function(agg) {\n            return agg(_this, [], []);\n          };\n        })(this));\n        this.sorted = false;\n        this.opts = opts;\n        PivotData.forEachRecord(input, opts, (function(_this) {\n          return function(record) {\n            if (opts.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, opts, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(opts.derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, ref1, v;\n            ref = opts.derivedAttributes;\n            for (k in ref) {\n              v = ref[k];\n              record[k] = (ref1 = v(record)) != null ? ref1 : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if (!opts.treatDataArrayAsRecords) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof $) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.prototype.forEachMatchingRecord = function(criteria, callback) {\n        return PivotData.forEachRecord(this.input, this.opts, (function(_this) {\n          return function(record) {\n            var k, ref, v;\n            if (!_this.opts.filter(record)) {\n              return;\n            }\n            for (k in criteria) {\n              if (!hasProp.call(criteria, k)) continue;\n              v = criteria[k];\n              if (v !== ((ref = record[k]) != null ? ref : _this.emptyValue)) {\n                return;\n              }\n            }\n            return callback(record);\n          };\n        })(this));\n      };\n\n      PivotData.prototype.arrSort = function(attrs, order) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(keyA, keyB) {\n          var attrIdx, comparison, sorter;\n          for (attrIdx in sortersArr) {\n            if (!hasProp.call(sortersArr, attrIdx)) continue;\n            sorter = sortersArr[attrIdx];\n            comparison = sorter(keyA[attrIdx], keyB[attrIdx]);\n            if ((order != null) && order[attrIdx] === \"-\") {\n              comparison *= -1;\n            }\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        var _sortByAggVal, aggIdx, attrs, attrsOrder, idx, isDesc, isRow, key, keys, l, len1, ref, ref1, results, sortOrder, sortParts, sortType, sortVal;\n        if (this.sorted) {\n          return;\n        }\n        this.sorted = true;\n        ref = [[this.rowOrder, this.rowKeys, this.rowAttrs], [this.colOrder, this.colKeys, this.colAttrs]];\n        results = [];\n        for (idx = l = 0, len1 = ref.length; l < len1; idx = ++l) {\n          ref1 = ref[idx], sortOrder = ref1[0], keys = ref1[1], attrs = ref1[2];\n          isRow = idx === 0;\n          _sortByAggVal = (function(_this) {\n            return function(comparisonKey, isDesc, aggIdx) {\n              var _getVal;\n              _getVal = function(sortKey) {\n                var agg, col, row;\n                row = isRow ? sortKey : comparisonKey;\n                col = !isRow ? sortKey : comparisonKey;\n                agg = _this.getAggregator(row, col);\n                if ($.isArray(agg)) {\n                  agg = agg[aggIdx || 0];\n                }\n                return agg.value();\n              };\n              return keys.sort(function(a, b) {\n                return naturalSort(_getVal(a), _getVal(b)) * (isDesc ? -1 : 1);\n              });\n            };\n          })(this);\n          switch (sortOrder) {\n            case \"value_a_to_z\":\n              results.push(_sortByAggVal([]));\n              break;\n            case \"value_z_to_a\":\n              results.push(_sortByAggVal([], true));\n              break;\n            case \"key_a_to_z\":\n              results.push(keys.sort(this.arrSort(attrs)));\n              break;\n            default:\n              sortParts = sortOrder.split(\"_\");\n              sortType = sortParts[0];\n              switch (sortType) {\n                case \"attr\":\n                  attrsOrder = sortParts.slice(1);\n                  results.push(keys.sort(this.arrSort(attrs, attrsOrder)));\n                  break;\n                default:\n                  sortVal = sortParts[1];\n                  isDesc = false;\n                  if (sortVal.startsWith(\"-\")) {\n                    sortVal = sortVal.slice(1);\n                    isDesc = true;\n                  }\n                  if (sortType === \"key\") {\n                    key = sortVal.split(String.fromCharCode(0));\n                    results.push(_sortByAggVal(key, isDesc));\n                  } else {\n                    aggIdx = parseInt(sortVal);\n                    results.push(_sortByAggVal([], isDesc, aggIdx));\n                  }\n              }\n          }\n        }\n        return results;\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        this.sortKeys();\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        this.sortKeys();\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record, aggIdx) {\n        var agg, aggregator, allTotal, attrs, colKey, flatColKey, flatKey, flatRowKey, getTotalsAgg, isMultiTotals, keys, l, len1, len2, len3, len4, n, o, rawKey, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, rowKey, rowOrCol, t, totals, totalsAgg, x;\n        if ($.isArray(this.aggregator) && (aggIdx == null)) {\n          ref = this.aggregator;\n          for (aggIdx = l = 0, len1 = ref.length; l < len1; aggIdx = ++l) {\n            agg = ref[aggIdx];\n            record[this.multiAggAttr] = aggIdx;\n            this.processRecord(record, aggIdx);\n          }\n          delete record[this.multiAggAttr];\n          return;\n        }\n        aggregator = aggIdx != null ? this.aggregator[aggIdx] : this.aggregator;\n        colKey = [];\n        rowKey = [];\n        ref1 = this.colAttrs;\n        for (n = 0, len2 = ref1.length; n < len2; n++) {\n          x = ref1[n];\n          colKey.push((ref2 = record[x]) != null ? ref2 : this.emptyValue);\n        }\n        ref3 = this.rowAttrs;\n        for (o = 0, len3 = ref3.length; o < len3; o++) {\n          x = ref3[o];\n          rowKey.push((ref4 = record[x]) != null ? ref4 : this.emptyValue);\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        allTotal = aggIdx != null ? this.allTotal[aggIdx] : this.allTotal;\n        allTotal.push(record);\n        getTotalsAgg = (function(_this) {\n          return function(rowOrCol, key) {\n            var c, r;\n            r = rowOrCol === \"row\" ? key : [];\n            c = rowOrCol === \"row\" ? [] : key;\n            return aggregator(_this, r, c);\n          };\n        })(this);\n        ref5 = [[\"row\", this.colAttrs, this.rowKeys, rowKey, flatRowKey, this.rowTotals], [\"col\", this.rowAttrs, this.colKeys, colKey, flatColKey, this.colTotals]];\n        for (t = 0, len4 = ref5.length; t < len4; t++) {\n          ref6 = ref5[t], rowOrCol = ref6[0], attrs = ref6[1], keys = ref6[2], rawKey = ref6[3], flatKey = ref6[4], totals = ref6[5];\n          isMultiTotals = (aggIdx != null) && (ref7 = this.multiAggAttr, indexOf.call(attrs, ref7) >= 0);\n          if (rawKey.length !== 0) {\n            if (!totals[flatKey]) {\n              keys.push(rawKey);\n              totals[flatKey] = isMultiTotals ? [] : getTotalsAgg(rowOrCol, rawKey);\n            }\n            if (isMultiTotals && !totals[flatKey][aggIdx]) {\n              totals[flatKey][aggIdx] = getTotalsAgg(rowOrCol, rawKey);\n            }\n            totalsAgg = totals[flatKey];\n            if (isMultiTotals) {\n              totalsAgg = totalsAgg[aggIdx];\n            }\n            totalsAgg.push(record);\n          }\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = aggregator(this, rowKey, colKey);\n          }\n          return this.tree[flatRowKey][flatColKey].push(record);\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        if ($.isArray(agg)) {\n          return agg;\n        } else {\n          return agg != null ? agg : {\n            value: (function() {\n              return null;\n            }),\n            format: function() {\n              return \"\";\n            }\n          };\n        }\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var agg, aggIdx, aggregator, colAttr, colAttrIdx, colAttrs, colKey, colKeyIdx, colKeys, createHeader, createTotalsCell, createTotalsRow, defaults, flatColKey, flatRowKey, getClickHandler, getHeaderClickHandler, i, l, len1, len2, len3, len4, len5, len6, len7, len8, n, o, ref, ref1, ref2, ref3, result, rowAttr, rowAttrIdx, rowAttrs, rowKey, rowKeyIdx, rowKeys, spanSize, t, tbody, td, th, thead, totalAggregator, tr, txt, u, val, w, x, y, z;\n      defaults = {\n        table: {\n          clickCallback: null\n        },\n        localeStrings: {\n          totals: \"Totals\"\n        },\n        treatDataArrayAsRecords: false\n      };\n      opts = $.extend(true, {}, defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      if (opts.table.clickCallback) {\n        getClickHandler = function(value, rowKey, colKey) {\n          var attr, filters, i, l, len1, len2, n;\n          filters = {};\n          for (i = l = 0, len1 = colAttrs.length; l < len1; i = ++l) {\n            attr = colAttrs[i];\n            if (colKey[i] != null) {\n              filters[attr] = colKey[i];\n            }\n          }\n          for (i = n = 0, len2 = rowAttrs.length; n < len2; i = ++n) {\n            attr = rowAttrs[i];\n            if (rowKey[i] != null) {\n              filters[attr] = rowKey[i];\n            }\n          }\n          return function(e) {\n            return opts.table.clickCallback(e, value, filters, pivotData);\n          };\n        };\n      }\n      if (opts.table.headerClickCallback) {\n        getHeaderClickHandler = function(rowOrCol, type, val) {\n          return function(e) {\n            return opts.table.headerClickCallback(e, rowOrCol, type, val);\n          };\n        };\n      }\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(keys, keyIdx, maxAttrIdx) {\n        var attrIdx, l, len, n, noDraw, ref, ref1, stop;\n        if (keyIdx !== 0) {\n          noDraw = true;\n          for (attrIdx = l = 0, ref = maxAttrIdx; 0 <= ref ? l <= ref : l >= ref; attrIdx = 0 <= ref ? ++l : --l) {\n            if (keys[keyIdx - 1][attrIdx] !== keys[keyIdx][attrIdx]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (keyIdx + len < keys.length) {\n          stop = false;\n          for (attrIdx = n = 0, ref1 = maxAttrIdx; 0 <= ref1 ? n <= ref1 : n >= ref1; attrIdx = 0 <= ref1 ? ++n : --n) {\n            if (keys[keyIdx][attrIdx] !== keys[keyIdx + len][attrIdx]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      for (colAttrIdx = l = 0, len1 = colAttrs.length; l < len1; colAttrIdx = ++l) {\n        colAttr = colAttrs[colAttrIdx];\n        tr = document.createElement(\"tr\");\n        if (parseInt(colAttrIdx) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = colAttr;\n        if (getHeaderClickHandler != null) {\n          th.onclick = getHeaderClickHandler(\"col\", \"attr\", colAttr);\n        }\n        tr.appendChild(th);\n        for (colKeyIdx = n = 0, len2 = colKeys.length; n < len2; colKeyIdx = ++n) {\n          colKey = colKeys[colKeyIdx];\n          x = spanSize(colKeys, parseInt(colKeyIdx), parseInt(colAttrIdx));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            if (opts.formatHeader) {\n              th.textContent = opts.formatHeader(colKey[colAttrIdx], colAttrs[colAttrIdx]);\n            } else {\n              th.textContent = colKey[colAttrIdx];\n            }\n            th.setAttribute(\"colspan\", x);\n            if ((getHeaderClickHandler != null) && colAttrIdx === (colAttrs.length - 1)) {\n              flatColKey = colKey.join(String.fromCharCode(0));\n              th.onclick = getHeaderClickHandler(\"col\", \"key\", flatColKey);\n              th.dataset.flatKey = colKey.join(\"\");\n            }\n            if (parseInt(colAttrIdx) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(colAttrIdx) === 0) {\n          createHeader = function(aggIdx) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n            th.innerHTML = opts.localeStrings.totals;\n            if (aggIdx != null) {\n              th.dataset.aggIdx = aggIdx;\n            }\n            th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n            if (getHeaderClickHandler != null) {\n              th.onclick = getHeaderClickHandler(\"col\", \"totals\", aggIdx || 0);\n            }\n            return tr.appendChild(th);\n          };\n          if ($.isArray(pivotData.aggregator) && (ref = pivotData.multiAggAttr, indexOf.call(colAttrs, ref) >= 0)) {\n            if (colAttrs.length > 1) {\n              ref1 = pivotData.aggregator;\n              for (aggIdx = o = 0, len3 = ref1.length; o < len3; aggIdx = ++o) {\n                agg = ref1[aggIdx];\n                createHeader(aggIdx);\n              }\n            }\n          } else {\n            createHeader();\n          }\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i = t = 0, len4 = rowAttrs.length; t < len4; i = ++t) {\n          rowAttr = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = rowAttr;\n          if (getHeaderClickHandler != null) {\n            th.onclick = getHeaderClickHandler(\"row\", \"attr\", rowAttr);\n          }\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          if (getHeaderClickHandler != null) {\n            th.onclick = getHeaderClickHandler(\"col\", \"totals\", 0);\n          }\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      for (rowKeyIdx = u = 0, len5 = rowKeys.length; u < len5; rowKeyIdx = ++u) {\n        rowKey = rowKeys[rowKeyIdx];\n        tr = document.createElement(\"tr\");\n        for (rowAttrIdx in rowKey) {\n          if (!hasProp.call(rowKey, rowAttrIdx)) continue;\n          txt = rowKey[rowAttrIdx];\n          x = spanSize(rowKeys, parseInt(rowKeyIdx), parseInt(rowAttrIdx));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            if (opts.formatHeader) {\n              th.textContent = opts.formatHeader(txt, rowAttrs[rowAttrIdx]);\n            } else {\n              th.textContent = txt;\n            }\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(rowAttrIdx) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            if ((getHeaderClickHandler != null) && parseInt(rowAttrIdx) === rowAttrs.length - 1) {\n              flatRowKey = rowKey.join(String.fromCharCode(0));\n              th.onclick = getHeaderClickHandler(\"row\", \"key\", flatRowKey);\n              th.dataset.flatKey = rowKey.join(\"\");\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (colKeyIdx = w = 0, len6 = colKeys.length; w < len6; colKeyIdx = ++w) {\n          colKey = colKeys[colKeyIdx];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + rowKeyIdx + \" col\" + colKeyIdx;\n          td.textContent = aggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, colKey);\n          }\n          tr.appendChild(td);\n        }\n        createTotalsCell = function(totalAggregator) {\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal rowTotal\";\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, []);\n          }\n          td.setAttribute(\"data-for\", \"row\" + rowKeyIdx);\n          return tr.appendChild(td);\n        };\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        if ($.isArray(totalAggregator)) {\n          if (rowAttrs.length > 1) {\n            for (y = 0, len7 = totalAggregator.length; y < len7; y++) {\n              agg = totalAggregator[y];\n              createTotalsCell(agg);\n            }\n          }\n        } else {\n          createTotalsCell(totalAggregator);\n        }\n        tbody.appendChild(tr);\n      }\n      createTotalsRow = function(aggIdx) {\n        var createGrandTotalCell, i1, len8, len9, z;\n        tr = document.createElement(\"tr\");\n        th = document.createElement(\"th\");\n        th.className = \"pvtTotalLabel pvtColTotalLabel\";\n        th.innerHTML = opts.localeStrings.totals;\n        if (aggIdx != null) {\n          th.dataset.aggIdx = aggIdx;\n        }\n        th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n        if (getHeaderClickHandler != null) {\n          th.onclick = getHeaderClickHandler(\"row\", \"totals\", aggIdx || 0);\n        }\n        tr.appendChild(th);\n        for (colKeyIdx = z = 0, len8 = colKeys.length; z < len8; colKeyIdx = ++z) {\n          colKey = colKeys[colKeyIdx];\n          totalAggregator = pivotData.getAggregator([], colKey);\n          if (aggIdx != null) {\n            totalAggregator = totalAggregator[aggIdx];\n          }\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal colTotal\";\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, [], colKey);\n          }\n          td.setAttribute(\"data-for\", \"col\" + colKeyIdx);\n          tr.appendChild(td);\n        }\n        createGrandTotalCell = function(totalAggregator) {\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtGrandTotal\";\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, [], []);\n          }\n          return tr.appendChild(td);\n        };\n        totalAggregator = pivotData.getAggregator([], []);\n        if (!$.isArray(totalAggregator)) {\n          createGrandTotalCell(totalAggregator);\n        } else if (aggIdx != null) {\n          createGrandTotalCell(totalAggregator[aggIdx]);\n        } else {\n          if (colAttrs.length > 1) {\n            for (i1 = 0, len9 = totalAggregator.length; i1 < len9; i1++) {\n              agg = totalAggregator[i1];\n              createGrandTotalCell(agg);\n            }\n          }\n        }\n        return tbody.appendChild(tr);\n      };\n      if ($.isArray(pivotData.aggregator) && (ref2 = pivotData.multiAggAttr, indexOf.call(rowAttrs, ref2) >= 0)) {\n        if (rowAttrs.length > 1) {\n          ref3 = pivotData.aggregator;\n          for (aggIdx = z = 0, len8 = ref3.length; z < len8; aggIdx = ++z) {\n            agg = ref3[aggIdx];\n            createTotalsRow(aggIdx);\n          }\n        }\n      } else {\n        createTotalsRow();\n      }\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, inputOpts, locale) {\n      var defaults, e, localeDefaults, localeStrings, opts, pivotData, result, x;\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      result = null;\n      try {\n        pivotData = new opts.dataClass(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggregator, attr, attrLength, attrValues, c, colOrderArrow, defaults, e, existingOpts, fn1, i, initialRender, l, len1, len2, len3, localeDefaults, localeStrings, materializedInput, n, o, opts, ordering, pivotTable, recordsProcessed, ref, ref1, ref2, ref3, refresh, refreshDelayed, renderer, rendererControl, rowOrderArrow, shownAttributes, shownInAggregators, shownInDragDrop, tr1, tr2, uiTable, unused, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        hiddenFromAggregators: [],\n        hiddenFromDragDrop: [],\n        menuLimit: 500,\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        onRefresh: null,\n        filter: function() {\n          return true;\n        },\n        sorters: {},\n        treatDataArrayAsRecords: false\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        attrValues = {};\n        materializedInput = [];\n        recordsProcessed = 0;\n        PivotData.forEachRecord(input, opts, function(record) {\n          var attr, base, ref, value;\n          if (!opts.filter(record)) {\n            return;\n          }\n          materializedInput.push(record);\n          for (attr in record) {\n            if (!hasProp.call(record, attr)) continue;\n            if (attrValues[attr] == null) {\n              attrValues[attr] = {};\n              if (recordsProcessed > 0) {\n                attrValues[attr][this.emptyValue] = recordsProcessed;\n              }\n            }\n          }\n          for (attr in attrValues) {\n            value = (ref = record[attr]) != null ? ref : this.emptyValue;\n            if ((base = attrValues[attr])[value] == null) {\n              base[value] = 0;\n            }\n            attrValues[attr][value]++;\n          }\n          return recordsProcessed++;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<td>\");\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref = opts.renderers;\n        for (x in ref) {\n          if (!hasProp.call(ref, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var results;\n          results = [];\n          for (a in attrValues) {\n            if (indexOf.call(opts.hiddenAttributes, a) < 0) {\n              results.push(a);\n            }\n          }\n          return results;\n        })();\n        shownInAggregators = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            c = shownAttributes[l];\n            if (indexOf.call(opts.hiddenFromAggregators, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        shownInDragDrop = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            c = shownAttributes[l];\n            if (indexOf.call(opts.hiddenFromDragDrop, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (l = 0, len1 = shownInDragDrop.length; l < len1; l++) {\n            a = shownInDragDrop[l];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          unused.addClass('pvtVertList');\n        } else {\n          unused.addClass('pvtHorizList');\n        }\n        fn1 = function(attr) {\n          var attrElem, checkContainer, closeFilterBox, controls, filterItem, filterItemExcluded, finalButtons, hasExcludedItem, len2, n, placeholder, ref1, sorter, triangleLink, v, value, valueCount, valueList, values;\n          values = (function() {\n            var results;\n            results = [];\n            for (v in attrValues[attr]) {\n              results.push(v);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").append($(\"<span>\").text(attr), $(\"<span>\").addClass(\"count\").text(\"(\" + values.length + \")\")));\n          if (values.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            if (values.length > 5) {\n              controls = $(\"<p>\").appendTo(valueList);\n              sorter = getSort(opts.sorters, attr);\n              placeholder = opts.localeStrings.filterResults;\n              $(\"<input>\", {\n                type: \"text\"\n              }).appendTo(controls).attr({\n                placeholder: placeholder,\n                \"class\": \"pvtSearch\"\n              }).bind(\"keyup\", function() {\n                var accept, accept_gen, filter;\n                filter = $(this).val().toLowerCase().trim();\n                accept_gen = function(prefix, accepted) {\n                  return function(v) {\n                    var real_filter, ref1;\n                    real_filter = filter.substring(prefix.length).trim();\n                    if (real_filter.length === 0) {\n                      return true;\n                    }\n                    return ref1 = Math.sign(sorter(v.toLowerCase(), real_filter)), indexOf.call(accepted, ref1) >= 0;\n                  };\n                };\n                accept = filter.startsWith(\">=\") ? accept_gen(\">=\", [1, 0]) : filter.startsWith(\"<=\") ? accept_gen(\"<=\", [-1, 0]) : filter.startsWith(\">\") ? accept_gen(\">\", [1]) : filter.startsWith(\"<\") ? accept_gen(\"<\", [-1]) : filter.startsWith(\"~\") ? function(v) {\n                  if (filter.substring(1).trim().length === 0) {\n                    return true;\n                  }\n                  return v.toLowerCase().match(filter.substring(1));\n                } : function(v) {\n                  return v.toLowerCase().indexOf(filter) !== -1;\n                };\n                return valueList.find('.pvtCheckContainer p label span.value').each(function() {\n                  if (accept($(this).text())) {\n                    return $(this).parent().parent().show();\n                  } else {\n                    return $(this).parent().parent().hide();\n                  }\n                });\n              });\n              controls.append($(\"<br>\"));\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n                valueList.find(\"input:visible:not(:checked)\").prop(\"checked\", true).toggleClass(\"changed\");\n                return false;\n              });\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n                valueList.find(\"input:visible:checked\").prop(\"checked\", false).toggleClass(\"changed\");\n                return false;\n              });\n            }\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref1 = values.sort(getSort(opts.sorters, attr));\n            for (n = 0, len2 = ref1.length; n < len2; n++) {\n              value = ref1[n];\n              valueCount = attrValues[attr][value];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[attr], value) < 0);\n              } else if (opts.exclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[attr], value) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr, value]).appendTo(filterItem).bind(\"change\", function() {\n                return $(this).toggleClass(\"changed\");\n              });\n              filterItem.append($(\"<span>\").addClass(\"value\").text(value));\n              filterItem.append($(\"<span>\").addClass(\"count\").text(\"(\" + valueCount + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          closeFilterBox = function() {\n            if (valueList.find(\"[type='checkbox']\").length > valueList.find(\"[type='checkbox']:checked\").length) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            valueList.find('.pvtSearch').val('');\n            valueList.find('.pvtCheckContainer p').show();\n            return valueList.hide();\n          };\n          finalButtons = $(\"<p>\").appendTo(valueList);\n          if (values.length <= opts.menuLimit) {\n            $(\"<button>\", {\n              type: \"button\"\n            }).text(opts.localeStrings.apply).appendTo(finalButtons).bind(\"click\", function() {\n              if (valueList.find(\".changed\").removeClass(\"changed\").length) {\n                refresh();\n              }\n              return closeFilterBox();\n            });\n          }\n          $(\"<button>\", {\n            type: \"button\"\n          }).text(opts.localeStrings.cancel).appendTo(finalButtons).bind(\"click\", function() {\n            valueList.find(\".changed:checked\").removeClass(\"changed\").prop(\"checked\", false);\n            valueList.find(\".changed:not(:checked)\").removeClass(\"changed\").prop(\"checked\", true);\n            return closeFilterBox();\n          });\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", function(e) {\n            var left, ref2, top;\n            ref2 = $(e.currentTarget).position(), left = ref2.left, top = ref2.top;\n            return valueList.css({\n              left: left + 10,\n              top: top + 10\n            }).show();\n          });\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          return unused.append(attrElem).append(valueList);\n        };\n        for (i in shownInDragDrop) {\n          if (!hasProp.call(shownInDragDrop, i)) continue;\n          attr = shownInDragDrop[i];\n          fn1(attr);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref1 = opts.aggregators;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        ordering = {\n          key_a_to_z: {\n            rowSymbol: \"&varr;\",\n            colSymbol: \"&harr;\",\n            next: \"value_a_to_z\"\n          },\n          value_a_to_z: {\n            rowSymbol: \"&darr;\",\n            colSymbol: \"&rarr;\",\n            next: \"value_z_to_a\"\n          },\n          value_z_to_a: {\n            rowSymbol: \"&uarr;\",\n            colSymbol: \"&larr;\",\n            next: \"key_a_to_z\"\n          }\n        };\n        rowOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtRowOrder\").data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].rowSymbol);\n          return refresh();\n        });\n        colOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtColOrder\").data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].colSymbol);\n          return refresh();\n        });\n        $(\"<td>\").addClass('pvtVals').appendTo(tr1).append(aggregator).append(rowOrderArrow).append(colOrderArrow).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tr2);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n          uiTable.find('tr:nth-child(2)').prepend(unused);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(rendererControl).append(unused));\n        }\n        this.html(uiTable);\n        ref2 = opts.cols;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownInDragDrop))));\n        }\n        ref3 = opts.rows;\n        for (o = 0, len3 = ref3.length; o < len3; o++) {\n          x = ref3[o];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownInDragDrop))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var exclusions, inclusions, len4, newDropdown, numInputsToProcess, pivotUIOptions, pvtVals, ref4, ref5, subopts, t, u, unusedAttrsContainer, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass\n            };\n            numInputsToProcess = (ref4 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref4 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = t = 0, ref5 = numInputsToProcess; 0 <= ref5 ? t < ref5 : t > ref5; x = 0 <= ref5 ? ++t : --t) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (u = 0, len4 = shownInAggregators.length; u < len4; u++) {\n                  attr = shownInAggregators[u];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            subopts.rowOrder = rowOrderArrow.data(\"order\");\n            subopts.colOrder = colOrderArrow.data(\"order\");\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, k, ref6, ref7;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref6 = \"\" + ((ref7 = record[k]) != null ? ref7 : 'null'), indexOf.call(excludedItems, ref6) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(materializedInput, subopts);\n            pivotUIOptions = $.extend({}, opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              colOrder: subopts.colOrder,\n              rowOrder: subopts.rowOrder,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope, opts) {\n      var colorScaleGenerator, heatmapper, i, j, l, n, numCols, numRows, ref, ref1, ref2;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(values) {\n          var max, min;\n          min = Math.min.apply(Math, values);\n          max = Math.max.apply(Math, values);\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      heatmapper = (function(_this) {\n        return function(scope) {\n          var colorScale, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorScale = colorScaleGenerator(values);\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", colorScale(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref1 = numRows; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i);\n          }\n          break;\n        case \"colheatmap\":\n          for (j = n = 0, ref2 = numCols; 0 <= ref2 ? n < ref2 : n > ref2; j = 0 <= ref2 ? ++n : --n) {\n            heatmapper(\".pvtVal.col\" + j);\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\");\n      heatmapper(\".pvtTotal.colTotal\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    return $.fn.barchart = function(opts) {\n      var barcharter, i, l, numCols, numRows, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, min, range, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          if (max < 0) {\n            max = 0;\n          }\n          range = max;\n          min = Math.min.apply(Math, values);\n          if (min < 0) {\n            range = max - min;\n          }\n          scaler = function(x) {\n            return 100 * x / (1.4 * range);\n          };\n          return forEachCell(function(x, elem) {\n            var bBase, bgColor, text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\",\n              \"height\": \"55px\"\n            });\n            bgColor = \"gray\";\n            bBase = 0;\n            if (min < 0) {\n              bBase = scaler(-min);\n            }\n            if (x < 0) {\n              bBase += scaler(x);\n              bgColor = \"darkred\";\n              x = -x;\n            }\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": bBase + \"%\",\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": bgColor\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"]}