{"version":3,"sources":["pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","FLAT_KEY_DELIM","PivotData","addSeparators","aggregatorTemplates","aggregators","calculateValueRanges","dayNamesEn","derivers","generateHeatmappers","getSort","locales","mthNamesEn","naturalSort","numberFormat","pivotTableRenderer","rd","renderers","rx","rz","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","uniques","arg","attr","uniq","record","ref","call","numInputs","sum","parseFloat","extremes","mode","val","sorter","sorters","ref1","ref2","Math","quantile","q","vals","sort","a","b","floor","ceil","runningStat","ddof","n","m","s","m_new","sqrt","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","fractionOf","wrapped","type","aggIdx","selector","total","row","col","inner","agg","getAggregator","isArray","countUnique","f","listUnique","join","max","min","first","last","median","average","stdev","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Median","Sample Variance","Sample Standard Deviation","Minimum","Maximum","First","Last","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Table Barchart","barchart","Heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","cancel","totals","vs","by","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","p","_this","as","bs","a1","b1","nas","nbs","String","match","shift","order","l_mapping","mapping","toLowerCase","isFunction","input","ref10","ref11","ref12","ref13","ref3","ref4","ref5","ref6","ref7","ref8","ref9","getRowKeys","getColKeys","sortKeys","arrSort","aggregator","aggregatorName","multiAggAttr","colAttrs","cols","rowAttrs","rows","valAttrs","rowOrder","colOrder","derivedAttributes","filter","emptyValue","rowKeys","colKeys","tree","rowTotals","colTotals","allTotal","map","sorted","valueRanges","forEachRecord","processRecord","setValueRanges","addRecord","compactRecord","j","k","len1","results","results1","tblCols","isEmptyObject","v","treatDataArrayAsRecords","each","text","Error","prototype","forEachMatchingRecord","criteria","callback","attrs","sortersArr","keyA","keyB","attrIdx","comparison","_sortByAggVal","attrsOrder","idx","isDesc","isRow","key","keys","sortOrder","sortParts","sortType","sortVal","comparisonKey","_getVal","sortKey","startsWith","parseInt","e","error","flatColKey","flatKey","flatRowKey","getTotalsAgg","isMultiTotals","len2","len3","len4","o","rawKey","rowOrCol","t","totalsAgg","c","r","pivotUtilities","pivotData","rendererType","colAttr","colAttrIdx","colKeyIdx","createHeader","createTotalsCell","createTotalsRow","getClickHandler","getHeaderClickHandler","heatmappers","len5","len6","len7","len8","rowAttr","rowAttrIdx","rowKeyIdx","spanSize","tbody","td","th","thead","totalAggregator","tr","txt","u","w","y","z","table","clickCallback","filters","headerClickCallback","document","createElement","className","keyIdx","maxAttrIdx","len","noDraw","stop","setAttribute","appendChild","textContent","onclick","formatHeader","innerHTML","style","backgroundColor","all","createGrandTotalCell","i1","len9","rangeType","rangeTypes","seedRange","totalAgg","totalAggs","updateRange","seedDimRange","range","makeArray","colorScaleGenerator","heatmap","nonRed","round","pivot","inputOpts","locale","localeDefaults","dataClass","renderer","rendererOptions","trigger","console","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","overwrite","attrLength","attrValues","colOrderArrow","existingOpts","fn1","initialRender","materializedInput","ordering","pivotTable","recordsProcessed","refresh","refreshDelayed","rendererControl","rowOrderArrow","shownAttributes","shownInAggregators","shownInDragDrop","tr1","tr2","uiTable","unused","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","hiddenFromAggregators","hiddenFromDragDrop","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","base","class","addClass","appendTo","attrElem","checkContainer","closeFilterBox","controls","filterItem","filterItemExcluded","finalButtons","hasExcludedItem","placeholder","triangleLink","valueCount","valueList","values","hide","accept","accept_gen","trim","accepted","real_filter","substring","find","parent","show","prop","toggleClass","removeClass","left","top","currentTarget","position","css","key_a_to_z","rowSymbol","colSymbol","next","value_a_to_z","value_z_to_a","role","prepend","inArray","rendererName","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","subopts","unusedAttrsContainer","remove","not","excludedItems","inclusionsInfo","children","setTimeout","sortable","update","ui","sender","connectWith","items","scope","heatmapper","numCols","numRows","colorScale","forEachCell","elem","barcharter","bBase","bgColor","wrapper","height","bottom","right","background-color","padding-left","padding-right","padding","padding-top","text-align"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults =\n            digitsAfterDecimal: 2, scaler: 1,\n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n        opts = $.extend({}, defaults, opts)\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x) or not x?\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        uniques: (fn, formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> fn(@uniq)\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: null\n            push: (record) ->\n                x = parseFloat(record[attr])\n                if not isNaN x\n                    if not @sum? then @sum = 0\n                    @sum += x\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        extremes: (mode, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            sorter: getSort(data?.sorters, attr)\n            push: (record) ->\n                x = record[attr]\n                if mode in [\"min\", \"max\"]\n                    x = parseFloat(x)\n                    if not isNaN x then @val = Math[mode](x, @val ? x)\n                if mode == \"first\" then @val = x if @sorter(x, @val ? x) <= 0\n                if mode == \"last\"  then @val = x if @sorter(x, @val ? x) >= 0\n            value: -> @val\n            format: (x) -> if isNaN(x) then x else formatter(x)\n            numInputs: if attr? then 0 else 1\n\n        quantile: (q, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            vals: []\n            push: (record) ->\n                x = parseFloat(record[attr])\n                @vals.push(x) if not isNaN(x)\n            value: ->\n                return null if @vals.length == 0\n                @vals.sort((a,b) -> a-b)\n                i = (@vals.length-1)*q\n                return (@vals[Math.floor(i)] + @vals[Math.ceil(i)])/2.0\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        runningStat: (mode=\"mean\", ddof=1, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            n: 0.0, m: 0.0, s: 0.0\n            push: (record) ->\n                x = parseFloat(record[attr])\n                return if isNaN(x)\n                @n += 1.0\n                if @n == 1.0\n                    @m = x\n                else\n                    m_new = @m + (x - @m)/@n\n                    @s = @s + (x - @m)*(x - m_new)\n                    @m = m_new\n            value: ->\n                if mode == \"mean\"\n                    return if @n == 0 then 0/0 else @m\n                return 0 if @n <= ddof\n                switch mode\n                    when \"var\"   then @s/(@n-ddof)\n                    when \"stdev\" then Math.sqrt(@s/(@n-ddof))\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: ->\n                sign = if upper then 1 else -1\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\n                    (1 + 1.642374415149816/@sumDenom)\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        #To support multi-metrics mode, these aggregator factories must be\n        #instantiated with the aggregator index, so that value() knows how\n        # to find the corresponding fractionOf aggregator for the denominator.\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (aggIdx, x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: ->\n                agg = data.getAggregator(@selector...)\n                if $.isArray(agg)\n                    agg = agg[aggIdx]\n                return @inner.value() / agg.inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    aggregatorTemplates.countUnique = (f) -> aggregatorTemplates.uniques(((x) -> x.length), f)\n    aggregatorTemplates.listUnique =  (s) -> aggregatorTemplates.uniques(((x) -> x.join(s)), ((x)->x))\n    aggregatorTemplates.max =         (f) -> aggregatorTemplates.extremes('max', f)\n    aggregatorTemplates.min =         (f) -> aggregatorTemplates.extremes('min', f)\n    aggregatorTemplates.first =       (f) -> aggregatorTemplates.extremes('first', f)\n    aggregatorTemplates.last =        (f) -> aggregatorTemplates.extremes('last', f)\n    aggregatorTemplates.median =      (f) -> aggregatorTemplates.quantile(0.5, f)\n    aggregatorTemplates.average =     (f) -> aggregatorTemplates.runningStat(\"mean\", 1, f)\n    aggregatorTemplates.var =         (ddof, f) -> aggregatorTemplates.runningStat(\"var\", ddof, f)\n    aggregatorTemplates.stdev =       (ddof, f) -> aggregatorTemplates.runningStat(\"stdev\", ddof, f)\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) ->\n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Integer Sum\":          tpl.sum(usFmtInt)\n        \"Average\":              tpl.average(usFmt)\n        \"Median\":               tpl.median(usFmt)\n        \"Sample Variance\":      tpl.var(1, usFmt)\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"First\":                tpl.first(usFmt)\n        \"Last\":                 tpl.last(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":          (data, opts) -> pivotTableRenderer(data, opts)\n        \"Table Barchart\": (data, opts) -> $(pivotTableRenderer(data, opts)).barchart()\n        \"Heatmap\":        (data, opts) -> pivotTableRenderer(data, opts, \"heatmap\")\n        \"Row Heatmap\":    (data, opts) -> pivotTableRenderer(data, opts, \"rowheatmap\")\n        \"Col Heatmap\":    (data, opts) -> pivotTableRenderer(data, opts, \"colheatmap\")\n\n    locales =\n        en:\n            aggregators: aggregators\n            renderers: renderers\n            localeStrings:\n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter values\"\n                apply: \"Apply\"\n                cancel: \"Cancel\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    rx = /(\\d+)|(\\D+)/g\n    rd = /\\d/\n    rz = /^0/\n    naturalSort = (as, bs) =>\n        #nulls first\n        return -1 if bs? and not as?\n        return  1 if as? and not bs?\n\n        #then raw NaNs\n        return -1 if typeof as == \"number\" and isNaN(as)\n        return  1 if typeof bs == \"number\" and isNaN(bs)\n\n        #numbers and numbery strings group together\n        nas = +as\n        nbs = +bs\n        return -1 if nas < nbs\n        return  1 if nas > nbs\n\n        #within that, true numbers before numbery strings\n        return -1 if typeof as == \"number\" and typeof bs != \"number\"\n        return  1 if typeof bs == \"number\" and typeof as != \"number\"\n        return  0 if typeof as == \"number\" and typeof bs == \"number\"\n\n        # 'Infinity' is a textual number, so less than 'A'\n        return -1 if isNaN(nbs) and not isNaN(nas)\n        return  1 if isNaN(nas) and not isNaN(nbs)\n\n        #finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\n        a = String(as)\n        b = String(bs)\n        return 0 if a == b\n        return (if a > b then 1 else -1) unless rd.test(a) and rd.test(b)\n\n        #special treatment for strings containing digits\n        a = a.match(rx) #create digits vs non-digit chunks and iterate through\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 != b1\n                if rd.test(a1) and rd.test(b1) #both are digit chunks\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        return a.length - b.length\n\n    sortAs = (order) ->\n        mapping = {}\n        l_mapping = {} # sort lowercased keys similarly\n        for i, x of order\n            mapping[x] = i\n            l_mapping[x.toLowerCase()] = i if typeof x == \"string\"\n        (a, b) ->\n            if mapping[a]? and mapping[b]? then mapping[a] - mapping[b]\n            else if mapping[a]? then -1\n            else if mapping[b]? then 1\n            else if l_mapping[a]? and l_mapping[b]? then l_mapping[a] - l_mapping[b]\n            else if l_mapping[a]? then -1\n            else if l_mapping[b]? then 1\n            else naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        if sorters?\n            if $.isFunction(sorters)\n                sort = sorters(attr)\n                return sort if $.isFunction(sort)\n            else if sorters[attr]?\n                return sorters[attr]\n        return naturalSort\n\n    ###\n    Data Model class\n    ###\n\n    FLAT_KEY_DELIM = '\\u0001'\n    class PivotData\n        constructor: (input, opts = {}) ->\n            @input = input\n\n            #May be an array of aggregators.\n            @aggregator = opts.aggregator ? aggregatorTemplates.count()()\n\n            #Only used by pivotUI(). No multi-aggregator support.\n            @aggregatorName = opts.aggregatorName ? \"Count\"\n\n            #If there are multiple aggregators, this fake attribute is used to generate the extra cols/rows.\n            @multiAggAttr = opts.multiAggAttr ? \"_metrics\"\n\n            #Attributes are the record fields selected by the user. Value attributes are used to instantiate aggregators.\n            @colAttrs = opts.cols ? []\n            @rowAttrs = opts.rows ? []\n            @valAttrs = opts.vals ? []  #Only used by plotly, gchart, and c3 renderers.\n\n            #Insert the multi-agg attribute as the last column if not provided already.\n            if $.isArray(@aggregator) and @multiAggAttr not in @colAttrs and @multiAggAttr not in @rowAttrs\n                @colAttrs.push @multiAggAttr\n\n            #Used when sorting keys by attribute value. See getSort().\n            #Either an object or a fn, e.g.: sorters[attr]=sortFn, or sorters(attr)=sortFn.\n            @sorters = opts.sorters ? {}\n\n            #How keys are sorted. See @sortKeys() for possible values.\n            @rowOrder = opts.rowOrder ? \"key_a_to_z\"\n            @colOrder = opts.colOrder ? \"key_a_to_z\"\n\n            #HIQ client derives its own attributes, and does not use this property.\n            @derivedAttributes = opts.derivedAttributes ? {}\n\n            @filter = opts.filter ? (-> true)\n            @emptyValue = opts.emptyValue ? 'null'\n\n            #Keys are generated tuples of attribute values.\n            @rowKeys = []\n            @colKeys = []\n\n            #Aggregator instances, one per value cell in the table. Created in @processData().\n            #Normal aggregators, at tree[rowKey][colKey].\n            @tree = {}\n            #Row/col total aggregators, at rowTotals[rowKey] and colTotals[colKey].\n            #In multi-metric mode, the values are arrays.\n            @rowTotals = {}\n            @colTotals = {}\n            #Grand total aggregator. In multi-metric mode, this is an array.\n            @allTotal = if not $.isArray(@aggregator) then @aggregator(this, [], []) else @aggregator.map((agg) => agg(this, [], []))\n\n            #Keys are not sorted on init, but when first accessed (e.g. in getRowKeys()).\n            @sorted = false\n\n            # Track min/max values across cuts of the pivot table.\n            @valueRanges = {}\n\n            @opts = opts\n\n            #Generate table cells and aggregators from records that pass the filter.\n            PivotData.forEachRecord input, opts, (record) =>\n                @processRecord(record) if opts.filter(record)\n\n            # In server-mode, keys and aggregators are manually set on the model after\n            # instantiation, so client must call @setValueRanges manually.\n            if input?\n                @setValueRanges\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, opts, f) ->\n            if $.isEmptyObject opts.derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) -> \n                    record[k] = v(record) ? record[k] for k, v of opts.derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if !opts.treatDataArrayAsRecords #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof $\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        #Only used by examples/mps_prepop.html. Covered in tests/pivot_spec.coffee.\n        forEachMatchingRecord: (criteria, callback) ->\n            PivotData.forEachRecord @input, @opts, (record) =>\n                return if not @opts.filter(record)\n                for own k, v of criteria\n                    return if v != (record[k] ? @emptyValue)\n                callback(record)\n\n        #Create sort fn that sorts row/col keys by attribute value.\n        #Sorts coarser attributes first, e.g.: [\"A\", 10] < [\"B\", 1] < [\"B\", 5].\n        #`attrs`: Array of attributes on which to sort. Assumes keys are\n        #  composed of these attributes.\n        #`order`: Array of \"+\" or \"-\" values, one per attribute. \"-\"\n        #  indicates a descending sort.\n        arrSort: (attrs, order) =>\n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (keyA,keyB) ->\n                for own attrIdx, sorter of sortersArr\n                    comparison = sorter(keyA[attrIdx], keyB[attrIdx])\n                    if order? and order[attrIdx] == \"-\"\n                        comparison *= -1\n                    return comparison if comparison != 0\n                return 0\n\n        #Sort row and col keys based on @rowOrder and @colOrder. Possible values:\n        #  `key_[-]flatKey`: Sort based on the values for the given key, in \"flat\"\n        #    form (FLAT_KEY_DELIM-separated string). Optional \"-\" for descending sort.\n        #  `totals_[-]aggIdx`: Sort based on the totals values. aggIdx is the index\n        #    of the aggregator to use (ignored if not multi-metrics mode). Optional\n        #    \"-\" for descending sort.\n        #  `attr_[+|-]_...`: Sort based on attribute values. There is one asc/desc\n        #    indicator per attribute.\n        #  `value_[a_to_z|z_to_a]`: Legacy sort on totals values. Does not support\n        #    multi-metrics mode.\n        #  `key_[a_to_z]`: Legacy sort on attribute values, all ascending.\n        sortKeys: () =>\n            if @sorted\n                return\n            @sorted = true\n\n            for [sortOrder, keys, attrs], idx in [\n              [@rowOrder, @rowKeys, @rowAttrs],\n              [@colOrder, @colKeys, @colAttrs]\n            ]\n                isRow = idx == 0\n\n                #Sort keys by the value of the aggregator at `comparisonKey`.\n                #If `isDesc` is true, does a descending sort. In multi-metrics\n                #mode, `aggIdx` is the index of the totals aggregator to use.\n                _sortByAggVal = (comparisonKey, isDesc, aggIdx) =>\n                    _getVal = (sortKey) =>\n                        row = if isRow then sortKey else comparisonKey\n                        col = if not isRow then sortKey else comparisonKey\n                        agg = @getAggregator(row, col)\n                        if $.isArray(agg)\n                            agg = agg[aggIdx or 0]\n                        return agg.value()\n\n                    keys.sort (a,b) => naturalSort(_getVal(a), _getVal(b)) * (if isDesc then -1 else 1)\n\n                switch sortOrder\n                    #Legacy sorts.\n                    when \"value_a_to_z\" then _sortByAggVal([])\n                    when \"value_z_to_a\" then _sortByAggVal([], true)\n                    when \"key_a_to_z\" then keys.sort @arrSort(attrs)\n                    else\n                        sortParts = sortOrder.split(\"_\")\n                        sortType = sortParts[0]\n\n                        switch sortType\n                            when \"attr\"\n                                attrsOrder = sortParts.slice(1)\n                                keys.sort @arrSort(attrs, attrsOrder)\n                            else\n                                sortVal = sortParts[1]\n\n                                #Check for descending sort.\n                                isDesc = false\n                                if sortVal.startsWith(\"-\")\n                                    sortVal = sortVal.slice(1)\n                                    isDesc = true\n\n                                if sortType == \"key\"\n                                    key = sortVal.split(FLAT_KEY_DELIM)\n                                    _sortByAggVal(key, isDesc)\n                                else  # sortType == \"totals\"\n                                    aggIdx = parseInt(sortVal)\n                                    _sortByAggVal([], isDesc, aggIdx)\n\n        getColKeys: () =>\n            try\n                @sortKeys()\n            catch e\n                #Ignore error: use un-sorted keys.\n            return @colKeys\n\n        getRowKeys: () =>\n            try\n                @sortKeys()\n            catch e\n                #Ignore error: use un-sorted keys.\n            return @rowKeys\n\n        #Generate keys for the record, and update all corresponding aggregators\n        #(i.e., the grand total, row/col total, and normal row+col aggregators).\n        #:aggIdx: In multi-metrics mode, index into the @aggregator array.\n        processRecord: (record, aggIdx) -> #this code is called in a tight loop\n\n            #In multi-metric mode, process record once per aggregator.\n            if $.isArray(@aggregator) and not aggIdx?\n                for agg, aggIdx in @aggregator\n                    record[@multiAggAttr] = aggIdx\n                    @processRecord(record, aggIdx)\n                delete record[@multiAggAttr]  # leave records unmodified\n                return\n\n            aggregator = if aggIdx? then @aggregator[aggIdx] else @aggregator\n\n            colKey = []\n            rowKey = []\n            colKey.push record[x] ? @emptyValue for x in @colAttrs\n            rowKey.push record[x] ? @emptyValue for x in @rowAttrs\n            flatRowKey = rowKey.join(FLAT_KEY_DELIM)\n            flatColKey = colKey.join(FLAT_KEY_DELIM)\n\n            #Grand total cell.\n            allTotal = if aggIdx? then @allTotal[aggIdx] else @allTotal\n            allTotal.push record\n\n            getTotalsAgg = (rowOrCol, key) =>  #fat arrow to get closure over PivotData object `this`\n                r = if rowOrCol == \"row\" then key else []\n                c = if rowOrCol == \"row\" then [] else key\n                return aggregator(this, r, c)\n\n            for [rowOrCol, attrs, keys, rawKey, flatKey, totals] in [\n              [\"row\", @colAttrs, @rowKeys, rowKey, flatRowKey, @rowTotals],\n              [\"col\", @rowAttrs, @colKeys, colKey, flatColKey, @colTotals]\n            ]\n                isMultiTotals = aggIdx? and @multiAggAttr in attrs\n                if rawKey.length != 0\n                    #First time we've seen this key: create totals aggregator.\n                    if not totals[flatKey]\n                        keys.push rawKey\n                        totals[flatKey] = if isMultiTotals then [] else getTotalsAgg(rowOrCol, rawKey)\n                    if isMultiTotals and not totals[flatKey][aggIdx]\n                        totals[flatKey][aggIdx] = getTotalsAgg(rowOrCol, rawKey)\n                    #Push record to the totals aggregator.\n                    totalsAgg = totals[flatKey]\n                    if isMultiTotals\n                        totalsAgg = totalsAgg[aggIdx]\n                    totalsAgg.push record\n\n            if colKey.length != 0 and rowKey.length != 0\n                if not @tree[flatRowKey]\n                    @tree[flatRowKey] = {}\n                if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey] = aggregator(this, rowKey, colKey)\n                @tree[flatRowKey][flatColKey].push record\n\n        #In multi-metric mode, totals aggregators are arrays.\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(FLAT_KEY_DELIM)\n            flatColKey = colKey.join(FLAT_KEY_DELIM)\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            #In multi-metric mode, don't bother creating default aggregators.\n            return if $.isArray(agg) then agg else (agg ? {value: (-> null), format: -> \"\"})\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData}\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts, rendererType) ->\n        defaults =\n            table: clickCallback: null\n            localeStrings: totals: \"Totals\"\n            treatDataArrayAsRecords: false\n\n        opts = $.extend(true, {}, defaults, opts)\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        if opts.table.clickCallback\n            getClickHandler = (value, rowKey, colKey) ->\n                filters = {}\n                filters[attr] = colKey[i] for attr, i in colAttrs when colKey[i]?\n                filters[attr] = rowKey[i] for attr, i in rowAttrs when rowKey[i]?\n                return (e) -> opts.table.clickCallback(e, value, filters, pivotData)\n\n        if opts.table.headerClickCallback\n            getHeaderClickHandler = (rowOrCol, type, val) ->\n                return (e) -> opts.table.headerClickCallback(e, rowOrCol, type, val)\n\n        # If rendering a heatmap or barchart, calculate value ranges across various\n        # pivot table cuts, to generate heatmap colors and bar chart lengths.\n        if rendererType?\n            valueRanges = calculateValueRanges(rendererType, pivotData)\n            if rendererType in [\"heatmap\", \"rowheatmap\", \"colheatmap\"]\n                heatmappers = generateHeatmappers(valueRanges, opts)\n            else\n                scaler = null  # TODO: finish barchart\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col span size for all cells\n        spanSize = (keys, keyIdx, maxAttrIdx) ->\n            #check if cell should be drawn (e.g., if an attr is coarser than the next one, we only draw that attr cell once)\n            if keyIdx != 0\n                noDraw = true\n                for attrIdx in [0..maxAttrIdx]\n                    if keys[keyIdx-1][attrIdx] != keys[keyIdx][attrIdx]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            #calculate span\n            len = 0\n            while keyIdx+len < keys.length\n                stop = false\n                for attrIdx in [0..maxAttrIdx]\n                    stop = true if keys[keyIdx][attrIdx] != keys[keyIdx+len][attrIdx]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        for colAttr, colAttrIdx in colAttrs\n            tr = document.createElement(\"tr\")\n\n            #create empty upper-left cell spanning both row and col attrs\n            if parseInt(colAttrIdx) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n\n            #create cell for this col attr\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = colAttr\n            if getHeaderClickHandler?\n                th.onclick = getHeaderClickHandler(\"col\", \"attr\", colAttr)\n            tr.appendChild th\n\n            # create cell for each col key (of this attribute)\n            for colKey, colKeyIdx in colKeys\n                x = spanSize(colKeys, parseInt(colKeyIdx), parseInt(colAttrIdx))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    if opts.formatHeader\n                        th.textContent = opts.formatHeader(colKey[colAttrIdx], colAttrs[colAttrIdx]);\n                    else\n                        th.textContent = colKey[colAttrIdx]\n                    th.setAttribute(\"colspan\", x)\n\n                    #Only allow clicking on the finest-grained attribute.\n                    if getHeaderClickHandler? and colAttrIdx == (colAttrs.length - 1)\n                        flatColKey = colKey.join(FLAT_KEY_DELIM)\n                        th.onclick = getHeaderClickHandler(\"col\", \"key\", flatColKey)\n                        #Add key to data-set for post-processing sort icons.\n                        th.setAttribute(\"data-flat-key\", flatColKey)\n\n                    #if this is the last col attr, each col key spans 2 rows (the 2nd being the row attr row)\n                    if parseInt(colAttrIdx) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n\n                    tr.appendChild th\n\n            # create row totals column header\n            if parseInt(colAttrIdx) == 0\n                createHeader = (aggIdx) ->\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                    th.innerHTML = opts.localeStrings.totals\n                    if aggIdx?\n                        th.setAttribute(\"data-agg-idx\", aggIdx)\n                    th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                    if getHeaderClickHandler?\n                        th.onclick = getHeaderClickHandler(\"col\", \"totals\", aggIdx or 0)\n                    tr.appendChild th\n\n                #In multi-metric mode, if \"Metrics\" attr is a col, there is one row totals col per aggregator.\n                if $.isArray(pivotData.aggregator) and pivotData.multiAggAttr in colAttrs\n                    #Skip row totals if \"Metrics\" is the only col attr: the totals are redundant.\n                    if colAttrs.length > 1\n                        for agg, aggIdx in pivotData.aggregator\n                            createHeader(aggIdx)\n                else\n                    createHeader()\n\n            thead.appendChild tr\n\n        #then a single row for all row attrs\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for rowAttr, i in rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.textContent = rowAttr\n                if getHeaderClickHandler?\n                    th.onclick = getHeaderClickHandler(\"row\", \"attr\", rowAttr)\n                tr.appendChild th\n            th = document.createElement(\"th\")  #empty cell below col attr cells\n            if colAttrs.length ==0\n                #use empty cell for the row totals if there are no col attrs\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                if getHeaderClickHandler?\n                    #there is only one col totals aggregator\n                    th.onclick = getHeaderClickHandler(\"col\", \"totals\", 0)\n            tr.appendChild th\n            thead.appendChild tr\n\n        result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for rowKey, rowKeyIdx in rowKeys\n            tr = document.createElement(\"tr\")\n\n            #create a header cell for each row attr\n            for own rowAttrIdx, txt of rowKey\n                x = spanSize(rowKeys, parseInt(rowKeyIdx), parseInt(rowAttrIdx))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    if opts.formatHeader\n                        th.textContent = opts.formatHeader(txt, rowAttrs[rowAttrIdx]);\n                    else\n                        th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n\n                    #if this is the last row attr, the header cell spans 2 cols (the 2nd being the col attr col)\n                    if parseInt(rowAttrIdx) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",2)\n\n                    if getHeaderClickHandler? and parseInt(rowAttrIdx) == rowAttrs.length-1\n                        flatRowKey = rowKey.join(FLAT_KEY_DELIM)\n                        th.onclick = getHeaderClickHandler(\"row\", \"key\", flatRowKey)\n                        #Add key to data-set for post-processing sort icons.\n                        th.setAttribute(\"data-flat-key\", flatRowKey)\n\n                    tr.appendChild th\n\n            #create a value cell for each col key\n            for colKey, colKeyIdx in colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row#{rowKeyIdx} col#{colKeyIdx}\"\n                td.textContent = aggregator.format(val)\n                if heatmappers?\n                    td.style.backgroundColor = switch rendererType\n                        when \"heatmap\" then heatmappers.all(val)\n                        when \"rowheatmap\" then heatmappers.rows[rowKeyIdx](val)\n                        when \"colheatmap\" then heatmappers.cols[colKeyIdx](val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, colKey)\n                tr.appendChild td\n\n            #create rightmost row totals cell/s\n            createTotalsCell = (totalAggregator) ->\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal rowTotal\"\n                td.textContent = totalAggregator.format(val)\n                if heatmappers?\n                    td.style.backgroundColor = heatmappers.rowTotals(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, rowKey, [])\n                td.setAttribute(\"data-for\", \"row\"+rowKeyIdx)\n                tr.appendChild td\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            #Multi-metric mode: one totals cell per aggregator.\n            if $.isArray(totalAggregator)\n                #Skip row totals if \"Metrics\" is the only col attr: the totals are redundant.\n                if colAttrs.length > 1\n                    for agg in totalAggregator\n                        createTotalsCell(agg)\n            else\n                createTotalsCell(totalAggregator)\n\n            tbody.appendChild tr\n\n        #finally, the row for col totals (which includes a grand total cell in the bottom-right)\n        createTotalsRow = (aggIdx) ->\n            tr = document.createElement(\"tr\")\n\n            #left-most header cell\n            th = document.createElement(\"th\")\n            th.className = \"pvtTotalLabel pvtColTotalLabel\"\n            th.innerHTML = opts.localeStrings.totals\n            if aggIdx?\n                th.setAttribute(\"data-agg-idx\", aggIdx)\n            th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n            if getHeaderClickHandler?\n                th.onclick = getHeaderClickHandler(\"row\", \"totals\", aggIdx or 0)\n            tr.appendChild th\n\n            #value cells, one per col key\n            for colKey, colKeyIdx in colKeys\n                totalAggregator = pivotData.getAggregator([], colKey)\n                if aggIdx?\n                    totalAggregator = totalAggregator[aggIdx]\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtTotal colTotal\"\n                td.textContent = totalAggregator.format(val)\n                if heatmappers?\n                    td.style.backgroundColor = heatmappers.colTotals(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, [], colKey)\n                td.setAttribute(\"data-for\", \"col\"+colKeyIdx)\n                tr.appendChild td\n\n            #right-most grand total cell\n            createGrandTotalCell = (totalAggregator) ->\n                val = totalAggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtGrandTotal\"\n                td.textContent = totalAggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                if getClickHandler?\n                    td.onclick = getClickHandler(val, [], [])\n                tr.appendChild td\n\n            #This is an array in multi-metrics mode.\n            totalAggregator = pivotData.getAggregator([], [])\n            if not $.isArray(totalAggregator)\n                createGrandTotalCell(totalAggregator)\n            #Multi-metrics mode, \"metrics\" attr in rows: each grand total cell is created per createTotalsRow() call.\n            else if aggIdx?\n                createGrandTotalCell(totalAggregator[aggIdx])\n            #Multi-metrics mode, \"metrics\" attr in cols, only one totals row: one grand total cell per aggregator.\n            else\n                #Skip row totals if \"Metrics\" is the only col attr: totals are redundant.\n                if colAttrs.length > 1\n                    for agg in totalAggregator\n                        createGrandTotalCell(agg)\n\n            tbody.appendChild tr\n\n        #In multi-metric mode, if the \"Metrics\" attr is a row, there is one\n        #col totals row per aggregator.\n        if $.isArray(pivotData.aggregator) and pivotData.multiAggAttr in rowAttrs\n            #Skip col totals if \"Metrics\" is the only row attr: the totals are redundant.\n            if rowAttrs.length > 1\n                for agg, aggIdx in pivotData.aggregator\n                    createTotalsRow(aggIdx)\n        else\n            createTotalsRow()\n\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    # Calculate [min, max] ranges for values across various cuts of the pivot table.\n    calculateValueRanges = (rendererType, pivotData) =>\n        valueRanges = {}\n\n        # Get required ranges.\n        rangeTypes = switch rendererType\n            when \"heatmap\" then [\"all\", \"rowTotals\", \"colTotals\"]\n            when \"rowheatmap\" then [\"rows\", \"rowTotals\", \"colTotals\"]\n            when \"colheatmap\" then [\"cols\", \"rowTotals\", \"colTotals\"]\n            when \"barchart\" then [\"rows\", \"colTotals\"]\n\n        # Seed each required range.\n        seedRange = (rangeType) ->\n            if rangeType in [\"rows\", \"cols\"]\n                valueRanges[rangeType] = {}\n                keys = if rangeType is \"rows\" then pivotData.rowKeys else pivotData.colKeys\n                seedDimRange = (keyIdx) ->\n                    valueRanges[rangeType][keyIdx] = [Infinity, -Infinity]\n                seedDimRange keyIdx for key, keyIdx in keys\n            else\n                valueRanges[rangeType] = [Infinity, -Infinity]\n        seedRange rangeType for rangeType in rangeTypes\n\n        # Extend the given [min, max] range with the given value.\n        updateRange = (range, val) ->\n            if val? and isFinite val\n                range[0] = Math.min(range[0], val)\n                range[1] = Math.max(range[1], val)\n\n        # Calculate [min, max] for each required range.\n        for rowKey, rowKeyIdx in pivotData.rowKeys\n            for colKey, colKeyIdx in pivotData.colKeys\n                val = pivotData.getAggregator(rowKey, colKey).value()\n                if valueRanges.all?\n                    updateRange(valueRanges.all, val)\n                if valueRanges.rows?\n                    updateRange(valueRanges.rows[rowKeyIdx], val)\n                if valueRanges.cols?\n                    updateRange(valueRanges.cols[colKeyIdx], val)\n                if rowKeyIdx is 0 and valueRanges.colTotals?\n                    totalAggs = $.makeArray(pivotData.getAggregator([], colKey))\n                    updateRange(valueRanges.colTotals, totalAgg.value()) for totalAgg in totalAggs\n            if valueRanges.rowTotals?\n                totalAggs = $.makeArray(pivotData.getAggregator(rowKey, []))\n                updateRange(valueRanges.rowTotals, totalAgg.value()) for totalAgg in totalAggs\n\n        return valueRanges\n\n    # Create functions that take a cell value and return a heatmap color.\n    generateHeatmappers = (valueRanges, opts) ->\n        heatmappers = {}\n\n        # Given a [min, max] range, create a function that generates a CSS color for a value.\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n        colorScaleGenerator ?= ([min, max]) ->\n            return (x) ->\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\n                return \"rgb(255,#{nonRed},#{nonRed})\"\n\n        # Create heatmappers for every range.\n        for rangeType of valueRanges\n            if rangeType in [\"rows\", \"cols\"]\n                heatmappers[rangeType] = {}\n                for keyIdx, range of valueRanges[rangeType]\n                    heatmappers[rangeType][keyIdx] = colorScaleGenerator(range)\n            else\n                heatmappers[rangeType] = colorScaleGenerator(valueRanges[rangeType])\n\n        return heatmappers\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, inputOpts, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            cols : [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: {}\n            derivedAttributes: {}\n            renderer: pivotTableRenderer\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n\n        result = null\n        try\n            pivotData = if input instanceof opts.dataClass then input else new opts.dataClass(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                @trigger(\"pivotTableError\", e)\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            @trigger(\"pivotTableError\", e)\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n\n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        locale = \"en\" if not locales[locale]?\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            hiddenFromAggregators: []\n            hiddenFromDragDrop: []\n            menuLimit: 500\n            cols: [], rows: [], vals: []\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\n            dataClass: PivotData\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            onRefresh: null\n            filter: -> true\n            sorters: {}\n            treatDataArrayAsRecords: false\n\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\n        localeDefaults =\n            rendererOptions: {localeStrings}\n            localeStrings: localeStrings\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\n        else\n            opts = existingOpts\n\n        try\n            # do a first pass on the data to cache a materialized copy of any\n            # function-valued inputs and to compute dimension cardinalities\n            attrValues = {}\n            materializedInput = []\n            recordsProcessed = 0\n            PivotData.forEachRecord input, opts, (record) ->\n                return unless opts.filter(record)\n                materializedInput.push(record)\n                for own attr of record\n                    if not attrValues[attr]?\n                        attrValues[attr] = {}\n                        if recordsProcessed > 0\n                            attrValues[attr][@emptyValue] = recordsProcessed\n                for attr of attrValues\n                    value = record[attr] ? @emptyValue\n                    attrValues[attr][value] ?= 0\n                    attrValues[attr][value]++\n                recordsProcessed++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            rendererControl = $(\"<td>\")\n\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\n            shownAttributes = (a for a of attrValues when a not in opts.hiddenAttributes)\n            shownInAggregators = (c for c in shownAttributes when c not in opts.hiddenFromAggregators)\n            shownInDragDrop = (c for c in shownAttributes when c not in opts.hiddenFromDragDrop)\n\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownInDragDrop\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                unused.addClass('pvtVertList')\n            else\n                unused.addClass('pvtHorizList')\n\n            for own i, attr of shownInDragDrop\n                do (attr) ->\n                    values = (v for v of attrValues[attr])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").append(\n                        $(\"<span>\").text(attr),\n                        $(\"<span>\").addClass(\"count\").text(\"(#{values.length})\"),\n                        )\n                    if values.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        if values.length > 5\n                            controls = $(\"<p>\").appendTo(valueList)\n                            sorter = getSort(opts.sorters, attr)\n                            placeholder = opts.localeStrings.filterResults\n                            $(\"<input>\", {type: \"text\"}).appendTo(controls)\n                                .attr({placeholder: placeholder, class: \"pvtSearch\"})\n                                .bind \"keyup\", ->\n                                    filter = $(this).val().toLowerCase().trim()\n                                    accept_gen = (prefix, accepted) -> (v) ->\n                                        real_filter = filter.substring(prefix.length).trim()\n                                        return true if real_filter.length == 0\n                                        return Math.sign(sorter(v.toLowerCase(), real_filter)) in accepted\n                                    accept =\n                                        if      filter.startsWith(\">=\") then accept_gen(\">=\", [1,0])\n                                        else if filter.startsWith(\"<=\") then accept_gen(\"<=\", [-1,0])\n                                        else if filter.startsWith(\">\")  then accept_gen(\">\",  [1])\n                                        else if filter.startsWith(\"<\")  then accept_gen(\"<\",  [-1])\n                                        else if filter.startsWith(\"~\")  then (v) ->\n                                                return true if filter.substring(1).trim().length == 0\n                                                v.toLowerCase().match(filter.substring(1))\n                                        else (v) -> v.toLowerCase().indexOf(filter) != -1\n\n                                    valueList.find('.pvtCheckContainer p label span.value').each ->\n                                        if accept($(this).text())\n                                            $(this).parent().parent().show()\n                                        else\n                                            $(this).parent().parent().hide()\n                            controls.append $(\"<br>\")\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectAll)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:not(:checked)\")\n                                        .prop(\"checked\", true).toggleClass(\"changed\")\n                                    return false\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\n                                .html(opts.localeStrings.selectNone)\n                                .bind \"click\", ->\n                                    valueList.find(\"input:visible:checked\")\n                                        .prop(\"checked\", false).toggleClass(\"changed\")\n                                    return false\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for value in values.sort(getSort(opts.sorters, attr))\n                             valueCount = attrValues[attr][value]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[attr]\n                                filterItemExcluded = (value not in opts.inclusions[attr])\n                             else if opts.exclusions[attr]\n                                filterItemExcluded = (value in opts.exclusions[attr])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\n                                .appendTo(filterItem)\n                                .bind \"change\", -> $(this).toggleClass(\"changed\")\n                             filterItem.append $(\"<span>\").addClass(\"value\").text(value)\n                             filterItem.append $(\"<span>\").addClass(\"count\").text(\"(\"+valueCount+\")\")\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    closeFilterBox = ->\n                        if valueList.find(\"[type='checkbox']\").length >\n                               valueList.find(\"[type='checkbox']:checked\").length\n                                attrElem.addClass \"pvtFilteredAttribute\"\n                            else\n                                attrElem.removeClass \"pvtFilteredAttribute\"\n\n                            valueList.find('.pvtSearch').val('')\n                            valueList.find('.pvtCheckContainer p').show()\n                            valueList.hide()\n\n                    finalButtons = $(\"<p>\").appendTo(valueList)\n\n                    if values.length <= opts.menuLimit\n                        $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.apply)\n                            .appendTo(finalButtons).bind \"click\", ->\n                                if valueList.find(\".changed\").removeClass(\"changed\").length\n                                    refresh()\n                                closeFilterBox()\n\n                    $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.cancel)\n                        .appendTo(finalButtons).bind \"click\", ->\n                            valueList.find(\".changed:checked\")\n                                .removeClass(\"changed\").prop(\"checked\", false)\n                            valueList.find(\".changed:not(:checked)\")\n                                .removeClass(\"changed\").prop(\"checked\", true)\n                            closeFilterBox()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle')\n                        .html(\" &#x25BE;\").bind \"click\", (e) ->\n                            {left, top} = $(e.currentTarget).position()\n                            valueList.css(left: left+10, top: top+10).show()\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink)\n\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    unused.append(attrElem).append(valueList)\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            ordering =\n                key_a_to_z:   {rowSymbol: \"&varr;\", colSymbol: \"&harr;\", next: \"value_a_to_z\"}\n                value_a_to_z: {rowSymbol: \"&darr;\", colSymbol: \"&rarr;\", next: \"value_z_to_a\"}\n                value_z_to_a: {rowSymbol: \"&uarr;\", colSymbol: \"&larr;\", next: \"key_a_to_z\"}\n\n            rowOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtRowOrder\")\n                .data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].rowSymbol)\n                    refresh()\n\n            colOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtColOrder\")\n                .data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol)\n                .bind \"click\", ->\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\n                    $(this).html(ordering[$(this).data(\"order\")].colSymbol)\n                    refresh()\n\n            $(\"<td>\").addClass('pvtVals')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append(rowOrderArrow)\n              .append(colOrderArrow)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2)\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend unused\n            else\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(unused)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownInAggregators\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n                subopts.rowOrder = rowOrderArrow.data(\"order\")\n                subopts.colOrder = colOrderArrow.data(\"order\")\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\n                    return true\n\n                pivotTable.pivot(materializedInput,subopts)\n                pivotUIOptions = $.extend {}, opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    colOrder: subopts.colOrder\n                    rowOrder: subopts.rowOrder\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer.val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            @trigger(\"pivotTableError\", e)\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        # given a series of values\n        # must return a function to map a given value to a CSS color\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n        colorScaleGenerator ?= (values) ->\n            min = Math.min(values...)\n            max = Math.max(values...)\n            return (x) ->\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\n                return \"rgb(255,#{nonRed},#{nonRed})\"\n\n        heatmapper = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorScale = colorScaleGenerator(values)\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\n\n        switch scope\n            when \"heatmap\"    then heatmapper \".pvtVal\"\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\"\n        heatmapper \".pvtTotal.colTotal\"\n\n        return this\n\n    ###\n    Barchart post-processing\n    ###\n\n    $.fn.barchart = (opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        barcharter = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            max = Math.max(values...)\n            if max < 0\n                max = 0\n            range = max;\n            min = Math.min(values...)\n            if min < 0\n                range = max - min\n            scaler = (x) -> 100*x/(1.4*range)\n            forEachCell (x, elem) ->\n                text = elem.text()\n                wrapper = $(\"<div>\").css\n                    \"position\": \"relative\"\n                    \"height\": \"55px\"\n                bgColor = \"gray\"\n                bBase = 0\n                if min < 0\n                    bBase = scaler(-min)\n                if x < 0\n                    bBase += scaler(x)\n                    bgColor = \"darkred\"\n                    x = -x\n                wrapper.append $(\"<div>\").css\n                    \"position\": \"absolute\"\n                    \"bottom\": bBase + \"%\"\n                    \"left\": 0\n                    \"right\": 0\n                    \"height\": scaler(x) + \"%\"\n                    \"background-color\": bgColor\n                wrapper.append $(\"<div>\").text(text).css\n                    \"position\":\"relative\"\n                    \"padding-left\":\"5px\"\n                    \"padding-right\":\"5px\"\n\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\n\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\n        barcharter \".pvtTotal.colTotal\"\n\n        return this\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var FLAT_KEY_DELIM, PivotData, addSeparators, aggregatorTemplates, aggregators, calculateValueRanges, dayNamesEn, derivers, generateHeatmappers, getSort, locales, mthNamesEn, naturalSort, numberFormat, pivotTableRenderer, rd, renderers, rx, rz, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\"\n      };\n      opts = $.extend({}, defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x) || (x == null)) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      uniques: function(fn, formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return fn(this.uniq);\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: null,\n              push: function(record) {\n                var x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  if (this.sum == null) {\n                    this.sum = 0;\n                  }\n                  return this.sum += x;\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      extremes: function(mode, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              sorter: getSort(data != null ? data.sorters : void 0, attr),\n              push: function(record) {\n                var ref, ref1, ref2, x;\n                x = record[attr];\n                if (mode === \"min\" || mode === \"max\") {\n                  x = parseFloat(x);\n                  if (!isNaN(x)) {\n                    this.val = Math[mode](x, (ref = this.val) != null ? ref : x);\n                  }\n                }\n                if (mode === \"first\") {\n                  if (this.sorter(x, (ref1 = this.val) != null ? ref1 : x) <= 0) {\n                    this.val = x;\n                  }\n                }\n                if (mode === \"last\") {\n                  if (this.sorter(x, (ref2 = this.val) != null ? ref2 : x) >= 0) {\n                    return this.val = x;\n                  }\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: function(x) {\n                if (isNaN(x)) {\n                  return x;\n                } else {\n                  return formatter(x);\n                }\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      quantile: function(q, formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              vals: [],\n              push: function(record) {\n                var x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.vals.push(x);\n                }\n              },\n              value: function() {\n                var i;\n                if (this.vals.length === 0) {\n                  return null;\n                }\n                this.vals.sort(function(a, b) {\n                  return a - b;\n                });\n                i = (this.vals.length - 1) * q;\n                return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      runningStat: function(mode, ddof, formatter) {\n        if (mode == null) {\n          mode = \"mean\";\n        }\n        if (ddof == null) {\n          ddof = 1;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              n: 0.0,\n              m: 0.0,\n              s: 0.0,\n              push: function(record) {\n                var m_new, x;\n                x = parseFloat(record[attr]);\n                if (isNaN(x)) {\n                  return;\n                }\n                this.n += 1.0;\n                if (this.n === 1.0) {\n                  return this.m = x;\n                } else {\n                  m_new = this.m + (x - this.m) / this.n;\n                  this.s = this.s + (x - this.m) * (x - m_new);\n                  return this.m = m_new;\n                }\n              },\n              value: function() {\n                if (mode === \"mean\") {\n                  if (this.n === 0) {\n                    return 0 / 0;\n                  } else {\n                    return this.m;\n                  }\n                }\n                if (this.n <= ddof) {\n                  return 0;\n                }\n                switch (mode) {\n                  case \"var\":\n                    return this.s / (this.n - ddof);\n                  case \"stdev\":\n                    return Math.sqrt(this.s / (this.n - ddof));\n                }\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var aggIdx, x;\n          aggIdx = arguments[0], x = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                var agg;\n                agg = data.getAggregator.apply(data, this.selector);\n                if ($.isArray(agg)) {\n                  agg = agg[aggIdx];\n                }\n                return this.inner.value() / agg.inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregatorTemplates.countUnique = function(f) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.length;\n      }), f);\n    };\n    aggregatorTemplates.listUnique = function(s) {\n      return aggregatorTemplates.uniques((function(x) {\n        return x.join(s);\n      }), (function(x) {\n        return x;\n      }));\n    };\n    aggregatorTemplates.max = function(f) {\n      return aggregatorTemplates.extremes('max', f);\n    };\n    aggregatorTemplates.min = function(f) {\n      return aggregatorTemplates.extremes('min', f);\n    };\n    aggregatorTemplates.first = function(f) {\n      return aggregatorTemplates.extremes('first', f);\n    };\n    aggregatorTemplates.last = function(f) {\n      return aggregatorTemplates.extremes('last', f);\n    };\n    aggregatorTemplates.median = function(f) {\n      return aggregatorTemplates.quantile(0.5, f);\n    };\n    aggregatorTemplates.average = function(f) {\n      return aggregatorTemplates.runningStat(\"mean\", 1, f);\n    };\n    aggregatorTemplates[\"var\"] = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"var\", ddof, f);\n    };\n    aggregatorTemplates.stdev = function(ddof, f) {\n      return aggregatorTemplates.runningStat(\"stdev\", ddof, f);\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Median\": tpl.median(usFmt),\n        \"Sample Variance\": tpl[\"var\"](1, usFmt),\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"First\": tpl.first(usFmt),\n        \"Last\": tpl.last(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Table Barchart\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).barchart();\n      },\n      \"Heatmap\": function(data, opts) {\n        return pivotTableRenderer(data, opts, \"heatmap\");\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return pivotTableRenderer(data, opts, \"rowheatmap\");\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return pivotTableRenderer(data, opts, \"colheatmap\");\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter values\",\n          apply: \"Apply\",\n          cancel: \"Cancel\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    rx = /(\\d+)|(\\D+)/g;\n    rd = /\\d/;\n    rz = /^0/;\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, nas, nbs;\n        if ((bs != null) && (as == null)) {\n          return -1;\n        }\n        if ((as != null) && (bs == null)) {\n          return 1;\n        }\n        if (typeof as === \"number\" && isNaN(as)) {\n          return -1;\n        }\n        if (typeof bs === \"number\" && isNaN(bs)) {\n          return 1;\n        }\n        nas = +as;\n        nbs = +bs;\n        if (nas < nbs) {\n          return -1;\n        }\n        if (nas > nbs) {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs !== \"number\") {\n          return -1;\n        }\n        if (typeof bs === \"number\" && typeof as !== \"number\") {\n          return 1;\n        }\n        if (typeof as === \"number\" && typeof bs === \"number\") {\n          return 0;\n        }\n        if (isNaN(nbs) && !isNaN(nas)) {\n          return -1;\n        }\n        if (isNaN(nas) && !isNaN(nbs)) {\n          return 1;\n        }\n        a = String(as);\n        b = String(bs);\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, l_mapping, mapping, x;\n      mapping = {};\n      l_mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n        if (typeof x === \"string\") {\n          l_mapping[x.toLowerCase()] = i;\n        }\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else if ((l_mapping[a] != null) && (l_mapping[b] != null)) {\n          return l_mapping[a] - l_mapping[b];\n        } else if (l_mapping[a] != null) {\n          return -1;\n        } else if (l_mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      if (sorters != null) {\n        if ($.isFunction(sorters)) {\n          sort = sorters(attr);\n          if ($.isFunction(sort)) {\n            return sort;\n          }\n        } else if (sorters[attr] != null) {\n          return sorters[attr];\n        }\n      }\n      return naturalSort;\n    };\n\n    /*\n    Data Model class\n     */\n    FLAT_KEY_DELIM = '\\u0001';\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        var ref, ref1, ref10, ref11, ref12, ref13, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;\n        if (opts == null) {\n          opts = {};\n        }\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.input = input;\n        this.aggregator = (ref = opts.aggregator) != null ? ref : aggregatorTemplates.count()();\n        this.aggregatorName = (ref1 = opts.aggregatorName) != null ? ref1 : \"Count\";\n        this.multiAggAttr = (ref2 = opts.multiAggAttr) != null ? ref2 : \"_metrics\";\n        this.colAttrs = (ref3 = opts.cols) != null ? ref3 : [];\n        this.rowAttrs = (ref4 = opts.rows) != null ? ref4 : [];\n        this.valAttrs = (ref5 = opts.vals) != null ? ref5 : [];\n        if ($.isArray(this.aggregator) && (ref6 = this.multiAggAttr, indexOf.call(this.colAttrs, ref6) < 0) && (ref7 = this.multiAggAttr, indexOf.call(this.rowAttrs, ref7) < 0)) {\n          this.colAttrs.push(this.multiAggAttr);\n        }\n        this.sorters = (ref8 = opts.sorters) != null ? ref8 : {};\n        this.rowOrder = (ref9 = opts.rowOrder) != null ? ref9 : \"key_a_to_z\";\n        this.colOrder = (ref10 = opts.colOrder) != null ? ref10 : \"key_a_to_z\";\n        this.derivedAttributes = (ref11 = opts.derivedAttributes) != null ? ref11 : {};\n        this.filter = (ref12 = opts.filter) != null ? ref12 : (function() {\n          return true;\n        });\n        this.emptyValue = (ref13 = opts.emptyValue) != null ? ref13 : 'null';\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.tree = {};\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = !$.isArray(this.aggregator) ? this.aggregator(this, [], []) : this.aggregator.map((function(_this) {\n          return function(agg) {\n            return agg(_this, [], []);\n          };\n        })(this));\n        this.sorted = false;\n        this.valueRanges = {};\n        this.opts = opts;\n        PivotData.forEachRecord(input, opts, (function(_this) {\n          return function(record) {\n            if (opts.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n        if (input != null) {\n          this.setValueRanges;\n        }\n      }\n\n      PivotData.forEachRecord = function(input, opts, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(opts.derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, ref1, v;\n            ref = opts.derivedAttributes;\n            for (k in ref) {\n              v = ref[k];\n              record[k] = (ref1 = v(record)) != null ? ref1 : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if (!opts.treatDataArrayAsRecords) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof $) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.prototype.forEachMatchingRecord = function(criteria, callback) {\n        return PivotData.forEachRecord(this.input, this.opts, (function(_this) {\n          return function(record) {\n            var k, ref, v;\n            if (!_this.opts.filter(record)) {\n              return;\n            }\n            for (k in criteria) {\n              if (!hasProp.call(criteria, k)) continue;\n              v = criteria[k];\n              if (v !== ((ref = record[k]) != null ? ref : _this.emptyValue)) {\n                return;\n              }\n            }\n            return callback(record);\n          };\n        })(this));\n      };\n\n      PivotData.prototype.arrSort = function(attrs, order) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(keyA, keyB) {\n          var attrIdx, comparison, sorter;\n          for (attrIdx in sortersArr) {\n            if (!hasProp.call(sortersArr, attrIdx)) continue;\n            sorter = sortersArr[attrIdx];\n            comparison = sorter(keyA[attrIdx], keyB[attrIdx]);\n            if ((order != null) && order[attrIdx] === \"-\") {\n              comparison *= -1;\n            }\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        var _sortByAggVal, aggIdx, attrs, attrsOrder, idx, isDesc, isRow, key, keys, l, len1, ref, ref1, results, sortOrder, sortParts, sortType, sortVal;\n        if (this.sorted) {\n          return;\n        }\n        this.sorted = true;\n        ref = [[this.rowOrder, this.rowKeys, this.rowAttrs], [this.colOrder, this.colKeys, this.colAttrs]];\n        results = [];\n        for (idx = l = 0, len1 = ref.length; l < len1; idx = ++l) {\n          ref1 = ref[idx], sortOrder = ref1[0], keys = ref1[1], attrs = ref1[2];\n          isRow = idx === 0;\n          _sortByAggVal = (function(_this) {\n            return function(comparisonKey, isDesc, aggIdx) {\n              var _getVal;\n              _getVal = function(sortKey) {\n                var agg, col, row;\n                row = isRow ? sortKey : comparisonKey;\n                col = !isRow ? sortKey : comparisonKey;\n                agg = _this.getAggregator(row, col);\n                if ($.isArray(agg)) {\n                  agg = agg[aggIdx || 0];\n                }\n                return agg.value();\n              };\n              return keys.sort(function(a, b) {\n                return naturalSort(_getVal(a), _getVal(b)) * (isDesc ? -1 : 1);\n              });\n            };\n          })(this);\n          switch (sortOrder) {\n            case \"value_a_to_z\":\n              results.push(_sortByAggVal([]));\n              break;\n            case \"value_z_to_a\":\n              results.push(_sortByAggVal([], true));\n              break;\n            case \"key_a_to_z\":\n              results.push(keys.sort(this.arrSort(attrs)));\n              break;\n            default:\n              sortParts = sortOrder.split(\"_\");\n              sortType = sortParts[0];\n              switch (sortType) {\n                case \"attr\":\n                  attrsOrder = sortParts.slice(1);\n                  results.push(keys.sort(this.arrSort(attrs, attrsOrder)));\n                  break;\n                default:\n                  sortVal = sortParts[1];\n                  isDesc = false;\n                  if (sortVal.startsWith(\"-\")) {\n                    sortVal = sortVal.slice(1);\n                    isDesc = true;\n                  }\n                  if (sortType === \"key\") {\n                    key = sortVal.split(FLAT_KEY_DELIM);\n                    results.push(_sortByAggVal(key, isDesc));\n                  } else {\n                    aggIdx = parseInt(sortVal);\n                    results.push(_sortByAggVal([], isDesc, aggIdx));\n                  }\n              }\n          }\n        }\n        return results;\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        var e;\n        try {\n          this.sortKeys();\n        } catch (error) {\n          e = error;\n        }\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        var e;\n        try {\n          this.sortKeys();\n        } catch (error) {\n          e = error;\n        }\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record, aggIdx) {\n        var agg, aggregator, allTotal, attrs, colKey, flatColKey, flatKey, flatRowKey, getTotalsAgg, isMultiTotals, keys, l, len1, len2, len3, len4, n, o, rawKey, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, rowKey, rowOrCol, t, totals, totalsAgg, x;\n        if ($.isArray(this.aggregator) && (aggIdx == null)) {\n          ref = this.aggregator;\n          for (aggIdx = l = 0, len1 = ref.length; l < len1; aggIdx = ++l) {\n            agg = ref[aggIdx];\n            record[this.multiAggAttr] = aggIdx;\n            this.processRecord(record, aggIdx);\n          }\n          delete record[this.multiAggAttr];\n          return;\n        }\n        aggregator = aggIdx != null ? this.aggregator[aggIdx] : this.aggregator;\n        colKey = [];\n        rowKey = [];\n        ref1 = this.colAttrs;\n        for (n = 0, len2 = ref1.length; n < len2; n++) {\n          x = ref1[n];\n          colKey.push((ref2 = record[x]) != null ? ref2 : this.emptyValue);\n        }\n        ref3 = this.rowAttrs;\n        for (o = 0, len3 = ref3.length; o < len3; o++) {\n          x = ref3[o];\n          rowKey.push((ref4 = record[x]) != null ? ref4 : this.emptyValue);\n        }\n        flatRowKey = rowKey.join(FLAT_KEY_DELIM);\n        flatColKey = colKey.join(FLAT_KEY_DELIM);\n        allTotal = aggIdx != null ? this.allTotal[aggIdx] : this.allTotal;\n        allTotal.push(record);\n        getTotalsAgg = (function(_this) {\n          return function(rowOrCol, key) {\n            var c, r;\n            r = rowOrCol === \"row\" ? key : [];\n            c = rowOrCol === \"row\" ? [] : key;\n            return aggregator(_this, r, c);\n          };\n        })(this);\n        ref5 = [[\"row\", this.colAttrs, this.rowKeys, rowKey, flatRowKey, this.rowTotals], [\"col\", this.rowAttrs, this.colKeys, colKey, flatColKey, this.colTotals]];\n        for (t = 0, len4 = ref5.length; t < len4; t++) {\n          ref6 = ref5[t], rowOrCol = ref6[0], attrs = ref6[1], keys = ref6[2], rawKey = ref6[3], flatKey = ref6[4], totals = ref6[5];\n          isMultiTotals = (aggIdx != null) && (ref7 = this.multiAggAttr, indexOf.call(attrs, ref7) >= 0);\n          if (rawKey.length !== 0) {\n            if (!totals[flatKey]) {\n              keys.push(rawKey);\n              totals[flatKey] = isMultiTotals ? [] : getTotalsAgg(rowOrCol, rawKey);\n            }\n            if (isMultiTotals && !totals[flatKey][aggIdx]) {\n              totals[flatKey][aggIdx] = getTotalsAgg(rowOrCol, rawKey);\n            }\n            totalsAgg = totals[flatKey];\n            if (isMultiTotals) {\n              totalsAgg = totalsAgg[aggIdx];\n            }\n            totalsAgg.push(record);\n          }\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = aggregator(this, rowKey, colKey);\n          }\n          return this.tree[flatRowKey][flatColKey].push(record);\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(FLAT_KEY_DELIM);\n        flatColKey = colKey.join(FLAT_KEY_DELIM);\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        if ($.isArray(agg)) {\n          return agg;\n        } else {\n          return agg != null ? agg : {\n            value: (function() {\n              return null;\n            }),\n            format: function() {\n              return \"\";\n            }\n          };\n        }\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts, rendererType) {\n      var agg, aggIdx, aggregator, colAttr, colAttrIdx, colAttrs, colKey, colKeyIdx, colKeys, createHeader, createTotalsCell, createTotalsRow, defaults, flatColKey, flatRowKey, getClickHandler, getHeaderClickHandler, heatmappers, i, l, len1, len2, len3, len4, len5, len6, len7, len8, n, o, ref, ref1, ref2, ref3, result, rowAttr, rowAttrIdx, rowAttrs, rowKey, rowKeyIdx, rowKeys, scaler, spanSize, t, tbody, td, th, thead, totalAggregator, tr, txt, u, val, valueRanges, w, x, y, z;\n      defaults = {\n        table: {\n          clickCallback: null\n        },\n        localeStrings: {\n          totals: \"Totals\"\n        },\n        treatDataArrayAsRecords: false\n      };\n      opts = $.extend(true, {}, defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      if (opts.table.clickCallback) {\n        getClickHandler = function(value, rowKey, colKey) {\n          var attr, filters, i, l, len1, len2, n;\n          filters = {};\n          for (i = l = 0, len1 = colAttrs.length; l < len1; i = ++l) {\n            attr = colAttrs[i];\n            if (colKey[i] != null) {\n              filters[attr] = colKey[i];\n            }\n          }\n          for (i = n = 0, len2 = rowAttrs.length; n < len2; i = ++n) {\n            attr = rowAttrs[i];\n            if (rowKey[i] != null) {\n              filters[attr] = rowKey[i];\n            }\n          }\n          return function(e) {\n            return opts.table.clickCallback(e, value, filters, pivotData);\n          };\n        };\n      }\n      if (opts.table.headerClickCallback) {\n        getHeaderClickHandler = function(rowOrCol, type, val) {\n          return function(e) {\n            return opts.table.headerClickCallback(e, rowOrCol, type, val);\n          };\n        };\n      }\n      if (rendererType != null) {\n        valueRanges = calculateValueRanges(rendererType, pivotData);\n        if (rendererType === \"heatmap\" || rendererType === \"rowheatmap\" || rendererType === \"colheatmap\") {\n          heatmappers = generateHeatmappers(valueRanges, opts);\n        } else {\n          scaler = null;\n        }\n      }\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(keys, keyIdx, maxAttrIdx) {\n        var attrIdx, l, len, n, noDraw, ref, ref1, stop;\n        if (keyIdx !== 0) {\n          noDraw = true;\n          for (attrIdx = l = 0, ref = maxAttrIdx; 0 <= ref ? l <= ref : l >= ref; attrIdx = 0 <= ref ? ++l : --l) {\n            if (keys[keyIdx - 1][attrIdx] !== keys[keyIdx][attrIdx]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (keyIdx + len < keys.length) {\n          stop = false;\n          for (attrIdx = n = 0, ref1 = maxAttrIdx; 0 <= ref1 ? n <= ref1 : n >= ref1; attrIdx = 0 <= ref1 ? ++n : --n) {\n            if (keys[keyIdx][attrIdx] !== keys[keyIdx + len][attrIdx]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      for (colAttrIdx = l = 0, len1 = colAttrs.length; l < len1; colAttrIdx = ++l) {\n        colAttr = colAttrs[colAttrIdx];\n        tr = document.createElement(\"tr\");\n        if (parseInt(colAttrIdx) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = colAttr;\n        if (getHeaderClickHandler != null) {\n          th.onclick = getHeaderClickHandler(\"col\", \"attr\", colAttr);\n        }\n        tr.appendChild(th);\n        for (colKeyIdx = n = 0, len2 = colKeys.length; n < len2; colKeyIdx = ++n) {\n          colKey = colKeys[colKeyIdx];\n          x = spanSize(colKeys, parseInt(colKeyIdx), parseInt(colAttrIdx));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            if (opts.formatHeader) {\n              th.textContent = opts.formatHeader(colKey[colAttrIdx], colAttrs[colAttrIdx]);\n            } else {\n              th.textContent = colKey[colAttrIdx];\n            }\n            th.setAttribute(\"colspan\", x);\n            if ((getHeaderClickHandler != null) && colAttrIdx === (colAttrs.length - 1)) {\n              flatColKey = colKey.join(FLAT_KEY_DELIM);\n              th.onclick = getHeaderClickHandler(\"col\", \"key\", flatColKey);\n              th.setAttribute(\"data-flat-key\", flatColKey);\n            }\n            if (parseInt(colAttrIdx) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(colAttrIdx) === 0) {\n          createHeader = function(aggIdx) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n            th.innerHTML = opts.localeStrings.totals;\n            if (aggIdx != null) {\n              th.setAttribute(\"data-agg-idx\", aggIdx);\n            }\n            th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n            if (getHeaderClickHandler != null) {\n              th.onclick = getHeaderClickHandler(\"col\", \"totals\", aggIdx || 0);\n            }\n            return tr.appendChild(th);\n          };\n          if ($.isArray(pivotData.aggregator) && (ref = pivotData.multiAggAttr, indexOf.call(colAttrs, ref) >= 0)) {\n            if (colAttrs.length > 1) {\n              ref1 = pivotData.aggregator;\n              for (aggIdx = o = 0, len3 = ref1.length; o < len3; aggIdx = ++o) {\n                agg = ref1[aggIdx];\n                createHeader(aggIdx);\n              }\n            }\n          } else {\n            createHeader();\n          }\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i = t = 0, len4 = rowAttrs.length; t < len4; i = ++t) {\n          rowAttr = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = rowAttr;\n          if (getHeaderClickHandler != null) {\n            th.onclick = getHeaderClickHandler(\"row\", \"attr\", rowAttr);\n          }\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel pvtRowTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          if (getHeaderClickHandler != null) {\n            th.onclick = getHeaderClickHandler(\"col\", \"totals\", 0);\n          }\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      for (rowKeyIdx = u = 0, len5 = rowKeys.length; u < len5; rowKeyIdx = ++u) {\n        rowKey = rowKeys[rowKeyIdx];\n        tr = document.createElement(\"tr\");\n        for (rowAttrIdx in rowKey) {\n          if (!hasProp.call(rowKey, rowAttrIdx)) continue;\n          txt = rowKey[rowAttrIdx];\n          x = spanSize(rowKeys, parseInt(rowKeyIdx), parseInt(rowAttrIdx));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            if (opts.formatHeader) {\n              th.textContent = opts.formatHeader(txt, rowAttrs[rowAttrIdx]);\n            } else {\n              th.textContent = txt;\n            }\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(rowAttrIdx) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            if ((getHeaderClickHandler != null) && parseInt(rowAttrIdx) === rowAttrs.length - 1) {\n              flatRowKey = rowKey.join(FLAT_KEY_DELIM);\n              th.onclick = getHeaderClickHandler(\"row\", \"key\", flatRowKey);\n              th.setAttribute(\"data-flat-key\", flatRowKey);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (colKeyIdx = w = 0, len6 = colKeys.length; w < len6; colKeyIdx = ++w) {\n          colKey = colKeys[colKeyIdx];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + rowKeyIdx + \" col\" + colKeyIdx;\n          td.textContent = aggregator.format(val);\n          if (heatmappers != null) {\n            td.style.backgroundColor = (function() {\n              switch (rendererType) {\n                case \"heatmap\":\n                  return heatmappers.all(val);\n                case \"rowheatmap\":\n                  return heatmappers.rows[rowKeyIdx](val);\n                case \"colheatmap\":\n                  return heatmappers.cols[colKeyIdx](val);\n              }\n            })();\n          }\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, colKey);\n          }\n          tr.appendChild(td);\n        }\n        createTotalsCell = function(totalAggregator) {\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal rowTotal\";\n          td.textContent = totalAggregator.format(val);\n          if (heatmappers != null) {\n            td.style.backgroundColor = heatmappers.rowTotals(val);\n          }\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, rowKey, []);\n          }\n          td.setAttribute(\"data-for\", \"row\" + rowKeyIdx);\n          return tr.appendChild(td);\n        };\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        if ($.isArray(totalAggregator)) {\n          if (colAttrs.length > 1) {\n            for (y = 0, len7 = totalAggregator.length; y < len7; y++) {\n              agg = totalAggregator[y];\n              createTotalsCell(agg);\n            }\n          }\n        } else {\n          createTotalsCell(totalAggregator);\n        }\n        tbody.appendChild(tr);\n      }\n      createTotalsRow = function(aggIdx) {\n        var createGrandTotalCell, i1, len8, len9, z;\n        tr = document.createElement(\"tr\");\n        th = document.createElement(\"th\");\n        th.className = \"pvtTotalLabel pvtColTotalLabel\";\n        th.innerHTML = opts.localeStrings.totals;\n        if (aggIdx != null) {\n          th.setAttribute(\"data-agg-idx\", aggIdx);\n        }\n        th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n        if (getHeaderClickHandler != null) {\n          th.onclick = getHeaderClickHandler(\"row\", \"totals\", aggIdx || 0);\n        }\n        tr.appendChild(th);\n        for (colKeyIdx = z = 0, len8 = colKeys.length; z < len8; colKeyIdx = ++z) {\n          colKey = colKeys[colKeyIdx];\n          totalAggregator = pivotData.getAggregator([], colKey);\n          if (aggIdx != null) {\n            totalAggregator = totalAggregator[aggIdx];\n          }\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtTotal colTotal\";\n          td.textContent = totalAggregator.format(val);\n          if (heatmappers != null) {\n            td.style.backgroundColor = heatmappers.colTotals(val);\n          }\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, [], colKey);\n          }\n          td.setAttribute(\"data-for\", \"col\" + colKeyIdx);\n          tr.appendChild(td);\n        }\n        createGrandTotalCell = function(totalAggregator) {\n          val = totalAggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtGrandTotal\";\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          if (getClickHandler != null) {\n            td.onclick = getClickHandler(val, [], []);\n          }\n          return tr.appendChild(td);\n        };\n        totalAggregator = pivotData.getAggregator([], []);\n        if (!$.isArray(totalAggregator)) {\n          createGrandTotalCell(totalAggregator);\n        } else if (aggIdx != null) {\n          createGrandTotalCell(totalAggregator[aggIdx]);\n        } else {\n          if (colAttrs.length > 1) {\n            for (i1 = 0, len9 = totalAggregator.length; i1 < len9; i1++) {\n              agg = totalAggregator[i1];\n              createGrandTotalCell(agg);\n            }\n          }\n        }\n        return tbody.appendChild(tr);\n      };\n      if ($.isArray(pivotData.aggregator) && (ref2 = pivotData.multiAggAttr, indexOf.call(rowAttrs, ref2) >= 0)) {\n        if (rowAttrs.length > 1) {\n          ref3 = pivotData.aggregator;\n          for (aggIdx = z = 0, len8 = ref3.length; z < len8; aggIdx = ++z) {\n            agg = ref3[aggIdx];\n            createTotalsRow(aggIdx);\n          }\n        }\n      } else {\n        createTotalsRow();\n      }\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n    calculateValueRanges = (function(_this) {\n      return function(rendererType, pivotData) {\n        var colKey, colKeyIdx, l, len1, len2, len3, len4, len5, n, o, rangeType, rangeTypes, ref, ref1, rowKey, rowKeyIdx, seedRange, t, totalAgg, totalAggs, u, updateRange, val, valueRanges;\n        valueRanges = {};\n        rangeTypes = (function() {\n          switch (rendererType) {\n            case \"heatmap\":\n              return [\"all\", \"rowTotals\", \"colTotals\"];\n            case \"rowheatmap\":\n              return [\"rows\", \"rowTotals\", \"colTotals\"];\n            case \"colheatmap\":\n              return [\"cols\", \"rowTotals\", \"colTotals\"];\n            case \"barchart\":\n              return [\"rows\", \"colTotals\"];\n          }\n        })();\n        seedRange = function(rangeType) {\n          var key, keyIdx, keys, l, len1, results, seedDimRange;\n          if (rangeType === \"rows\" || rangeType === \"cols\") {\n            valueRanges[rangeType] = {};\n            keys = rangeType === \"rows\" ? pivotData.rowKeys : pivotData.colKeys;\n            seedDimRange = function(keyIdx) {\n              return valueRanges[rangeType][keyIdx] = [2e308, -2e308];\n            };\n            results = [];\n            for (keyIdx = l = 0, len1 = keys.length; l < len1; keyIdx = ++l) {\n              key = keys[keyIdx];\n              results.push(seedDimRange(keyIdx));\n            }\n            return results;\n          } else {\n            return valueRanges[rangeType] = [2e308, -2e308];\n          }\n        };\n        for (l = 0, len1 = rangeTypes.length; l < len1; l++) {\n          rangeType = rangeTypes[l];\n          seedRange(rangeType);\n        }\n        updateRange = function(range, val) {\n          if ((val != null) && isFinite(val)) {\n            range[0] = Math.min(range[0], val);\n            return range[1] = Math.max(range[1], val);\n          }\n        };\n        ref = pivotData.rowKeys;\n        for (rowKeyIdx = n = 0, len2 = ref.length; n < len2; rowKeyIdx = ++n) {\n          rowKey = ref[rowKeyIdx];\n          ref1 = pivotData.colKeys;\n          for (colKeyIdx = o = 0, len3 = ref1.length; o < len3; colKeyIdx = ++o) {\n            colKey = ref1[colKeyIdx];\n            val = pivotData.getAggregator(rowKey, colKey).value();\n            if (valueRanges.all != null) {\n              updateRange(valueRanges.all, val);\n            }\n            if (valueRanges.rows != null) {\n              updateRange(valueRanges.rows[rowKeyIdx], val);\n            }\n            if (valueRanges.cols != null) {\n              updateRange(valueRanges.cols[colKeyIdx], val);\n            }\n            if (rowKeyIdx === 0 && (valueRanges.colTotals != null)) {\n              totalAggs = $.makeArray(pivotData.getAggregator([], colKey));\n              for (t = 0, len4 = totalAggs.length; t < len4; t++) {\n                totalAgg = totalAggs[t];\n                updateRange(valueRanges.colTotals, totalAgg.value());\n              }\n            }\n          }\n          if (valueRanges.rowTotals != null) {\n            totalAggs = $.makeArray(pivotData.getAggregator(rowKey, []));\n            for (u = 0, len5 = totalAggs.length; u < len5; u++) {\n              totalAgg = totalAggs[u];\n              updateRange(valueRanges.rowTotals, totalAgg.value());\n            }\n          }\n        }\n        return valueRanges;\n      };\n    })(this);\n    generateHeatmappers = function(valueRanges, opts) {\n      var colorScaleGenerator, heatmappers, keyIdx, range, rangeType, ref, ref1;\n      heatmappers = {};\n      colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(arg) {\n          var max, min;\n          min = arg[0], max = arg[1];\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      for (rangeType in valueRanges) {\n        if (rangeType === \"rows\" || rangeType === \"cols\") {\n          heatmappers[rangeType] = {};\n          ref1 = valueRanges[rangeType];\n          for (keyIdx in ref1) {\n            range = ref1[keyIdx];\n            heatmappers[rangeType][keyIdx] = colorScaleGenerator(range);\n          }\n        } else {\n          heatmappers[rangeType] = colorScaleGenerator(valueRanges[rangeType]);\n        }\n      }\n      return heatmappers;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, inputOpts, locale) {\n      var defaults, e, localeDefaults, localeStrings, opts, pivotData, result, x;\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      result = null;\n      try {\n        pivotData = input instanceof opts.dataClass ? input : new opts.dataClass(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          this.trigger(\"pivotTableError\", e);\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error) {\n        e = error;\n        this.trigger(\"pivotTableError\", e);\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggregator, attr, attrLength, attrValues, c, colOrderArrow, defaults, e, existingOpts, fn1, i, initialRender, l, len1, len2, len3, localeDefaults, localeStrings, materializedInput, n, o, opts, ordering, pivotTable, recordsProcessed, ref, ref1, ref2, ref3, refresh, refreshDelayed, renderer, rendererControl, rowOrderArrow, shownAttributes, shownInAggregators, shownInDragDrop, tr1, tr2, uiTable, unused, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        hiddenFromAggregators: [],\n        hiddenFromDragDrop: [],\n        menuLimit: 500,\n        cols: [],\n        rows: [],\n        vals: [],\n        rowOrder: \"key_a_to_z\",\n        colOrder: \"key_a_to_z\",\n        dataClass: PivotData,\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        onRefresh: null,\n        filter: function() {\n          return true;\n        },\n        sorters: {},\n        treatDataArrayAsRecords: false\n      };\n      localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings);\n      localeDefaults = {\n        rendererOptions: {\n          localeStrings: localeStrings\n        },\n        localeStrings: localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts));\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        attrValues = {};\n        materializedInput = [];\n        recordsProcessed = 0;\n        PivotData.forEachRecord(input, opts, function(record) {\n          var attr, base, ref, value;\n          if (!opts.filter(record)) {\n            return;\n          }\n          materializedInput.push(record);\n          for (attr in record) {\n            if (!hasProp.call(record, attr)) continue;\n            if (attrValues[attr] == null) {\n              attrValues[attr] = {};\n              if (recordsProcessed > 0) {\n                attrValues[attr][this.emptyValue] = recordsProcessed;\n              }\n            }\n          }\n          for (attr in attrValues) {\n            value = (ref = record[attr]) != null ? ref : this.emptyValue;\n            if ((base = attrValues[attr])[value] == null) {\n              base[value] = 0;\n            }\n            attrValues[attr][value]++;\n          }\n          return recordsProcessed++;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<td>\");\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref = opts.renderers;\n        for (x in ref) {\n          if (!hasProp.call(ref, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var results;\n          results = [];\n          for (a in attrValues) {\n            if (indexOf.call(opts.hiddenAttributes, a) < 0) {\n              results.push(a);\n            }\n          }\n          return results;\n        })();\n        shownInAggregators = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            c = shownAttributes[l];\n            if (indexOf.call(opts.hiddenFromAggregators, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        shownInDragDrop = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            c = shownAttributes[l];\n            if (indexOf.call(opts.hiddenFromDragDrop, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (l = 0, len1 = shownInDragDrop.length; l < len1; l++) {\n            a = shownInDragDrop[l];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          unused.addClass('pvtVertList');\n        } else {\n          unused.addClass('pvtHorizList');\n        }\n        fn1 = function(attr) {\n          var attrElem, checkContainer, closeFilterBox, controls, filterItem, filterItemExcluded, finalButtons, hasExcludedItem, len2, n, placeholder, ref1, sorter, triangleLink, v, value, valueCount, valueList, values;\n          values = (function() {\n            var results;\n            results = [];\n            for (v in attrValues[attr]) {\n              results.push(v);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").append($(\"<span>\").text(attr), $(\"<span>\").addClass(\"count\").text(\"(\" + values.length + \")\")));\n          if (values.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            if (values.length > 5) {\n              controls = $(\"<p>\").appendTo(valueList);\n              sorter = getSort(opts.sorters, attr);\n              placeholder = opts.localeStrings.filterResults;\n              $(\"<input>\", {\n                type: \"text\"\n              }).appendTo(controls).attr({\n                placeholder: placeholder,\n                \"class\": \"pvtSearch\"\n              }).bind(\"keyup\", function() {\n                var accept, accept_gen, filter;\n                filter = $(this).val().toLowerCase().trim();\n                accept_gen = function(prefix, accepted) {\n                  return function(v) {\n                    var real_filter, ref1;\n                    real_filter = filter.substring(prefix.length).trim();\n                    if (real_filter.length === 0) {\n                      return true;\n                    }\n                    return ref1 = Math.sign(sorter(v.toLowerCase(), real_filter)), indexOf.call(accepted, ref1) >= 0;\n                  };\n                };\n                accept = filter.startsWith(\">=\") ? accept_gen(\">=\", [1, 0]) : filter.startsWith(\"<=\") ? accept_gen(\"<=\", [-1, 0]) : filter.startsWith(\">\") ? accept_gen(\">\", [1]) : filter.startsWith(\"<\") ? accept_gen(\"<\", [-1]) : filter.startsWith(\"~\") ? function(v) {\n                  if (filter.substring(1).trim().length === 0) {\n                    return true;\n                  }\n                  return v.toLowerCase().match(filter.substring(1));\n                } : function(v) {\n                  return v.toLowerCase().indexOf(filter) !== -1;\n                };\n                return valueList.find('.pvtCheckContainer p label span.value').each(function() {\n                  if (accept($(this).text())) {\n                    return $(this).parent().parent().show();\n                  } else {\n                    return $(this).parent().parent().hide();\n                  }\n                });\n              });\n              controls.append($(\"<br>\"));\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n                valueList.find(\"input:visible:not(:checked)\").prop(\"checked\", true).toggleClass(\"changed\");\n                return false;\n              });\n              $(\"<button>\", {\n                type: \"button\"\n              }).appendTo(controls).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n                valueList.find(\"input:visible:checked\").prop(\"checked\", false).toggleClass(\"changed\");\n                return false;\n              });\n            }\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref1 = values.sort(getSort(opts.sorters, attr));\n            for (n = 0, len2 = ref1.length; n < len2; n++) {\n              value = ref1[n];\n              valueCount = attrValues[attr][value];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[attr], value) < 0);\n              } else if (opts.exclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[attr], value) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr, value]).appendTo(filterItem).bind(\"change\", function() {\n                return $(this).toggleClass(\"changed\");\n              });\n              filterItem.append($(\"<span>\").addClass(\"value\").text(value));\n              filterItem.append($(\"<span>\").addClass(\"count\").text(\"(\" + valueCount + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          closeFilterBox = function() {\n            if (valueList.find(\"[type='checkbox']\").length > valueList.find(\"[type='checkbox']:checked\").length) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            valueList.find('.pvtSearch').val('');\n            valueList.find('.pvtCheckContainer p').show();\n            return valueList.hide();\n          };\n          finalButtons = $(\"<p>\").appendTo(valueList);\n          if (values.length <= opts.menuLimit) {\n            $(\"<button>\", {\n              type: \"button\"\n            }).text(opts.localeStrings.apply).appendTo(finalButtons).bind(\"click\", function() {\n              if (valueList.find(\".changed\").removeClass(\"changed\").length) {\n                refresh();\n              }\n              return closeFilterBox();\n            });\n          }\n          $(\"<button>\", {\n            type: \"button\"\n          }).text(opts.localeStrings.cancel).appendTo(finalButtons).bind(\"click\", function() {\n            valueList.find(\".changed:checked\").removeClass(\"changed\").prop(\"checked\", false);\n            valueList.find(\".changed:not(:checked)\").removeClass(\"changed\").prop(\"checked\", true);\n            return closeFilterBox();\n          });\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", function(e) {\n            var left, ref2, top;\n            ref2 = $(e.currentTarget).position(), left = ref2.left, top = ref2.top;\n            return valueList.css({\n              left: left + 10,\n              top: top + 10\n            }).show();\n          });\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          return unused.append(attrElem).append(valueList);\n        };\n        for (i in shownInDragDrop) {\n          if (!hasProp.call(shownInDragDrop, i)) continue;\n          attr = shownInDragDrop[i];\n          fn1(attr);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref1 = opts.aggregators;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        ordering = {\n          key_a_to_z: {\n            rowSymbol: \"&varr;\",\n            colSymbol: \"&harr;\",\n            next: \"value_a_to_z\"\n          },\n          value_a_to_z: {\n            rowSymbol: \"&darr;\",\n            colSymbol: \"&rarr;\",\n            next: \"value_z_to_a\"\n          },\n          value_z_to_a: {\n            rowSymbol: \"&uarr;\",\n            colSymbol: \"&larr;\",\n            next: \"key_a_to_z\"\n          }\n        };\n        rowOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtRowOrder\").data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].rowSymbol);\n          return refresh();\n        });\n        colOrderArrow = $(\"<a>\", {\n          role: \"button\"\n        }).addClass(\"pvtColOrder\").data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol).bind(\"click\", function() {\n          $(this).data(\"order\", ordering[$(this).data(\"order\")].next);\n          $(this).html(ordering[$(this).data(\"order\")].colSymbol);\n          return refresh();\n        });\n        $(\"<td>\").addClass('pvtVals').appendTo(tr1).append(aggregator).append(rowOrderArrow).append(colOrderArrow).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tr2);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n          uiTable.find('tr:nth-child(2)').prepend(unused);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(rendererControl).append(unused));\n        }\n        this.html(uiTable);\n        ref2 = opts.cols;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownInDragDrop))));\n        }\n        ref3 = opts.rows;\n        for (o = 0, len3 = ref3.length; o < len3; o++) {\n          x = ref3[o];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownInDragDrop))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var exclusions, inclusions, len4, newDropdown, numInputsToProcess, pivotUIOptions, pvtVals, ref4, ref5, subopts, t, u, unusedAttrsContainer, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass\n            };\n            numInputsToProcess = (ref4 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref4 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = t = 0, ref5 = numInputsToProcess; 0 <= ref5 ? t < ref5 : t > ref5; x = 0 <= ref5 ? ++t : --t) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (u = 0, len4 = shownInAggregators.length; u < len4; u++) {\n                  attr = shownInAggregators[u];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            subopts.rowOrder = rowOrderArrow.data(\"order\");\n            subopts.colOrder = colOrderArrow.data(\"order\");\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, k, ref6, ref7;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref6 = \"\" + ((ref7 = record[k]) != null ? ref7 : 'null'), indexOf.call(excludedItems, ref6) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(materializedInput, subopts);\n            pivotUIOptions = $.extend({}, opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              colOrder: subopts.colOrder,\n              rowOrder: subopts.rowOrder,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        this.trigger(\"pivotTableError\", e);\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope, opts) {\n      var colorScaleGenerator, heatmapper, i, j, l, n, numCols, numRows, ref, ref1, ref2;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(values) {\n          var max, min;\n          min = Math.min.apply(Math, values);\n          max = Math.max.apply(Math, values);\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      heatmapper = (function(_this) {\n        return function(scope) {\n          var colorScale, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorScale = colorScaleGenerator(values);\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", colorScale(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref1 = numRows; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i);\n          }\n          break;\n        case \"colheatmap\":\n          for (j = n = 0, ref2 = numCols; 0 <= ref2 ? n < ref2 : n > ref2; j = 0 <= ref2 ? ++n : --n) {\n            heatmapper(\".pvtVal.col\" + j);\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\");\n      heatmapper(\".pvtTotal.colTotal\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    return $.fn.barchart = function(opts) {\n      var barcharter, i, l, numCols, numRows, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, min, range, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          if (max < 0) {\n            max = 0;\n          }\n          range = max;\n          min = Math.min.apply(Math, values);\n          if (min < 0) {\n            range = max - min;\n          }\n          scaler = function(x) {\n            return 100 * x / (1.4 * range);\n          };\n          return forEachCell(function(x, elem) {\n            var bBase, bgColor, text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\",\n              \"height\": \"55px\"\n            });\n            bgColor = \"gray\";\n            bBase = 0;\n            if (min < 0) {\n              bBase = scaler(-min);\n            }\n            if (x < 0) {\n              bBase += scaler(x);\n              bgColor = \"darkred\";\n              x = -x;\n            }\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": bBase + \"%\",\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": bgColor\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"]}