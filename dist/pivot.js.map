{"version":3,"file":"pivot.js","sources":["pivot.coffee"],"names":[],"mappings":"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","sourcesContent":["callWithJQuery = (pivotModule) ->\r\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\r\n        pivotModule require(\"jquery\")\r\n    else if typeof define is \"function\" and define.amd # AMD\r\n        define [\"jquery\"], pivotModule\r\n    # Plain browser env\r\n    else\r\n        pivotModule jQuery\r\n\r\ncallWithJQuery ($) ->\r\n\r\n    ###\r\n    Utilities\r\n    ###\r\n\r\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\r\n        nStr += ''\r\n        x = nStr.split('.')\r\n        x1 = x[0]\r\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\r\n        rgx = /(\\d+)(\\d{3})/\r\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\r\n        return x1 + x2\r\n\r\n    numberFormat = (opts) ->\r\n        defaults =\r\n            digitsAfterDecimal: 2, scaler: 1,\r\n            thousandsSep: \",\", decimalSep: \".\"\r\n            prefix: \"\", suffix: \"\"\r\n        opts = $.extend({}, defaults, opts)\r\n        (x) ->\r\n            return \"\" if isNaN(x) or not isFinite(x)\r\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\r\n            return \"\"+opts.prefix+result+opts.suffix\r\n\r\n    #aggregator templates default to US number formatting but this is overrideable\r\n    usFmt = numberFormat()\r\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\r\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\r\n\r\n    aggregatorTemplates =\r\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\r\n            count: 0\r\n            push:  -> @count++\r\n            value: -> @count\r\n            format: formatter\r\n\r\n        uniques: (fn, formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            uniq: []\r\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\r\n            value: -> fn(@uniq)\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            sum: 0\r\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\r\n            value: -> @sum\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        extremes: (mode, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            val: null\r\n            sorter: getSort(data?.sorters, attr)\r\n            push: (record) ->\r\n                x = record[attr]\r\n                if mode in [\"min\", \"max\"]\r\n                    x = parseFloat(x)\r\n                    if not isNaN x then @val = Math[mode](x, @val ? x)\r\n                if mode == \"first\" then @val = x if @sorter(x, @val ? x) <= 0\r\n                if mode == \"last\"  then @val = x if @sorter(x, @val ? x) >= 0\r\n            value: -> @val\r\n            format: (x) -> if isNaN(x) then x else formatter(x)\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        quantile: (q, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            vals: []\r\n            push: (record) ->\r\n                x = parseFloat(record[attr])\r\n                @vals.push(x) if not isNaN(x)\r\n            value: ->\r\n                return null if @vals.length == 0\r\n                @vals.sort((a,b) -> a-b)\r\n                i = (@vals.length-1)*q\r\n                return (@vals[Math.floor(i)] + @vals[Math.ceil(i)])/2.0\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        runningStat: (mode=\"mean\", ddof=1, formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\r\n            n: 0.0, m: 0.0, s: 0.0\r\n            push: (record) ->\r\n                x = parseFloat(record[attr])\r\n                return if isNaN(x)\r\n                @n += 1.0\r\n                if @n == 1.0\r\n                    @m = x\r\n                else\r\n                    m_new = @m + (x - @m)/@n\r\n                    @s = @s + (x - @m)*(x - m_new)\r\n                    @m = m_new\r\n            value: ->\r\n                if mode == \"mean\"\r\n                    return if @n == 0 then 0/0 else @m\r\n                return 0 if @n <= ddof\r\n                switch mode\r\n                    when \"var\"   then @s/(@n-ddof)\r\n                    when \"stdev\" then Math.sqrt(@s/(@n-ddof))\r\n            format: formatter\r\n            numInputs: if attr? then 0 else 1\r\n\r\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\r\n            sumNum: 0\r\n            sumDenom: 0\r\n            push: (record) ->\r\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\r\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\r\n            value: -> @sumNum/@sumDenom\r\n            format: formatter\r\n            numInputs: if num? and denom? then 0 else 2\r\n\r\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\r\n            sumNum: 0\r\n            sumDenom: 0\r\n            push: (record) ->\r\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\r\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\r\n            value: ->\r\n                sign = if upper then 1 else -1\r\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\r\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\r\n                    (1 + 1.642374415149816/@sumDenom)\r\n            format: formatter\r\n            numInputs: if num? and denom? then 0 else 2\r\n\r\n        #To support multi-metrics mode, these aggregator factories must be\r\n        #instantiated with the aggregator index, so that value() knows how\r\n        # to find the corresponding fractionOf aggregator for the denominator.\r\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (aggIdx, x...) -> (data, rowKey, colKey) ->\r\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\r\n            inner: wrapped(x...)(data, rowKey, colKey)\r\n            push: (record) -> @inner.push record\r\n            format: formatter\r\n            value: ->\r\n                agg = data.getAggregator(@selector...)\r\n                if $.isArray(agg)\r\n                    agg = agg[aggIdx]\r\n                return @inner.value() / agg.inner.value()\r\n            numInputs: wrapped(x...)().numInputs\r\n\r\n    aggregatorTemplates.countUnique = (f) -> aggregatorTemplates.uniques(((x) -> x.length), f)\r\n    aggregatorTemplates.listUnique =  (s) -> aggregatorTemplates.uniques(((x) -> x.join(s)), ((x)->x))\r\n    aggregatorTemplates.max =         (f) -> aggregatorTemplates.extremes('max', f)\r\n    aggregatorTemplates.min =         (f) -> aggregatorTemplates.extremes('min', f)\r\n    aggregatorTemplates.first =       (f) -> aggregatorTemplates.extremes('first', f)\r\n    aggregatorTemplates.last =        (f) -> aggregatorTemplates.extremes('last', f)\r\n    aggregatorTemplates.median =      (f) -> aggregatorTemplates.quantile(0.5, f)\r\n    aggregatorTemplates.average =     (f) -> aggregatorTemplates.runningStat(\"mean\", 1, f)\r\n    aggregatorTemplates.var =         (ddof, f) -> aggregatorTemplates.runningStat(\"var\", ddof, f)\r\n    aggregatorTemplates.stdev =       (ddof, f) -> aggregatorTemplates.runningStat(\"stdev\", ddof, f)\r\n\r\n    #default aggregators & renderers use US naming and number formatting\r\n    aggregators = do (tpl = aggregatorTemplates) ->\r\n        \"Count\":                tpl.count(usFmtInt)\r\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\r\n        \"List Unique Values\":   tpl.listUnique(\", \")\r\n        \"Sum\":                  tpl.sum(usFmt)\r\n        \"Integer Sum\":          tpl.sum(usFmtInt)\r\n        \"Average\":              tpl.average(usFmt)\r\n        \"Median\":               tpl.median(usFmt)\r\n        \"Sample Variance\":      tpl.var(1, usFmt)\r\n        \"Sample Standard Deviation\": tpl.stdev(1, usFmt)\r\n        \"Minimum\":              tpl.min(usFmt)\r\n        \"Maximum\":              tpl.max(usFmt)\r\n        \"First\":                tpl.first(usFmt)\r\n        \"Last\":                 tpl.last(usFmt)\r\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\r\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\r\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\r\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\r\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\r\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\r\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\r\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\r\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\r\n\r\n    renderers =\r\n        \"Table\":          (data, opts) ->   pivotTableRenderer(data, opts)\r\n        \"Table Barchart\": (data, opts) -> $(pivotTableRenderer(data, opts)).barchart()\r\n        \"Heatmap\":        (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\r\n        \"Row Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\r\n        \"Col Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\r\n\r\n    locales =\r\n        en:\r\n            aggregators: aggregators\r\n            renderers: renderers\r\n            localeStrings:\r\n                renderError: \"An error occurred rendering the PivotTable results.\"\r\n                computeError: \"An error occurred computing the PivotTable results.\"\r\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\r\n                selectAll: \"Select All\"\r\n                selectNone: \"Select None\"\r\n                tooMany: \"(too many to list)\"\r\n                filterResults: \"Filter values\"\r\n                apply: \"Apply\"\r\n                cancel: \"Cancel\"\r\n                totals: \"Totals\" #for table renderer\r\n                vs: \"vs\" #for gchart renderer\r\n                by: \"by\" #for gchart renderer\r\n\r\n    #dateFormat deriver l10n requires month and day names to be passed in directly\r\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\r\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\r\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\r\n\r\n    derivers =\r\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\r\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\r\n            utc = if utcOutput then \"UTC\" else \"\"\r\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\r\n                date = new Date(Date.parse(record[col]))\r\n                if isNaN(date) then return \"\"\r\n                formatString.replace /%(.)/g, (m, p) ->\r\n                    switch p\r\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\r\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\r\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\r\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\r\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\r\n                        when \"x\" then date[\"get#{utc}Day\"]()\r\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\r\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\r\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\r\n                        else \"%\" + p\r\n\r\n    rx = /(\\d+)|(\\D+)/g\r\n    rd = /\\d/\r\n    rz = /^0/\r\n    naturalSort = (as, bs) =>\r\n        #nulls first\r\n        return -1 if bs? and not as?\r\n        return  1 if as? and not bs?\r\n\r\n        #then raw NaNs\r\n        return -1 if typeof as == \"number\" and isNaN(as)\r\n        return  1 if typeof bs == \"number\" and isNaN(bs)\r\n\r\n        #numbers and numbery strings group together\r\n        nas = +as\r\n        nbs = +bs\r\n        return -1 if nas < nbs\r\n        return  1 if nas > nbs\r\n\r\n        #within that, true numbers before numbery strings\r\n        return -1 if typeof as == \"number\" and typeof bs != \"number\"\r\n        return  1 if typeof bs == \"number\" and typeof as != \"number\"\r\n        return  0 if typeof as == \"number\" and typeof bs == \"number\"\r\n\r\n        # 'Infinity' is a textual number, so less than 'A'\r\n        return -1 if isNaN(nbs) and not isNaN(nas)\r\n        return  1 if isNaN(nas) and not isNaN(nbs)\r\n\r\n        #finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\r\n        a = String(as)\r\n        b = String(bs)\r\n        return 0 if a == b\r\n        return (if a > b then 1 else -1) unless rd.test(a) and rd.test(b)\r\n\r\n        #special treatment for strings containing digits\r\n        a = a.match(rx) #create digits vs non-digit chunks and iterate through\r\n        b = b.match(rx)\r\n        while a.length and b.length\r\n            a1 = a.shift()\r\n            b1 = b.shift()\r\n            if a1 != b1\r\n                if rd.test(a1) and rd.test(b1) #both are digit chunks\r\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\r\n                else\r\n                    return (if a1 > b1 then 1 else -1)\r\n        return a.length - b.length\r\n\r\n    sortAs = (order) ->\r\n        mapping = {}\r\n        l_mapping = {} # sort lowercased keys similarly\r\n        for i, x of order\r\n            mapping[x] = i\r\n            l_mapping[x.toLowerCase()] = i if typeof x == \"string\"\r\n        (a, b) ->\r\n            if mapping[a]? and mapping[b]? then mapping[a] - mapping[b]\r\n            else if mapping[a]? then -1\r\n            else if mapping[b]? then 1\r\n            else if l_mapping[a]? and l_mapping[b]? then l_mapping[a] - l_mapping[b]\r\n            else if l_mapping[a]? then -1\r\n            else if l_mapping[b]? then 1\r\n            else naturalSort(a,b)\r\n\r\n    getSort = (sorters, attr) ->\r\n        if sorters?\r\n            if $.isFunction(sorters)\r\n                sort = sorters(attr)\r\n                return sort if $.isFunction(sort)\r\n            else if sorters[attr]?\r\n                return sorters[attr]\r\n        return naturalSort\r\n\r\n    ###\r\n    Data Model class\r\n    ###\r\n\r\n    class PivotData\r\n        constructor: (input, opts = {}) ->\r\n            @input = input\r\n\r\n            #May be an array of aggregators.\r\n            @aggregator = opts.aggregator ? aggregatorTemplates.count()()\r\n\r\n            #Only used by pivotUI(). No multi-aggregator support.\r\n            @aggregatorName = opts.aggregatorName ? \"Count\"\r\n\r\n            #If there are multiple aggregators, this fake attribute is used to generate the extra cols/rows.\r\n            @multiAggAttr = opts.multiAggAttr ? \"_metrics\"\r\n\r\n            #Attributes are the record fields selected by the user. Value attributes are used to instantiate aggregators.\r\n            @colAttrs = opts.cols ? []\r\n            @rowAttrs = opts.rows ? []\r\n            @valAttrs = opts.vals ? []  #Only used by plotly, gchart, and c3 renderers.\r\n\r\n            #Insert the multi-agg attribute as the last column if not provided already.\r\n            if $.isArray(@aggregator) and @multiAggAttr not in @colAttrs and @multiAggAttr not in @rowAttrs\r\n                @colAttrs.push @multiAggAttr\r\n\r\n            #Used when sorting keys by attribute value. See getSort().\r\n            #Either an object or a fn, e.g.: sorters[attr]=sortFn, or sorters(attr)=sortFn.\r\n            @sorters = opts.sorters ? {}\r\n\r\n            #How keys are sorted. See @sortKeys() for possible values.\r\n            @rowOrder = opts.rowOrder ? \"key_a_to_z\"\r\n            @colOrder = opts.colOrder ? \"key_a_to_z\"\r\n\r\n            #HIQ client derives its own attributes, and does not use this property.\r\n            @derivedAttributes = opts.derivedAttributes ? {}\r\n\r\n            @filter = opts.filter ? (-> true)\r\n            @emptyValue = opts.emptyValue ? 'null'\r\n\r\n            #Keys are generated tuples of attribute values.\r\n            @rowKeys = []\r\n            @colKeys = []\r\n\r\n            #Aggregator instances, one per value cell in the table. Created in @processData().\r\n            #Normal aggregators, at tree[rowKey][colKey].\r\n            @tree = {}\r\n            #Row/col total aggregators, at rowTotals[rowKey] and colTotals[colKey].\r\n            #In multi-metric mode, the values are arrays.\r\n            @rowTotals = {}\r\n            @colTotals = {}\r\n            #Grand total aggregator. In multi-metric mode, this is an array.\r\n            @allTotal = if not $.isArray(@aggregator) then @aggregator(this, [], []) else @aggregator.map((agg) => agg(this, [], []))\r\n\r\n            #Keys are not sorted on init, but when first accessed (e.g. in getRowKeys()).\r\n            @sorted = false\r\n\r\n            @opts = opts\r\n\r\n            #Generate table cells and aggregators from records that pass the filter.\r\n            PivotData.forEachRecord input, opts, (record) =>\r\n                @processRecord(record) if opts.filter(record)\r\n\r\n        #can handle arrays or jQuery selections of tables\r\n        @forEachRecord = (input, opts, f) ->\r\n            if $.isEmptyObject opts.derivedAttributes\r\n                addRecord = f\r\n            else\r\n                addRecord = (record) -> \r\n                    record[k] = v(record) ? record[k] for k, v of opts.derivedAttributes\r\n                    f(record)\r\n\r\n            #if it's a function, have it call us back\r\n            if $.isFunction(input)\r\n                input(addRecord)\r\n            else if $.isArray(input)\r\n                if !opts.treatDataArrayAsRecords #array of arrays\r\n                    for own i, compactRecord of input when i > 0\r\n                        record = {}\r\n                        record[k] = compactRecord[j] for own j, k of input[0]\r\n                        addRecord(record)\r\n                else #array of objects\r\n                    addRecord(record) for record in input\r\n            else if input instanceof $\r\n                tblCols = []\r\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\r\n                $(\"tbody > tr\", input).each (i) ->\r\n                    record = {}\r\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\r\n                    addRecord(record)\r\n            else\r\n                throw new Error(\"unknown input format\")\r\n\r\n        #Only used by examples/mps_prepop.html. Covered in tests/pivot_spec.coffee.\r\n        forEachMatchingRecord: (criteria, callback) ->\r\n            PivotData.forEachRecord @input, @opts, (record) =>\r\n                return if not @opts.filter(record)\r\n                for own k, v of criteria\r\n                    return if v != (record[k] ? @emptyValue)\r\n                callback(record)\r\n\r\n        #Create sort fn that sorts row/col keys by attribute value.\r\n        #Sorts coarser attributes first, e.g.: [\"A\", 10] < [\"B\", 1] < [\"B\", 5].\r\n        #`attrs`: Array of attributes on which to sort. Assumes keys are\r\n        #  composed of these attributes.\r\n        #`order`: Array of \"+\" or \"-\" values, one per attribute. \"-\"\r\n        #  indicates a descending sort.\r\n        arrSort: (attrs, order) =>\r\n            sortersArr = (getSort(@sorters, a) for a in attrs)\r\n            (keyA,keyB) ->\r\n                for own attrIdx, sorter of sortersArr\r\n                    comparison = sorter(keyA[attrIdx], keyB[attrIdx])\r\n                    if order? and order[attrIdx] == \"-\"\r\n                        comparison *= -1\r\n                    return comparison if comparison != 0\r\n                return 0\r\n\r\n        #Sort row and col keys based on @rowOrder and @colOrder. Possible values:\r\n        #  `key_[-]flatKey`: Sort based on the values for the given key, in \"flat\"\r\n        #    form (\\0-separated string). Optional \"-\" for descending sort.\r\n        #  `totals_[-]aggIdx`: Sort based on the totals values. aggIdx is the index\r\n        #    of the aggregator to use (ignored if not multi-metrics mode). Optional\r\n        #    \"-\" for descending sort.\r\n        #  `attr_[+|-]_...`: Sort based on attribute values. There is one asc/desc\r\n        #    indicator per attribute.\r\n        #  `value_[a_to_z|z_to_a]`: Legacy sort on totals values. Does not support\r\n        #    multi-metrics mode.\r\n        #  `key_[a_to_z]`: Legacy sort on attribute values, all ascending.\r\n        sortKeys: () =>\r\n            if @sorted\r\n                return\r\n            @sorted = true\r\n\r\n            for [sortOrder, keys, attrs], idx in [\r\n              [@rowOrder, @rowKeys, @rowAttrs],\r\n              [@colOrder, @colKeys, @colAttrs]\r\n            ]\r\n                isRow = idx == 0\r\n\r\n                #Sort keys by the value of the aggregator at `comparisonKey`.\r\n                #If `isDesc` is true, does a descending sort. In multi-metrics\r\n                #mode, `aggIdx` is the index of the totals aggregator to use.\r\n                _sortByAggVal = (comparisonKey, isDesc, aggIdx) =>\r\n                    _getVal = (sortKey) =>\r\n                        row = if isRow then sortKey else comparisonKey\r\n                        col = if not isRow then sortKey else comparisonKey\r\n                        agg = @getAggregator(row, col)\r\n                        if $.isArray(agg)\r\n                            agg = agg[aggIdx or 0]\r\n                        return agg.value()\r\n\r\n                    keys.sort (a,b) => naturalSort(_getVal(a), _getVal(b)) * (if isDesc then -1 else 1)\r\n\r\n                switch sortOrder\r\n                    #Legacy sorts.\r\n                    when \"value_a_to_z\" then _sortByAggVal([])\r\n                    when \"value_z_to_a\" then _sortByAggVal([], true)\r\n                    when \"key_a_to_z\" then keys.sort @arrSort(attrs)\r\n                    else\r\n                        sortParts = sortOrder.split(\"_\")\r\n                        sortType = sortParts[0]\r\n\r\n                        switch sortType\r\n                            when \"attr\"\r\n                                attrsOrder = sortParts.slice(1)\r\n                                keys.sort @arrSort(attrs, attrsOrder)\r\n                            else\r\n                                sortVal = sortParts[1]\r\n\r\n                                #Check for descending sort.\r\n                                isDesc = false\r\n                                if sortVal.startsWith(\"-\")\r\n                                    sortVal = sortVal.slice(1)\r\n                                    isDesc = true\r\n\r\n                                if sortType == \"key\"\r\n                                    key = sortVal.split(String.fromCharCode(0))\r\n                                    _sortByAggVal(key, isDesc)\r\n                                else  # sortType == \"totals\"\r\n                                    aggIdx = parseInt(sortVal)\r\n                                    _sortByAggVal([], isDesc, aggIdx)\r\n\r\n        getColKeys: () =>\r\n            @sortKeys()\r\n            return @colKeys\r\n\r\n        getRowKeys: () =>\r\n            @sortKeys()\r\n            return @rowKeys\r\n\r\n        #Generate keys for the record, and update all corresponding aggregators\r\n        #(i.e., the grand total, row/col total, and normal row+col aggregators).\r\n        #:aggIdx: In multi-metrics mode, index into the @aggregator array.\r\n        processRecord: (record, aggIdx) -> #this code is called in a tight loop\r\n\r\n            #In multi-metric mode, process record once per aggregator.\r\n            if $.isArray(@aggregator) and not aggIdx?\r\n                for agg, aggIdx in @aggregator\r\n                    record[@multiAggAttr] = aggIdx\r\n                    @processRecord(record, aggIdx)\r\n                delete record[@multiAggAttr]  # leave records unmodified\r\n                return\r\n\r\n            aggregator = if aggIdx? then @aggregator[aggIdx] else @aggregator\r\n\r\n            colKey = []\r\n            rowKey = []\r\n            colKey.push record[x] ? @emptyValue for x in @colAttrs\r\n            rowKey.push record[x] ? @emptyValue for x in @rowAttrs\r\n            flatRowKey = rowKey.join(String.fromCharCode(0))\r\n            flatColKey = colKey.join(String.fromCharCode(0))\r\n\r\n            #Grand total cell.\r\n            allTotal = if aggIdx? then @allTotal[aggIdx] else @allTotal\r\n            allTotal.push record\r\n\r\n            getTotalsAgg = (rowOrCol, key) =>  #fat arrow to get closure over PivotData object `this`\r\n                r = if rowOrCol == \"row\" then key else []\r\n                c = if rowOrCol == \"row\" then [] else key\r\n                return aggregator(this, r, c)\r\n\r\n            for [rowOrCol, attrs, keys, rawKey, flatKey, totals] in [\r\n              [\"row\", @colAttrs, @rowKeys, rowKey, flatRowKey, @rowTotals],\r\n              [\"col\", @rowAttrs, @colKeys, colKey, flatColKey, @colTotals]\r\n            ]\r\n                isMultiTotals = aggIdx? and @multiAggAttr in attrs\r\n                if rawKey.length != 0\r\n                    #First time we've seen this key: create totals aggregator.\r\n                    if not totals[flatKey]\r\n                        keys.push rawKey\r\n                        totals[flatKey] = if isMultiTotals then [] else getTotalsAgg(rowOrCol, rawKey)\r\n                    if isMultiTotals and not totals[flatKey][aggIdx]\r\n                        totals[flatKey][aggIdx] = getTotalsAgg(rowOrCol, rawKey)\r\n                    #Push record to the totals aggregator.\r\n                    totalsAgg = totals[flatKey]\r\n                    if isMultiTotals\r\n                        totalsAgg = totalsAgg[aggIdx]\r\n                    totalsAgg.push record\r\n\r\n            if colKey.length != 0 and rowKey.length != 0\r\n                if not @tree[flatRowKey]\r\n                    @tree[flatRowKey] = {}\r\n                if not @tree[flatRowKey][flatColKey]\r\n                    @tree[flatRowKey][flatColKey] = aggregator(this, rowKey, colKey)\r\n                @tree[flatRowKey][flatColKey].push record\r\n\r\n        #In multi-metric mode, totals aggregators are arrays.\r\n        getAggregator: (rowKey, colKey) =>\r\n            flatRowKey = rowKey.join(String.fromCharCode(0))\r\n            flatColKey = colKey.join(String.fromCharCode(0))\r\n            if rowKey.length == 0 and colKey.length == 0\r\n                agg = @allTotal\r\n            else if rowKey.length == 0\r\n                agg = @colTotals[flatColKey]\r\n            else if colKey.length == 0\r\n                agg = @rowTotals[flatRowKey]\r\n            else\r\n                agg = @tree[flatRowKey][flatColKey]\r\n            #In multi-metric mode, don't bother creating default aggregators.\r\n            return if $.isArray(agg) then agg else (agg ? {value: (-> null), format: -> \"\"})\r\n\r\n    #expose these to the outside world\r\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\r\n        naturalSort, numberFormat, sortAs, PivotData}\r\n\r\n    ###\r\n    Default Renderer for hierarchical table layout\r\n    ###\r\n\r\n    pivotTableRenderer = (pivotData, opts) ->\r\n        defaults =\r\n            table: clickCallback: null\r\n            localeStrings: totals: \"Totals\"\r\n            treatDataArrayAsRecords: false\r\n\r\n        opts = $.extend(true, {}, defaults, opts)\r\n\r\n        colAttrs = pivotData.colAttrs\r\n        rowAttrs = pivotData.rowAttrs\r\n        rowKeys = pivotData.getRowKeys()\r\n        colKeys = pivotData.getColKeys()\r\n\r\n        if opts.table.clickCallback\r\n            getClickHandler = (value, rowKey, colKey) ->\r\n                filters = {}\r\n                filters[attr] = colKey[i] for attr, i in colAttrs when colKey[i]?\r\n                filters[attr] = rowKey[i] for attr, i in rowAttrs when rowKey[i]?\r\n                return (e) -> opts.table.clickCallback(e, value, filters, pivotData)\r\n\r\n        if opts.table.headerClickCallback\r\n            getHeaderClickHandler = (rowOrCol, type, val) ->\r\n                return (e) -> opts.table.headerClickCallback(e, rowOrCol, type, val)\r\n\r\n        #now actually build the output\r\n        result = document.createElement(\"table\")\r\n        result.className = \"pvtTable\"\r\n\r\n        #helper function for setting row/col span size for all cells\r\n        spanSize = (keys, keyIdx, maxAttrIdx) ->\r\n            #check if cell should be drawn (e.g., if an attr is coarser than the next one, we only draw that attr cell once)\r\n            if keyIdx != 0\r\n                noDraw = true\r\n                for attrIdx in [0..maxAttrIdx]\r\n                    if keys[keyIdx-1][attrIdx] != keys[keyIdx][attrIdx]\r\n                        noDraw = false\r\n                if noDraw\r\n                  return -1 #do not draw cell\r\n            #calculate span\r\n            len = 0\r\n            while keyIdx+len < keys.length\r\n                stop = false\r\n                for attrIdx in [0..maxAttrIdx]\r\n                    stop = true if keys[keyIdx][attrIdx] != keys[keyIdx+len][attrIdx]\r\n                break if stop\r\n                len++\r\n            return len\r\n\r\n        #the first few rows are for col headers\r\n        thead = document.createElement(\"thead\")\r\n        for colAttr, colAttrIdx in colAttrs\r\n            tr = document.createElement(\"tr\")\r\n\r\n            #create empty upper-left cell spanning both row and col attrs\r\n            if parseInt(colAttrIdx) == 0 and rowAttrs.length != 0\r\n                th = document.createElement(\"th\")\r\n                th.setAttribute(\"colspan\", rowAttrs.length)\r\n                th.setAttribute(\"rowspan\", colAttrs.length)\r\n                tr.appendChild th\r\n\r\n            #create cell for this col attr\r\n            th = document.createElement(\"th\")\r\n            th.className = \"pvtAxisLabel\"\r\n            th.textContent = colAttr\r\n            if getHeaderClickHandler?\r\n                th.onclick = getHeaderClickHandler(\"col\", \"attr\", colAttr)\r\n            tr.appendChild th\r\n\r\n            # create cell for each col key (of this attribute)\r\n            for colKey, colKeyIdx in colKeys\r\n                x = spanSize(colKeys, parseInt(colKeyIdx), parseInt(colAttrIdx))\r\n                if x != -1\r\n                    th = document.createElement(\"th\")\r\n                    th.className = \"pvtColLabel\"\r\n                    if opts.formatHeader\r\n                        th.textContent = opts.formatHeader(colKey[colAttrIdx], colAttrs[colAttrIdx]);\r\n                    else\r\n                        th.textContent = colKey[colAttrIdx]\r\n                    th.setAttribute(\"colspan\", x)\r\n\r\n                    #Only allow clicking on the finest-grained attribute.\r\n                    if getHeaderClickHandler? and colAttrIdx == (colAttrs.length - 1)\r\n                        flatColKey = colKey.join(String.fromCharCode(0))\r\n                        th.onclick = getHeaderClickHandler(\"col\", \"key\", flatColKey)\r\n                        #Add key to data-set for post-processing sort icons. CSS selectors\r\n                        #don't work w/code point 0, but we don't need the separators anyway.\r\n                        th.dataset.flatKey = colKey.join(\"\")\r\n\r\n                    #if this is the last col attr, each col key spans 2 rows (the 2nd being the row attr row)\r\n                    if parseInt(colAttrIdx) == colAttrs.length-1 and rowAttrs.length != 0\r\n                        th.setAttribute(\"rowspan\", 2)\r\n\r\n                    tr.appendChild th\r\n\r\n            # create row totals column header\r\n            if parseInt(colAttrIdx) == 0\r\n                createHeader = (aggIdx) ->\r\n                    th = document.createElement(\"th\")\r\n                    th.className = \"pvtTotalLabel pvtRowTotalLabel\"\r\n                    th.innerHTML = opts.localeStrings.totals\r\n                    if aggIdx?\r\n                        th.dataset.aggIdx = aggIdx\r\n                    th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\r\n                    if getHeaderClickHandler?\r\n                        th.onclick = getHeaderClickHandler(\"col\", \"totals\", aggIdx or 0)\r\n                    tr.appendChild th\r\n\r\n                #In multi-metric mode, if \"Metrics\" attr is a col, there is one row totals col per aggregator.\r\n                if $.isArray(pivotData.aggregator) and pivotData.multiAggAttr in colAttrs\r\n                    #Skip row totals if \"Metrics\" is the only col attr: the totals are redundant.\r\n                    if colAttrs.length > 1\r\n                        for agg, aggIdx in pivotData.aggregator\r\n                            createHeader(aggIdx)\r\n                else\r\n                    createHeader()\r\n\r\n            thead.appendChild tr\r\n\r\n        #then a single row for all row attrs\r\n        if rowAttrs.length !=0\r\n            tr = document.createElement(\"tr\")\r\n            for rowAttr, i in rowAttrs\r\n                th = document.createElement(\"th\")\r\n                th.className = \"pvtAxisLabel\"\r\n                th.textContent = rowAttr\r\n                if getHeaderClickHandler?\r\n                    th.onclick = getHeaderClickHandler(\"row\", \"attr\", rowAttr)\r\n                tr.appendChild th\r\n            th = document.createElement(\"th\")  #empty cell below col attr cells\r\n            if colAttrs.length ==0\r\n                #use empty cell for the row totals if there are no col attrs\r\n                th.className = \"pvtTotalLabel pvtRowTotalLabel\"\r\n                th.innerHTML = opts.localeStrings.totals\r\n                if getHeaderClickHandler?\r\n                    #there is only one col totals aggregator\r\n                    th.onclick = getHeaderClickHandler(\"col\", \"totals\", 0)\r\n            tr.appendChild th\r\n            thead.appendChild tr\r\n\r\n        result.appendChild thead\r\n\r\n        #now the actual data rows, with their row headers and totals\r\n        tbody = document.createElement(\"tbody\")\r\n        for rowKey, rowKeyIdx in rowKeys\r\n            tr = document.createElement(\"tr\")\r\n\r\n            #create a header cell for each row attr\r\n            for own rowAttrIdx, txt of rowKey\r\n                x = spanSize(rowKeys, parseInt(rowKeyIdx), parseInt(rowAttrIdx))\r\n                if x != -1\r\n                    th = document.createElement(\"th\")\r\n                    th.className = \"pvtRowLabel\"\r\n                    if opts.formatHeader\r\n                        th.textContent = opts.formatHeader(txt, rowAttrs[rowAttrIdx]);\r\n                    else\r\n                        th.textContent = txt\r\n                    th.setAttribute(\"rowspan\", x)\r\n\r\n                    #if this is the last row attr, the header cell spans 2 cols (the 2nd being the col attr col)\r\n                    if parseInt(rowAttrIdx) == rowAttrs.length-1 and colAttrs.length !=0\r\n                        th.setAttribute(\"colspan\",2)\r\n\r\n                    if getHeaderClickHandler? and parseInt(rowAttrIdx) == rowAttrs.length-1\r\n                        flatRowKey = rowKey.join(String.fromCharCode(0))\r\n                        th.onclick = getHeaderClickHandler(\"row\", \"key\", flatRowKey)\r\n                        #Add key to data-set for post-processing sort icons. CSS selectors\r\n                        #don't work w/code point 0, but we don't need the separators anyway.\r\n                        th.dataset.flatKey = rowKey.join(\"\")\r\n\r\n                    tr.appendChild th\r\n\r\n            #create a value cell for each col key\r\n            for colKey, colKeyIdx in colKeys #this is the tight loop\r\n                aggregator = pivotData.getAggregator(rowKey, colKey)\r\n                val = aggregator.value()\r\n                td = document.createElement(\"td\")\r\n                td.className = \"pvtVal row#{rowKeyIdx} col#{colKeyIdx}\"\r\n                td.textContent = aggregator.format(val)\r\n                td.setAttribute(\"data-value\", val)\r\n                if getClickHandler?\r\n                    td.onclick = getClickHandler(val, rowKey, colKey)\r\n                tr.appendChild td\r\n\r\n            #create rightmost row totals cell/s\r\n            createTotalsCell = (totalAggregator) ->\r\n                val = totalAggregator.value()\r\n                td = document.createElement(\"td\")\r\n                td.className = \"pvtTotal rowTotal\"\r\n                td.textContent = totalAggregator.format(val)\r\n                td.setAttribute(\"data-value\", val)\r\n                if getClickHandler?\r\n                    td.onclick = getClickHandler(val, rowKey, [])\r\n                td.setAttribute(\"data-for\", \"row\"+rowKeyIdx)\r\n                tr.appendChild td\r\n            totalAggregator = pivotData.getAggregator(rowKey, [])\r\n            #Multi-metric mode: one totals cell per aggregator.\r\n            if $.isArray(totalAggregator)\r\n                #Skip row totals if \"Metrics\" is the only col attr: the totals are redundant.\r\n                if colAttrs.length > 1\r\n                    for agg in totalAggregator\r\n                        createTotalsCell(agg)\r\n            else\r\n                createTotalsCell(totalAggregator)\r\n\r\n            tbody.appendChild tr\r\n\r\n        #finally, the row for col totals (which includes a grand total cell in the bottom-right)\r\n        createTotalsRow = (aggIdx) ->\r\n            tr = document.createElement(\"tr\")\r\n\r\n            #left-most header cell\r\n            th = document.createElement(\"th\")\r\n            th.className = \"pvtTotalLabel pvtColTotalLabel\"\r\n            th.innerHTML = opts.localeStrings.totals\r\n            if aggIdx?\r\n                th.dataset.aggIdx = aggIdx\r\n            th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\r\n            if getHeaderClickHandler?\r\n                th.onclick = getHeaderClickHandler(\"row\", \"totals\", aggIdx or 0)\r\n            tr.appendChild th\r\n\r\n            #value cells, one per col key\r\n            for colKey, colKeyIdx in colKeys\r\n                totalAggregator = pivotData.getAggregator([], colKey)\r\n                if aggIdx?\r\n                    totalAggregator = totalAggregator[aggIdx]\r\n                val = totalAggregator.value()\r\n                td = document.createElement(\"td\")\r\n                td.className = \"pvtTotal colTotal\"\r\n                td.textContent = totalAggregator.format(val)\r\n                td.setAttribute(\"data-value\", val)\r\n                if getClickHandler?\r\n                    td.onclick = getClickHandler(val, [], colKey)\r\n                td.setAttribute(\"data-for\", \"col\"+colKeyIdx)\r\n                tr.appendChild td\r\n\r\n            #right-most grand total cell\r\n            createGrandTotalCell = (totalAggregator) ->\r\n                val = totalAggregator.value()\r\n                td = document.createElement(\"td\")\r\n                td.className = \"pvtGrandTotal\"\r\n                td.textContent = totalAggregator.format(val)\r\n                td.setAttribute(\"data-value\", val)\r\n                if getClickHandler?\r\n                    td.onclick = getClickHandler(val, [], [])\r\n                tr.appendChild td\r\n\r\n            #This is an array in multi-metrics mode.\r\n            totalAggregator = pivotData.getAggregator([], [])\r\n            if not $.isArray(totalAggregator)\r\n                createGrandTotalCell(totalAggregator)\r\n            #Multi-metrics mode, \"metrics\" attr in rows: each grand total cell is created per createTotalsRow() call.\r\n            else if aggIdx?\r\n                createGrandTotalCell(totalAggregator[aggIdx])\r\n            #Multi-metrics mode, \"metrics\" attr in cols, only one totals row: one grand total cell per aggregator.\r\n            else\r\n                #Skip row totals if \"Metrics\" is the only col attr: totals are redundant.\r\n                if colAttrs.length > 1\r\n                    for agg in totalAggregator\r\n                        createGrandTotalCell(agg)\r\n\r\n            tbody.appendChild tr\r\n\r\n        #In multi-metric mode, if the \"Metrics\" attr is a row, there is one\r\n        #col totals row per aggregator.\r\n        if $.isArray(pivotData.aggregator) and pivotData.multiAggAttr in rowAttrs\r\n            #Skip col totals if \"Metrics\" is the only row attr: the totals are redundant.\r\n            if rowAttrs.length > 1\r\n                for agg, aggIdx in pivotData.aggregator\r\n                    createTotalsRow(aggIdx)\r\n        else\r\n            createTotalsRow()\r\n\r\n        result.appendChild tbody\r\n\r\n        #squirrel this away for later\r\n        result.setAttribute(\"data-numrows\", rowKeys.length)\r\n        result.setAttribute(\"data-numcols\", colKeys.length)\r\n\r\n        return result\r\n\r\n    ###\r\n    Pivot Table core: create PivotData object and call Renderer on it\r\n    ###\r\n\r\n    $.fn.pivot = (input, inputOpts, locale=\"en\") ->\r\n        locale = \"en\" if not locales[locale]?\r\n        defaults =\r\n            cols : [], rows: [], vals: []\r\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\r\n            dataClass: PivotData\r\n            filter: -> true\r\n            aggregator: aggregatorTemplates.count()()\r\n            aggregatorName: \"Count\"\r\n            sorters: {}\r\n            derivedAttributes: {}\r\n            renderer: pivotTableRenderer\r\n\r\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\r\n        localeDefaults =\r\n            rendererOptions: {localeStrings}\r\n            localeStrings: localeStrings\r\n\r\n        opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\r\n\r\n        result = null\r\n        try\r\n            pivotData = new opts.dataClass(input, opts)\r\n            try\r\n                result = opts.renderer(pivotData, opts.rendererOptions)\r\n            catch e\r\n                @trigger('error', e)\r\n                console.error(e.stack) if console?\r\n                result = $(\"<span>\").html opts.localeStrings.renderError\r\n        catch e\r\n            @trigger('error', e)\r\n            console.error(e.stack) if console?\r\n            result = $(\"<span>\").html opts.localeStrings.computeError\r\n\r\n        x = this[0]\r\n        x.removeChild(x.lastChild) while x.hasChildNodes()\r\n        return @append result\r\n\r\n\r\n    ###\r\n    Pivot Table UI: calls Pivot Table core above with options set by user\r\n    ###\r\n\r\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\r\n        locale = \"en\" if not locales[locale]?\r\n        defaults =\r\n            derivedAttributes: {}\r\n            aggregators: locales[locale].aggregators\r\n            renderers: locales[locale].renderers\r\n            hiddenAttributes: []\r\n            hiddenFromAggregators: []\r\n            hiddenFromDragDrop: []\r\n            menuLimit: 500\r\n            cols: [], rows: [], vals: []\r\n            rowOrder: \"key_a_to_z\", colOrder: \"key_a_to_z\"\r\n            dataClass: PivotData\r\n            exclusions: {}\r\n            inclusions: {}\r\n            unusedAttrsVertical: 85\r\n            autoSortUnusedAttrs: false\r\n            onRefresh: null\r\n            filter: -> true\r\n            sorters: {}\r\n            treatDataArrayAsRecords: false\r\n\r\n        localeStrings = $.extend(true, {}, locales.en.localeStrings, locales[locale].localeStrings)\r\n        localeDefaults =\r\n            rendererOptions: {localeStrings}\r\n            localeStrings: localeStrings\r\n\r\n        existingOpts = @data \"pivotUIOptions\"\r\n        if not existingOpts? or overwrite\r\n            opts = $.extend(true, {}, localeDefaults, $.extend({}, defaults, inputOpts))\r\n        else\r\n            opts = existingOpts\r\n\r\n        try\r\n            # do a first pass on the data to cache a materialized copy of any\r\n            # function-valued inputs and to compute dimension cardinalities\r\n            attrValues = {}\r\n            materializedInput = []\r\n            recordsProcessed = 0\r\n            PivotData.forEachRecord input, opts, (record) ->\r\n                return unless opts.filter(record)\r\n                materializedInput.push(record)\r\n                for own attr of record\r\n                    if not attrValues[attr]?\r\n                        attrValues[attr] = {}\r\n                        if recordsProcessed > 0\r\n                            attrValues[attr][@emptyValue] = recordsProcessed\r\n                for attr of attrValues\r\n                    value = record[attr] ? @emptyValue\r\n                    attrValues[attr][value] ?= 0\r\n                    attrValues[attr][value]++\r\n                recordsProcessed++\r\n\r\n            #start building the output\r\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\r\n\r\n            #renderer control\r\n            rendererControl = $(\"<td>\")\r\n\r\n            renderer = $(\"<select>\")\r\n                .addClass('pvtRenderer')\r\n                .appendTo(rendererControl)\r\n                .bind \"change\", -> refresh() #capture reference\r\n            for own x of opts.renderers\r\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\r\n\r\n\r\n            #axis list, including the double-click menu\r\n            unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\r\n            shownAttributes = (a for a of attrValues when a not in opts.hiddenAttributes)\r\n            shownInAggregators = (c for c in shownAttributes when c not in opts.hiddenFromAggregators)\r\n            shownInDragDrop = (c for c in shownAttributes when c not in opts.hiddenFromDragDrop)\r\n\r\n\r\n            unusedAttrsVerticalAutoOverride = false\r\n            if opts.unusedAttrsVertical == \"auto\"\r\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\r\n            else\r\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\r\n\r\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\r\n                attrLength = 0\r\n                attrLength += a.length for a in shownInDragDrop\r\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\r\n\r\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\r\n                unused.addClass('pvtVertList')\r\n            else\r\n                unused.addClass('pvtHorizList')\r\n\r\n            for own i, attr of shownInDragDrop\r\n                do (attr) ->\r\n                    values = (v for v of attrValues[attr])\r\n                    hasExcludedItem = false\r\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\r\n\r\n                    valueList.append $(\"<h4>\").append(\r\n                        $(\"<span>\").text(attr),\r\n                        $(\"<span>\").addClass(\"count\").text(\"(#{values.length})\"),\r\n                        )\r\n                    if values.length > opts.menuLimit\r\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\r\n                    else\r\n                        if values.length > 5\r\n                            controls = $(\"<p>\").appendTo(valueList)\r\n                            sorter = getSort(opts.sorters, attr)\r\n                            placeholder = opts.localeStrings.filterResults\r\n                            $(\"<input>\", {type: \"text\"}).appendTo(controls)\r\n                                .attr({placeholder: placeholder, class: \"pvtSearch\"})\r\n                                .bind \"keyup\", ->\r\n                                    filter = $(this).val().toLowerCase().trim()\r\n                                    accept_gen = (prefix, accepted) -> (v) ->\r\n                                        real_filter = filter.substring(prefix.length).trim()\r\n                                        return true if real_filter.length == 0\r\n                                        return Math.sign(sorter(v.toLowerCase(), real_filter)) in accepted\r\n                                    accept =\r\n                                        if      filter.startsWith(\">=\") then accept_gen(\">=\", [1,0])\r\n                                        else if filter.startsWith(\"<=\") then accept_gen(\"<=\", [-1,0])\r\n                                        else if filter.startsWith(\">\")  then accept_gen(\">\",  [1])\r\n                                        else if filter.startsWith(\"<\")  then accept_gen(\"<\",  [-1])\r\n                                        else if filter.startsWith(\"~\")  then (v) ->\r\n                                                return true if filter.substring(1).trim().length == 0\r\n                                                v.toLowerCase().match(filter.substring(1))\r\n                                        else (v) -> v.toLowerCase().indexOf(filter) != -1\r\n\r\n                                    valueList.find('.pvtCheckContainer p label span.value').each ->\r\n                                        if accept($(this).text())\r\n                                            $(this).parent().parent().show()\r\n                                        else\r\n                                            $(this).parent().parent().hide()\r\n                            controls.append $(\"<br>\")\r\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\r\n                                .html(opts.localeStrings.selectAll)\r\n                                .bind \"click\", ->\r\n                                    valueList.find(\"input:visible:not(:checked)\")\r\n                                        .prop(\"checked\", true).toggleClass(\"changed\")\r\n                                    return false\r\n                            $(\"<button>\", {type:\"button\"}).appendTo(controls)\r\n                                .html(opts.localeStrings.selectNone)\r\n                                .bind \"click\", ->\r\n                                    valueList.find(\"input:visible:checked\")\r\n                                        .prop(\"checked\", false).toggleClass(\"changed\")\r\n                                    return false\r\n\r\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\r\n\r\n                        for value in values.sort(getSort(opts.sorters, attr))\r\n                             valueCount = attrValues[attr][value]\r\n                             filterItem = $(\"<label>\")\r\n                             filterItemExcluded = false\r\n                             if opts.inclusions[attr]\r\n                                filterItemExcluded = (value not in opts.inclusions[attr])\r\n                             else if opts.exclusions[attr]\r\n                                filterItemExcluded = (value in opts.exclusions[attr])\r\n                             hasExcludedItem ||= filterItemExcluded\r\n                             $(\"<input>\")\r\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\r\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\r\n                                .appendTo(filterItem)\r\n                                .bind \"change\", -> $(this).toggleClass(\"changed\")\r\n                             filterItem.append $(\"<span>\").addClass(\"value\").text(value)\r\n                             filterItem.append $(\"<span>\").addClass(\"count\").text(\"(\"+valueCount+\")\")\r\n                             checkContainer.append $(\"<p>\").append(filterItem)\r\n\r\n                    closeFilterBox = ->\r\n                        if valueList.find(\"[type='checkbox']\").length >\r\n                               valueList.find(\"[type='checkbox']:checked\").length\r\n                                attrElem.addClass \"pvtFilteredAttribute\"\r\n                            else\r\n                                attrElem.removeClass \"pvtFilteredAttribute\"\r\n\r\n                            valueList.find('.pvtSearch').val('')\r\n                            valueList.find('.pvtCheckContainer p').show()\r\n                            valueList.hide()\r\n\r\n                    finalButtons = $(\"<p>\").appendTo(valueList)\r\n\r\n                    if values.length <= opts.menuLimit\r\n                        $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.apply)\r\n                            .appendTo(finalButtons).bind \"click\", ->\r\n                                if valueList.find(\".changed\").removeClass(\"changed\").length\r\n                                    refresh()\r\n                                closeFilterBox()\r\n\r\n                    $(\"<button>\", {type: \"button\"}).text(opts.localeStrings.cancel)\r\n                        .appendTo(finalButtons).bind \"click\", ->\r\n                            valueList.find(\".changed:checked\")\r\n                                .removeClass(\"changed\").prop(\"checked\", false)\r\n                            valueList.find(\".changed:not(:checked)\")\r\n                                .removeClass(\"changed\").prop(\"checked\", true)\r\n                            closeFilterBox()\r\n\r\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle')\r\n                        .html(\" &#x25BE;\").bind \"click\", (e) ->\r\n                            {left, top} = $(e.currentTarget).position()\r\n                            valueList.css(left: left+10, top: top+10).show()\r\n\r\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\r\n                        .append $(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink)\r\n\r\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\r\n                    unused.append(attrElem).append(valueList)\r\n\r\n            tr1 = $(\"<tr>\").appendTo(uiTable)\r\n\r\n            #aggregator menu and value area\r\n\r\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\r\n                .bind \"change\", -> refresh() #capture reference\r\n            for own x of opts.aggregators\r\n                aggregator.append $(\"<option>\").val(x).html(x)\r\n\r\n            ordering =\r\n                key_a_to_z:   {rowSymbol: \"&varr;\", colSymbol: \"&harr;\", next: \"value_a_to_z\"}\r\n                value_a_to_z: {rowSymbol: \"&darr;\", colSymbol: \"&rarr;\", next: \"value_z_to_a\"}\r\n                value_z_to_a: {rowSymbol: \"&uarr;\", colSymbol: \"&larr;\", next: \"key_a_to_z\"}\r\n\r\n            rowOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtRowOrder\")\r\n                .data(\"order\", opts.rowOrder).html(ordering[opts.rowOrder].rowSymbol)\r\n                .bind \"click\", ->\r\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\r\n                    $(this).html(ordering[$(this).data(\"order\")].rowSymbol)\r\n                    refresh()\r\n\r\n            colOrderArrow = $(\"<a>\", role: \"button\").addClass(\"pvtColOrder\")\r\n                .data(\"order\", opts.colOrder).html(ordering[opts.colOrder].colSymbol)\r\n                .bind \"click\", ->\r\n                    $(this).data(\"order\", ordering[$(this).data(\"order\")].next)\r\n                    $(this).html(ordering[$(this).data(\"order\")].colSymbol)\r\n                    refresh()\r\n\r\n            $(\"<td>\").addClass('pvtVals')\r\n              .appendTo(tr1)\r\n              .append(aggregator)\r\n              .append(rowOrderArrow)\r\n              .append(colOrderArrow)\r\n              .append($(\"<br>\"))\r\n\r\n            #column axes\r\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\r\n\r\n            tr2 = $(\"<tr>\").appendTo(uiTable)\r\n\r\n            #row axes\r\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\r\n\r\n            #the actual pivot table container\r\n            pivotTable = $(\"<td>\")\r\n                .attr(\"valign\", \"top\")\r\n                .addClass('pvtRendererArea')\r\n                .appendTo(tr2)\r\n\r\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\r\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\r\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\r\n                uiTable.find('tr:nth-child(2)').prepend unused\r\n            else\r\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(unused)\r\n\r\n            #render the UI in its default state\r\n            @html uiTable\r\n\r\n            #set up the UI initial state as requested by moving elements around\r\n\r\n            for x in opts.cols\r\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\r\n            for x in opts.rows\r\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownInDragDrop)}\")\r\n            if opts.aggregatorName?\r\n                @find(\".pvtAggregator\").val opts.aggregatorName\r\n            if opts.rendererName?\r\n                @find(\".pvtRenderer\").val opts.rendererName\r\n\r\n            initialRender = true\r\n\r\n            #set up for refreshing\r\n            refreshDelayed = =>\r\n                subopts =\r\n                    derivedAttributes: opts.derivedAttributes\r\n                    localeStrings: opts.localeStrings\r\n                    rendererOptions: opts.rendererOptions\r\n                    sorters: opts.sorters\r\n                    cols: [], rows: []\r\n                    dataClass: opts.dataClass\r\n\r\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\r\n                vals = []\r\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\r\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\r\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\r\n                    if numInputsToProcess == 0\r\n                        $(this).remove()\r\n                    else\r\n                        numInputsToProcess--\r\n                        vals.push $(this).val() if $(this).val() != \"\"\r\n\r\n                if numInputsToProcess != 0\r\n                    pvtVals = @find(\".pvtVals\")\r\n                    for x in [0...numInputsToProcess]\r\n                        newDropdown = $(\"<select>\")\r\n                            .addClass('pvtAttrDropdown')\r\n                            .append($(\"<option>\"))\r\n                            .bind \"change\", -> refresh()\r\n                        for attr in shownInAggregators\r\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\r\n                        pvtVals.append(newDropdown)\r\n\r\n                if initialRender\r\n                    vals = opts.vals\r\n                    i = 0\r\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\r\n                        $(this).val vals[i]\r\n                        i++\r\n                    initialRender = false\r\n\r\n                subopts.aggregatorName = aggregator.val()\r\n                subopts.vals = vals\r\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\r\n                subopts.renderer = opts.renderers[renderer.val()]\r\n                subopts.rowOrder = rowOrderArrow.data(\"order\")\r\n                subopts.colOrder = colOrderArrow.data(\"order\")\r\n                #construct filter here\r\n                exclusions = {}\r\n                @find('input.pvtFilter').not(':checked').each ->\r\n                    filter = $(this).data(\"filter\")\r\n                    if exclusions[filter[0]]?\r\n                        exclusions[filter[0]].push( filter[1] )\r\n                    else\r\n                        exclusions[filter[0]] = [ filter[1] ]\r\n                #include inclusions when exclusions present\r\n                inclusions = {}\r\n                @find('input.pvtFilter:checked').each ->\r\n                    filter = $(this).data(\"filter\")\r\n                    if exclusions[filter[0]]?\r\n                        if inclusions[filter[0]]?\r\n                            inclusions[filter[0]].push( filter[1] )\r\n                        else\r\n                            inclusions[filter[0]] = [ filter[1] ]\r\n\r\n                subopts.filter = (record) ->\r\n                    return false if not opts.filter(record)\r\n                    for k,excludedItems of exclusions\r\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\r\n                    return true\r\n\r\n                pivotTable.pivot(materializedInput,subopts)\r\n                pivotUIOptions = $.extend {}, opts,\r\n                    cols: subopts.cols\r\n                    rows: subopts.rows\r\n                    colOrder: subopts.colOrder\r\n                    rowOrder: subopts.rowOrder\r\n                    vals: vals\r\n                    exclusions: exclusions\r\n                    inclusions: inclusions\r\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\r\n                    aggregatorName: aggregator.val()\r\n                    rendererName: renderer.val()\r\n\r\n                @data \"pivotUIOptions\", pivotUIOptions\r\n\r\n                # if requested make sure unused columns are in alphabetical order\r\n                if opts.autoSortUnusedAttrs\r\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\r\n                    $(unusedAttrsContainer).children(\"li\")\r\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\r\n                        .appendTo unusedAttrsContainer\r\n\r\n                pivotTable.css(\"opacity\", 1)\r\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\r\n\r\n            refresh = =>\r\n                pivotTable.css(\"opacity\", 0.5)\r\n                setTimeout refreshDelayed, 10\r\n\r\n            #the very first refresh will actually display the table\r\n            refresh()\r\n\r\n            @find(\".pvtAxisContainer\").sortable\r\n                    update: (e, ui) -> refresh() if not ui.sender?\r\n                    connectWith: @find(\".pvtAxisContainer\")\r\n                    items: 'li'\r\n                    placeholder: 'pvtPlaceholder'\r\n        catch e\r\n            $(this).trigger('error', e)\r\n            console.error(e.stack) if console?\r\n            @html opts.localeStrings.uiRenderError\r\n        return this\r\n\r\n    ###\r\n    Heatmap post-processing\r\n    ###\r\n\r\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\r\n        numRows = @data \"numrows\"\r\n        numCols = @data \"numcols\"\r\n\r\n        # given a series of values\r\n        # must return a function to map a given value to a CSS color\r\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\r\n        colorScaleGenerator ?= (values) ->\r\n            min = Math.min(values...)\r\n            max = Math.max(values...)\r\n            return (x) ->\r\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\r\n                return \"rgb(255,#{nonRed},#{nonRed})\"\r\n\r\n        heatmapper = (scope) =>\r\n            forEachCell = (f) =>\r\n                @find(scope).each ->\r\n                    x = $(this).data(\"value\")\r\n                    f(x, $(this)) if x? and isFinite(x)\r\n\r\n            values = []\r\n            forEachCell (x) -> values.push x\r\n            colorScale = colorScaleGenerator(values)\r\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\r\n\r\n        switch scope\r\n            when \"heatmap\"    then heatmapper \".pvtVal\"\r\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\r\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\r\n\r\n        heatmapper \".pvtTotal.rowTotal\"\r\n        heatmapper \".pvtTotal.colTotal\"\r\n\r\n        return this\r\n\r\n    ###\r\n    Barchart post-processing\r\n    ###\r\n\r\n    $.fn.barchart = (opts) ->\r\n        numRows = @data \"numrows\"\r\n        numCols = @data \"numcols\"\r\n\r\n        barcharter = (scope) =>\r\n            forEachCell = (f) =>\r\n                @find(scope).each ->\r\n                    x = $(this).data(\"value\")\r\n                    f(x, $(this)) if x? and isFinite(x)\r\n\r\n            values = []\r\n            forEachCell (x) -> values.push x\r\n            max = Math.max(values...)\r\n            if max < 0\r\n                max = 0\r\n            range = max;\r\n            min = Math.min(values...)\r\n            if min < 0\r\n                range = max - min\r\n            scaler = (x) -> 100*x/(1.4*range)\r\n            forEachCell (x, elem) ->\r\n                text = elem.text()\r\n                wrapper = $(\"<div>\").css\r\n                    \"position\": \"relative\"\r\n                    \"height\": \"55px\"\r\n                bgColor = \"gray\"\r\n                bBase = 0\r\n                if min < 0\r\n                    bBase = scaler(-min)\r\n                if x < 0\r\n                    bBase += scaler(x)\r\n                    bgColor = \"darkred\"\r\n                    x = -x\r\n                wrapper.append $(\"<div>\").css\r\n                    \"position\": \"absolute\"\r\n                    \"bottom\": bBase + \"%\"\r\n                    \"left\": 0\r\n                    \"right\": 0\r\n                    \"height\": scaler(x) + \"%\"\r\n                    \"background-color\": bgColor\r\n                wrapper.append $(\"<div>\").text(text).css\r\n                    \"position\":\"relative\"\r\n                    \"padding-left\":\"5px\"\r\n                    \"padding-right\":\"5px\"\r\n\r\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\r\n\r\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\r\n        barcharter \".pvtTotal.colTotal\"\r\n\r\n        return this\r\n"]}